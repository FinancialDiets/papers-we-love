%!PS-Adobe-2.0
%%Title: bool.mss
%%DocumentFonts: (atend)
%%Creator: Randy Bryant and Scribe 8.2
%%CreationDate: 6 November 2001 13:31
%%Pages: (atend)
%%EndComments
% PostScript Prelude for Scribe.
/BS {/SV save def 0.0 792.0 translate .01 -.01 scale} bind def
/ES {showpage SV restore} bind def
/SC {setrgbcolor} bind def
/FMTX matrix def
/RDF {WFT SLT 0.0 eq 
  {SSZ 0.0 0.0 SSZ neg 0.0 0.0 FMTX astore}
  {SSZ 0.0 SLT neg sin SLT cos div SSZ mul SSZ neg 0.0 0.0 FMTX astore}
  ifelse makefont setfont} bind def
/SLT 0.0 def
/SI { /SLT exch cvr def RDF} bind def
/WFT /Courier findfont def
/SF { /WFT exch findfont def RDF} bind def
/SSZ 1000.0 def
/SS { /SSZ exch 100.0 mul def RDF} bind def
/AF { /WFT exch findfont def /SSZ exch 100.0 mul def RDF} bind def
/MT /moveto load def
/XM {currentpoint exch pop moveto} bind def
/UL {gsave newpath moveto dup 2.0 div 0.0 exch rmoveto
   setlinewidth 0.0 rlineto stroke grestore} bind def
/LH {gsave newpath moveto setlinewidth
   0.0 rlineto
   gsave stroke grestore} bind def
/LV {gsave newpath moveto setlinewidth
   0.0 exch rlineto
   gsave stroke grestore} bind def
/BX {gsave newpath moveto setlinewidth
   exch
   dup 0.0 rlineto
   exch 0.0 exch neg rlineto
   neg 0.0 rlineto
   closepath
   gsave stroke grestore} bind def
/BX1 {grestore} bind def
/BX2 {setlinewidth 1 setgray stroke grestore} bind def
/PB {/PV save def newpath translate
    100.0 -100.0 scale pop /showpage {} def} bind def
/PE {PV restore} bind def
/GB {/PV save def newpath translate rotate
    div dup scale 100.0 -100.0 scale
    /showpage {} def
    /letter {} def
    /lettersmall {} def
    /note {} def
    /setpagedevice {pop} def
    } bind def
/GE {PV restore} bind def
/FB {dict dup /FontMapDict exch def begin} bind def
/FM {cvn exch cvn exch def} bind def
/FE {end /original-findfont /findfont load def  /findfont
   {dup FontMapDict exch known{FontMapDict exch get} if
   original-findfont} def} bind def
/BC {gsave moveto dup 0 exch rlineto exch 0 rlineto neg 0 exch rlineto closepath clip} bind def
/EC /grestore load def
/SH /show load def
/MX {exch show 0.0 rmoveto} bind def
/W {0 32 4 -1 roll widthshow} bind def
/WX {0 32 5 -1 roll widthshow 0.0 rmoveto} bind def
/RC {100.0 -100.0 scale
612.0 0.0 translate
-90.0 rotate
.01 -.01 scale} bind def
/URC {100.0 -100.0 scale
90.0 rotate
-612.0 0.0 translate
.01 -.01 scale} bind def
/RCC {100.0 -100.0 scale
0.0 -792.0 translate 90.0 rotate
.01 -.01 scale} bind def
/URCC {100.0 -100.0 scale
-90.0 rotate 0.0 792.0 translate
.01 -.01 scale} bind def
%%EndProlog
%%Page: 1 1

61200 79200 BS
0 SI
13 /Times-Bold AF
23576 8071 MT
(Graph-Based Algorithms)SH
20209 9644 MT
(for Boolean Function Manipulation)SH
11 SS 
39891 9250 MT
(1)SH
(2)SH
10 /Times-Roman AF
26942 12225 MT
(Randal E. Bryant)SH
8 SS 
33858 11880 MT
(3)SH
13 /Times-Bold AF
28181 15584 MT
(Abstract)SH
10 /Times-Roman AF
8200 17957 MT
(In this paper)
243 W( we present a new data structure for representing Boolean functions and an associated set of)242 W
7200 19062 MT
(manipulation algorithms.  Functions are represented by directed, acyclic graphs in a manner similar to)
300 W( the)301 W
7200 20167 MT
(representations introduced by Lee)
255 W( [1])
SH( and Akers)
254 W( [2],)
SH( but with further restrictions on the ordering of decision)254 W
7200 21272 MT
(variables in the graph.  Although a function requires, in the worst case, a graph of)
25 W( size exponential in the number of)26 W
7200 22377 MT
(arguments, many of the functions encountered in typical)
86 W( applications have a more reasonable representation.  Our)85 W
7200 23482 MT
(algorithms have time complexity proportional to the sizes of the graphs being operated on, and hence are)
152 W( quite)153 W
7200 24587 MT
(efficient as long as the graphs do not grow too large.)
232 W( We)
713 W( present experimental results from applying these)231 W
7200 25692 MT
(algorithms to problems in logic design verification that demonstrate the practicality of our approach.)SH
/Times-Italic SF
8200 27899 MT
(Index Terms)SH
/Times-Roman SF
(: Boolean)
250 W( functions, symbolic manipulation, binary decision diagrams, logic design verification)SH
12 /Times-Bold AF
7200 31583 MT
(1. Introduction)SH
10 /Times-Roman AF
8200 32960 MT
(Boolean Algebra forms a cornerstone of computer science and digital)
76 W( system design.  Many problems in digital)77 W
7200 34337 MT
(logic design and testing, artificial intelligence, and combinatorics can be expressed as a sequence of)
75 W( operations on)74 W
7200 35714 MT
(Boolean functions.  Such applications would)
134 W( benefit from efficient algorithms for representing and manipulating)135 W
7200 37091 MT
(Boolean functions symbolically.)
260 W( Unfortunately,)
768 W( many of the tasks one would like to perform with Boolean)259 W
7200 38468 MT
(functions, such as)
263 W( testing whether there exists any assignment of input variables such that a given Boolean)264 W
7200 39845 MT
(expression evaluates)
21 W( to 1 \050satisfiability\051, or two Boolean expressions denote the same function \050equivalence\051 require)20 W
7200 41222 MT
(solutions to NP-Complete or coNP-Complete problems)
166 W( [3].)
SH( Consequently,)
583 W( all known approaches to performing)167 W
7200 42599 MT
(these operations require, in the worst case, an amount of computer time that grows exponentially with)
12 W( the size of the)11 W
7200 43976 MT
(problem. This)
514 W( makes it difficult to compare the relative efficiencies of different)
132 W( approaches to representing and)133 W
7200 45353 MT
(manipulating Boolean functions.  In the worst case, all known approaches perform as poorly)
56 W( as the naive approach)55 W
7200 46730 MT
(of representing functions by)
87 W( their truth tables and defining all of the desired operations in terms of their effect on)88 W
7200 48107 MT
(truth table entries.)
67 W( In)
382 W( practice, by utilizing more clever representations and manipulation algorithms, we can often)66 W
7200 49484 MT
(avoid these exponential computations.)SH
8200 51963 MT
(A variety of methods have been developed for representing and manipulating Boolean functions.  Those based on)21 W
7200 53340 MT
(classical representations such)
217 W( as truth tables, Karnaugh maps, or canonical sum-of-products form)
216 W( [4])
SH( are quite)216 W
10800 50 7200 56307 UL
9 SS 
8300 57829 MT
(1)SH
11 SS 
8750 58192 MT
(This research was funded at the California Institute of Technology by the Defense)
8 W( Advanced Research)7 W
7200 59388 MT
(Projects Agency ARPA Order Number 3771 and at Carnegie-Mellon)
387 W( University by the Defense)388 W
7200 60584 MT
(Advanced Research Projects Agency)
130 W( ARPA Order Number 3597.  A preliminary version of this paper)129 W
7200 61780 MT
(was presented under the title "Symbolic)
420 W( Manipulation of Boolean Functions Using a Graphical)421 W
7200 62976 MT
(Representation" at the 22nd Design Automation Conference, Las Vegas, NV, June 1985.)SH
9 SS 
8300 65005 MT
(2)SH
11 /Times-Bold AF
8750 65368 MT
(Update:)SH
/Times-Roman SF
13057 XM
(This paper was originally published in)244 W
/Times-BoldItalic SF
31691 XM
(IEEE Transactions on Computers, C-35-8)244 W
/Times-Roman SF
(, pp.)243 W
7200 66564 MT
(677-691, August, 1986.  To create this version, we)
244 W( started with the original electronic form of the)245 W
7200 67760 MT
(submission. All)
511 W( of the figures had to be redrawn, since they were in a now defunct format.  We)
118 W( have)117 W
7200 68956 MT
(included footnotes \050starting with ")11 W
/Times-Bold SF
(Update:)SH
/Times-Roman SF
("\051 discussing)
297 W( some of the \050minor\051 errors)
11 W( in the original version)12 W
7200 70152 MT
(and giving updates on some of the open problems.)SH
6 SS 
8000 71691 MT
(3)SH
8 SS 
8300 72000 MT
(Current address:  Department of Computer Science, Carnegie-Mellon University, Pittsburgh, PA 15213)SH
ES
%%Page: 2 2

61200 79200 BS
0 SI
10 /Times-Roman AF
30350 4286 MT
(2)SH
7200 8094 MT
(impractical---)SH
/Times-Italic SF
(every)SH
/Times-Roman SF
15258 XM
(function of)145 W
/Times-Italic SF
20214 XM
(n)SH
/Times-Roman SF
21109 XM
(arguments has a)
145 W( representation of size 2)146 W
8 /Times-Italic AF
37979 7749 MT
(n)SH
10 /Times-Roman AF
38775 8094 MT
(or more.  More practical approaches)146 W
7200 9471 MT
(utilize representations that at least for many functions, are not of exponential)
30 W( size.  Example representations include)29 W
7200 10848 MT
(as a reduced sum of)
60 W( products)
61 W( [4],)
SH( \050or equivalently as sets of prime cubes)
61 W( [5]\051)
SH( and factored into unate functions)
61 W( [6].)SH
7200 12225 MT
(These representations suffer from several drawbacks.  First,)
82 W( certain common functions still require representations)81 W
7200 13602 MT
(of exponential size.  For example, the even and odd)
101 W( parity functions serve as worst case examples in all of these)102 W
7200 14979 MT
(representations. Second,)
712 W( while a certain function may)
231 W( have a reasonable representation, performing a simple)230 W
7200 16356 MT
(operation such as complementation could yield a function with an exponential representation.  Finally,)
12 W( none of these)13 W
7200 17733 MT
(representations are)72 W
/Times-Italic SF
15119 XM
(canonical forms)72 W
/Times-Roman SF
(, i.e. a given function may have)
72 W( many different representations.  Consequently,)71 W
7200 19110 MT
(testing for equivalence or satisfiability can be quite difficult.)SH
8200 21589 MT
(Due to)
153 W( these characteristics, most programs that process a sequence of operations on Boolean functions have)154 W
7200 22966 MT
(rather erratic behavior.  They proceed at a reasonable pace,)
153 W( but then suddenly "blow up", either running out of)152 W
7200 24343 MT
(storage or failing to complete an operation in a reasonable amount of time.)SH
8200 26822 MT
(In this paper we present a new class of algorithms for manipulating Boolean functions represented as directed)120 W
7200 28199 MT
(acyclic graphs.)
5 W( Our)
258 W( representation resembles the binary decision diagram notation introduced by Lee)
4 W( [1])
SH( and further)4 W
7200 29576 MT
(popularized by Akers)
205 W( [2].)
SH( However,)
660 W( we place further restrictions on the ordering of decision)
205 W( variables in the)206 W
7200 30953 MT
(vertices. These)
484 W( restrictions enable the development of algorithms for manipulating the representations)
117 W( in a more)116 W
7200 32330 MT
(efficient manner.)SH
8200 34809 MT
(Our representation has several)
149 W( advantages over previous approaches to Boolean function manipulation.  First,)150 W
7200 36186 MT
(most commonly-encountered functions have a reasonable)
179 W( representation.  For example, all symmetric functions)178 W
7200 37563 MT
(\050including even and odd parity\051 are represented by)
26 W( graphs where the number of vertices grows at most as the square)27 W
7200 38940 MT
(of the number of arguments.  Second, the performance of a program based on our algorithms when)
113 W( processing a)112 W
7200 40317 MT
(sequence of operations)
13 W( degrades slowly, if at all.  That is, the time complexity of any single operation is bounded by)14 W
7200 41694 MT
(the product of the graph sizes for the)
27 W( functions being operated on.  For example, complementing a function requires)26 W
7200 43071 MT
(time proportional to the size of the function graph, while combining two functions)
12 W( with a binary operation \050of which)13 W
7200 44448 MT
(intersection, subtraction, and testing for implication are)
171 W( special cases\051 requires at most time proportional to the)170 W
7200 45825 MT
(product of the two graph sizes.  Finally, our representation in terms of)4 W
/Times-Italic SF
35498 XM
(reduced)SH
/Times-Roman SF
38973 XM
(graphs is a canonical form,)
4 W( i.e.  every)5 W
7200 47202 MT
(function has a unique representation.  Hence, testing for equivalence simply involves testing)
16 W( whether the two graphs)15 W
7200 48579 MT
(match exactly, while testing for satisfiability simply involves comparing the graph to that of the constant function)SH
/Times-Bold SF
52919 XM
(0)SH
/Times-Roman SF
(.)SH
8200 51058 MT
(Unfortunately, our approach does have)
91 W( its own set of undesirable characteristics.  At the start of processing we)92 W
7200 52435 MT
(must choose some ordering of the system)
84 W( inputs as arguments to all of the functions to be represented.  For some)83 W
7200 53812 MT
(functions, the size of the)
189 W( graph representing the function is highly sensitive to this ordering.  The problem of)190 W
7200 55189 MT
(computing an ordering that)
112 W( minimizes the size of the graph is itself a coNP-Complete problem.  Our experience,)111 W
7200 56566 MT
(however, has)
277 W( been that a human with some understanding of the problem domain can generally choose an)278 W
7200 57943 MT
(appropriate ordering without great)
61 W( difficulty.  It seems quite likely that using a small set of heuristics, the program)60 W
7200 59320 MT
(itself could select an adequate ordering most of the time.  More)
143 W( seriously, there are some functions that can be)144 W
7200 60697 MT
(represented by Boolean expressions or logic circuits of reasonable size but for)
37 W( all input orderings the representation)36 W
7200 62074 MT
(as a function graph is too large to be practical.  For)
2 W( example, we prove in an appendix to this paper that the functions)3 W
7200 63451 MT
(describing the outputs of an integer multiplier have graphs that grow exponentially in the word size regardless)
11 W( of the)10 W
7200 64828 MT
(input ordering.)
105 W( With)
462 W( the exception of integer multiplication, our experience has been that such functions seldom)106 W
7200 66205 MT
(arise in digital logic design applications.  For other classes of problems, particularly in combinatorics, our methods)52 W
7200 67582 MT
(seem practical only under restricted conditions.)SH
8200 70061 MT
(A variety of graphical representations of discrete functions have be presented)
52 W( and studied extensively.  A survey)53 W
7200 71438 MT
(of the literature on the subject)
58 W( by Moret)
57 W( [7])
SH( cites over 100 references, but none of these describe a sufficient set of)57 W
ES
%%Page: 3 3

61200 79200 BS
0 SI
10 /Times-Roman AF
30350 4286 MT
(3)SH
7200 7886 MT
(algorithms to implement a Boolean function manipulation)
29 W( program.  Fortune, Hopcroft, and Schmidt)
30 W( [8])
SH( studied the)30 W
7200 9263 MT
(properties of graphs obeying similar restrictions to ours, showing that two graphs could be)
146 W( tested for functional)145 W
7200 10640 MT
(equivalence in polynomial time and that some functions require much larger)
122 W( graphs under these restrictions than)123 W
7200 12017 MT
(under milder restrictions.  Payne)
270 W( [9])
SH( describes techniques similar to ours for reducing the size of the graph)269 W
7200 13394 MT
(representing a function.  Our algorithms for combining two)
95 W( functions with a binary operation, and for composing)96 W
7200 14771 MT
(two functions are new, however, and these capabilities are central to a symbolic manipulation program.)SH
8200 17250 MT
(The next section of this paper contains a)
169 W( formal presentation of function graphs.  We define the graphs, the)168 W
7200 18627 MT
(functions they represent, and a class of "reduced" graphs.  Then we prove a key property)
4 W( of reduced function graphs:)5 W
7200 20004 MT
(that they form a canonical representation of Boolean functions.  In the following section we depart from this formal)31 W
7200 21381 MT
(presentation to give)
290 W( some examples and to discuss issues regarding to the efficiency of our representation.)291 W
7200 22758 MT
(Following this, we develop a set)
44 W( of algorithms for manipulating Boolean functions using our representation.  These)43 W
7200 24135 MT
(algorithms utilize)
211 W( many of the classical techniques for graph algorithms, and we assume the reader has some)212 W
7200 25512 MT
(familiarity with these techniques.  We then present some experimental)
143 W( investigations into the practicality of our)142 W
7200 26889 MT
(methods. We)
250 W( conclude by suggesting further refinements of our methods.)SH
11 /Times-Bold AF
7200 30506 MT
(1.1. Notation)SH
10 /Times-Roman AF
8200 31883 MT
(We assume the functions to be represented all have the same)113 W
/Times-Italic SF
33965 XM
(n)SH
/Times-Roman SF
34828 XM
(arguments, written)113 W
/Times-Italic SF
42803 XM
(x)SH
8 /Times-Roman AF
43247 32228 MT
(1)SH
10 SS 
43647 31883 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 SS 
46341 32228 MT
(n)SH
10 /Times-Roman AF
46741 31883 MT
(. In)
477 W( expressing a)114 W
7200 33260 MT
(system such as a combinational logic network or a Boolean expression)
19 W( as a Boolean function, we must choose some)18 W
7200 34637 MT
(ordering of the inputs or atomic variables, and this ordering must be the same for all functions to be represented.)SH
8200 37116 MT
(The function resulting when some argument)23 W
/Times-Italic SF
26280 XM
(x)SH
8 SS 
26724 37461 MT
(i)SH
10 /Times-Roman AF
27219 37116 MT
(of function)23 W
/Times-Italic SF
31931 XM
(f)SH
/Times-Roman SF
32632 XM
(is replaced by a constant)23 W
/Times-Italic SF
42829 XM
(b)SH
/Times-Roman SF
43603 XM
(is called a)24 W
/Times-Italic SF
47924 XM
(restriction)SH
/Times-Roman SF
52365 XM
(of)SH
/Times-Italic SF
53472 XM
(f)SH
/Times-Roman SF
(,)SH
7200 38493 MT
(\050sometimes termed a)SH
/Times-Italic SF
15782 XM
(cofactor)SH
/Times-Roman SF
19365 XM
([10]\051 and is denoted)SH
/Times-Italic SF
27641 XM
(f)SH
/Symbol SF
28169 XM
(|)SH
8 /Times-Italic AF
28369 38838 MT
(x)SH
28724 39183 MT
(i)SH
/Times-Roman SF
28946 38838 MT
(=)SH
/Times-Italic SF
(b)SH
10 /Times-Roman AF
29797 38493 MT
(. That)
250 W( is, for any arguments)SH
/Times-Italic SF
41323 XM
(x)SH
8 /Times-Roman AF
41767 38838 MT
(1)SH
10 SS 
42167 38493 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 SS 
44861 38838 MT
(n)SH
10 /Times-Roman AF
45261 38493 MT
(,)SH
/Times-Italic SF
9200 40398 MT
(f)SH
/Symbol SF
9728 XM
(|)SH
8 /Times-Italic AF
9928 40743 MT
(x)SH
10283 41088 MT
(i)SH
/Times-Roman SF
10505 40743 MT
(=)SH
/Times-Italic SF
(b)SH
10 /Times-Roman AF
11356 40398 MT
(\050)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
12133 40743 MT
(1)SH
10 SS 
12533 40398 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 SS 
15227 40743 MT
(n)SH
10 /Times-Roman AF
15627 40398 MT
(\051 =)SH
/Times-Italic SF
17024 XM
(f)SH
/Times-Roman SF
17452 XM
(\050)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
18229 40743 MT
(1)SH
10 SS 
18629 40398 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 SS 
21323 40743 MT
(i)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 SS 
22384 40398 MT
(,)SH
/Times-Italic SF
(b)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(x)SH
8 SS 
23828 40743 MT
(i)SH
/Times-Roman SF
(+1)SH
10 SS 
24901 40398 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 SS 
27595 40743 MT
(n)SH
10 /Times-Roman AF
27995 40398 MT
(\051)SH
7200 41949 MT
(Using this notation, the Shannon expansion [11] of a function around variable)SH
/Times-Italic SF
38613 XM
(x)SH
8 SS 
39057 42294 MT
(i)SH
10 /Times-Roman AF
39529 41949 MT
(is given by)SH
/Times-Italic SF
9200 43850 MT
(f)SH
/Times-Roman SF
10164 XM
(=)SH
/Times-Italic SF
11414 XM
(x)SH
8 SS 
11858 44195 MT
(i)SH
10 /Symbol AF
12080 43850 MT
(\327)SH
/Times-Italic SF
(f)SH
/Symbol SF
12858 XM
(|)SH
8 /Times-Italic AF
13058 44195 MT
(x)SH
13413 44540 MT
(i)SH
/Times-Roman SF
13635 44195 MT
(=1)SH
10 SS 
14736 43850 MT
(+)SH
/Times-Italic SF
15550 XM
(x)SH
/Symbol SF
15550 43469 MT
(-)SH
8 /Times-Italic AF
16099 44195 MT
(i)SH
10 /Symbol AF
16321 43850 MT
(\327)SH
/Times-Italic SF
(f)SH
/Symbol SF
17099 XM
(|)SH
8 /Times-Italic AF
17299 44195 MT
(x)SH
17654 44540 MT
(i)SH
/Times-Roman SF
17876 44195 MT
(=0)SH
10 SS 
52834 43850 MT
(\0501\051)SH
7200 45401 MT
(Similarly, the function resulting when some argument)254 W
/Times-Italic SF
30810 XM
(x)SH
8 SS 
31254 45746 MT
(i)SH
10 /Times-Roman AF
31980 45401 MT
(of function)254 W
/Times-Italic SF
37154 XM
(f)SH
/Times-Roman SF
38086 XM
(is replaced by function)254 W
/Times-Italic SF
48489 XM
(g)SH
/Times-Roman SF
49493 XM
(is called a)254 W
/Times-Italic SF
7200 46778 MT
(composition)SH
/Times-Roman SF
12339 XM
(of)SH
/Times-Italic SF
13422 XM
(f)SH
/Times-Roman SF
13950 XM
(and)SH
/Times-Italic SF
15644 XM
(g)SH
/Times-Roman SF
(, and is denoted)SH
/Times-Italic SF
22671 XM
(f)SH
/Symbol SF
23199 XM
(|)SH
8 /Times-Italic AF
23399 47123 MT
(x)SH
23754 47468 MT
(i)SH
/Times-Roman SF
23976 47123 MT
(=)SH
/Times-Italic SF
(g)SH
10 /Times-Roman AF
24827 46778 MT
(. That)
250 W( is, for any arguments)SH
/Times-Italic SF
36353 XM
(x)SH
8 /Times-Roman AF
36797 47123 MT
(1)SH
10 SS 
37197 46778 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 SS 
39891 47123 MT
(n)SH
10 /Times-Roman AF
40291 46778 MT
(,)SH
/Times-Italic SF
9200 48683 MT
(f)SH
/Symbol SF
9728 XM
(|)SH
8 /Times-Italic AF
9928 49028 MT
(x)SH
10283 49373 MT
(i)SH
/Times-Roman SF
10505 49028 MT
(=)SH
/Times-Italic SF
(g)SH
10 /Times-Roman AF
11356 48683 MT
(\050)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
12133 49028 MT
(1)SH
10 SS 
12533 48683 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 SS 
15227 49028 MT
(n)SH
10 /Times-Roman AF
15627 48683 MT
(\051 =)SH
/Times-Italic SF
17024 XM
(f)SH
/Times-Roman SF
17452 XM
(\050)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
18229 49028 MT
(1)SH
10 SS 
18629 48683 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 SS 
21323 49028 MT
(i)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 SS 
22384 48683 MT
(,)SH
/Times-Italic SF
(g)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
23911 49028 MT
(1)SH
10 SS 
24311 48683 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 SS 
27005 49028 MT
(n)SH
10 /Times-Roman AF
27405 48683 MT
(\051,)SH
/Times-Italic SF
(x)SH
8 SS 
28432 49028 MT
(i)SH
/Times-Roman SF
(+1)SH
10 SS 
29505 48683 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 SS 
32199 49028 MT
(n)SH
10 /Times-Roman AF
32599 48683 MT
(\051)SH
8200 51162 MT
(Some functions may not depend on all arguments.)
34 W( The)319 W
/Times-Italic SF
30901 XM
(dependency set)35 W
/Times-Roman SF
37302 XM
(of a function)35 W
/Times-Italic SF
42767 XM
(f)SH
/Times-Roman SF
(, denoted)35 W
/Times-Italic SF
47031 XM
(I)SH
8 SS 
47364 51507 MT
(f)SH
10 /Times-Roman AF
47736 51162 MT
(, contains those)35 W
7200 52539 MT
(arguments on which the function depends, i.e.)SH
/Times-Italic SF
9200 54444 MT
(I)SH
8 SS 
9533 54789 MT
(f)SH
10 /Times-Roman AF
10591 54444 MT
(= {)436 W
/Times-Italic SF
12571 XM
(i)SH
/Times-Roman SF
13099 XM
(|)SH
/Times-Italic SF
13549 XM
(f)SH
/Symbol SF
14077 XM
(|)SH
8 /Times-Italic AF
14277 54789 MT
(x)SH
14632 55134 MT
(i)SH
/Times-Roman SF
14854 54789 MT
(=0)SH
10 /Symbol AF
16105 54444 MT
(\271)SH
/Times-Italic SF
17054 XM
(f)SH
/Symbol SF
17582 XM
(|)SH
8 /Times-Italic AF
17782 54789 MT
(x)SH
18137 55134 MT
(i)SH
/Times-Roman SF
18359 54789 MT
(=1)SH
10 SS 
19210 54444 MT
(})SH
8200 56923 MT
(The function which for all values of the arguments)
49 W( yields 1 \050respectively 0\051 is denoted)48 W
/Times-Bold SF
43672 XM
(1)SH
/Times-Roman SF
44470 XM
(\050respectively)SH
/Times-Bold SF
49933 XM
(0)SH
/Times-Roman SF
(\051. These)346 W
7200 58300 MT
(two Boolean functions have dependency sets equal to the empty set.)SH
8200 60779 MT
(A Boolean)
145 W( function can also be viewed as denoting some subset of Boolean)146 W
/Times-Italic SF
40676 XM
(n)SH
/Times-Roman SF
(-space, namely those argument)146 W
7200 62156 MT
(values for which the function evaluates to 1.  The)SH
/Times-Italic SF
27224 XM
(satisfying set)SH
/Times-Roman SF
32669 XM
(of a function)SH
/Times-Italic SF
38029 XM
(f)SH
/Times-Roman SF
(, denoted)SH
/Times-Italic SF
42223 XM
(S)SH
8 SS 
42723 62501 MT
(f)SH
10 /Times-Roman AF
43095 62156 MT
(, is defined as:)SH
/Times-Italic SF
11200 63947 MT
(S)SH
8 SS 
11700 64292 MT
(f)SH
10 /Times-Roman AF
12758 63947 MT
(= {)
150 436 WX(\050)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
15415 64292 MT
(1)SH
10 SS 
15815 63947 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 SS 
18509 64292 MT
(n)SH
10 /Times-Roman AF
18909 63947 MT
(\051)
150 MX(|)SH
/Times-Italic SF
19842 XM
(f)SH
/Times-Roman SF
20420 XM
(\050)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
21197 64292 MT
(1)SH
10 SS 
21597 63947 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 SS 
24291 64292 MT
(n)SH
10 /Times-Roman AF
24691 63947 MT
(\051 = 1)
150 0 WX(}.)SH
ES
%%Page: 4 4

61200 79200 BS
0 SI
10 /Times-Roman AF
30350 4286 MT
(4)SH
12 /Times-Bold AF
7200 8004 MT
(2. Representation)SH
10 /Times-Roman AF
8200 9381 MT
(In this section we define our graphical representation of a Boolean function and prove that it is a canonical form.)SH
/Times-Bold SF
10200 11625 MT
(Definition 1:)120 W
/Times-Roman SF
16051 XM
(A function graph is)
120 W( a rooted, directed graph with vertex set)119 W
/Times-Italic SF
41247 XM
(V)SH
/Times-Roman SF
42227 XM
(containing two types of)119 W
9200 12730 MT
(vertices. A)616 W
/Times-Italic SF
14581 XM
(nonterminal)SH
/Times-Roman SF
19903 XM
(vertex)SH
/Times-Italic SF
22835 XM
(v)SH
/Times-Roman SF
23712 XM
(has as attributes an argument index)183 W
/Times-Italic SF
39141 XM
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051)SH
/Symbol SF
42717 XM
(\316)SH
/Times-Roman SF
43730 XM
({1, . . . ,)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(}, and two)183 W
9200 13835 MT
(children)SH
/Times-Italic SF
12727 XM
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051,)SH
/Times-Italic SF
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051)SH
/Symbol SF
18720 XM
(\316)SH
/Times-Italic SF
19733 XM
(V)SH
/Times-Roman SF
(. A)250 W
/Times-Italic SF
22066 XM
(terminal)SH
/Times-Roman SF
25705 XM
(vertex)SH
/Times-Italic SF
28454 XM
(v)SH
/Times-Roman SF
29148 XM
(has as attribute a value)SH
/Times-Italic SF
38507 XM
(value)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051)SH
/Symbol SF
41933 XM
(\316)SH
/Times-Roman SF
42796 XM
({0,1}.)SH
10200 16042 MT
(Furthermore, for)
370 W( any nonterminal vertex)369 W
/Times-Italic SF
28487 XM
(v)SH
/Times-Roman SF
(, if)369 W
/Times-Italic SF
31030 XM
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 is also nonterminal, then we must have)369 W
/Times-Italic SF
9200 17147 MT
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 <)SH
/Times-Italic SF
13540 XM
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051\051. Similarly,)
2326 W( if)1038 W
/Times-Italic SF
28913 XM
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 is nonterminal, then we must have)1038 W
/Times-Italic SF
9200 18252 MT
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 <)SH
/Times-Italic SF
13540 XM
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051\051.)SH
8200 20731 MT
(Due to the ordering restriction in our)
150 W( definition, function graphs form a proper subset of conventional binary)149 W
7200 22108 MT
(decision diagrams.  Note that)
228 W( this restriction also implies that a function graph must be acyclic, because the)229 W
7200 23485 MT
(nonterminal vertices along any path must have strictly increasing index values.)SH
8200 25964 MT
(We define the correspondence between function graphs and Boolean functions as follows.)SH
/Times-Bold SF
10200 28208 MT
(Definition 2:)SH
/Times-Roman SF
15811 XM
(A function graph)SH
/Times-Italic SF
22893 XM
(G)SH
/Times-Roman SF
23865 XM
(having root vertex)SH
/Times-Italic SF
31447 XM
(v)SH
/Times-Roman SF
32141 XM
(denotes a function)SH
/Times-Italic SF
39723 XM
(f)SH
8 SS 
40001 28553 MT
(v)SH
10 /Times-Roman AF
40606 28208 MT
(defined recursively as:)SH
11200 29547 MT
(1.)SH
12200 XM
(If)SH
/Times-Italic SF
13116 XM
(v)SH
/Times-Roman SF
13810 XM
(is a terminal vertex:)SH
14256 30886 MT
(a.)SH
15200 XM
(If)SH
/Times-Italic SF
16116 XM
(value)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051=1, then)SH
/Times-Italic SF
22928 XM
(f)SH
8 SS 
23206 31231 MT
(v)SH
10 /Times-Roman AF
23561 30886 MT
(=)SH
/Times-Bold SF
(1)SH
/Times-Roman SF
14200 32644 MT
(b.)SH
15200 XM
(If)SH
/Times-Italic SF
16116 XM
(value)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051=0, then)SH
/Times-Italic SF
22928 XM
(f)SH
8 SS 
23206 32989 MT
(v)SH
10 /Times-Roman AF
23561 32644 MT
(=)SH
/Times-Bold SF
(0)SH
/Times-Roman SF
11200 34402 MT
(2.)SH
12200 XM
(If)SH
/Times-Italic SF
13116 XM
(v)SH
/Times-Roman SF
13810 XM
(is a nonterminal vertex with)SH
/Times-Italic SF
25281 XM
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051=)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(, then)SH
/Times-Italic SF
31871 XM
(f)SH
8 SS 
32149 34747 MT
(v)SH
10 /Times-Roman AF
32754 34402 MT
(is the function)SH
/Times-Italic SF
14200 36574 MT
(f)SH
8 SS 
14478 36919 MT
(v)SH
10 /Times-Roman AF
14833 36574 MT
(\050)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
15610 36919 MT
(1)SH
10 SS 
16010 36574 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 SS 
18704 36919 MT
(n)SH
10 /Times-Roman AF
19104 36574 MT
(\051 =)436 W
/Times-Italic SF
21373 XM
(x)SH
/Symbol SF
21373 36193 MT
(-)SH
8 /Times-Italic AF
21922 36919 MT
(i)SH
10 /Symbol AF
22144 36574 MT
(\327)SH
/Times-Italic SF
(f)SH
8 SS 
22672 36919 MT
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051)SH
10 SS 
24715 36574 MT
(\050)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
25492 36919 MT
(1)SH
10 SS 
25892 36574 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 SS 
28586 36919 MT
(n)SH
10 /Times-Roman AF
28986 36574 MT
(\051 +)SH
/Times-Italic SF
30383 XM
(x)SH
8 SS 
30827 36919 MT
(i)SH
10 /Symbol AF
31049 36574 MT
(\327)SH
/Times-Italic SF
(f)SH
8 SS 
31577 36919 MT
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051)SH
10 SS 
33886 36574 MT
(\050)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
34663 36919 MT
(1)SH
10 SS 
35063 36574 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 SS 
37757 36919 MT
(n)SH
10 /Times-Roman AF
38157 36574 MT
(\051.)SH
8200 39053 MT
(In other words, we can view a set of argument values)10 W
/Times-Italic SF
29860 XM
(x)SH
8 /Times-Roman AF
30304 39398 MT
(1)SH
10 SS 
30704 39053 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 SS 
33398 39398 MT
(n)SH
10 /Times-Roman AF
34058 39053 MT
(as describing a path)
10 W( in the graph starting from the)9 W
7200 40430 MT
(root, where if some vertex)41 W
/Times-Italic SF
18180 XM
(v)SH
/Times-Roman SF
18915 XM
(along the path has)41 W
/Times-Italic SF
26578 XM
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 =)SH
/Times-Italic SF
30918 XM
(i)SH
/Times-Roman SF
(, then the path continues to the low child if)41 W
/Times-Italic SF
48966 XM
(x)SH
8 SS 
49410 40775 MT
(i)SH
10 /Times-Roman AF
49882 40430 MT
(= 0)
SH( and to)41 W
7200 41807 MT
(the high child if)43 W
/Times-Italic SF
13983 XM
(x)SH
8 SS 
14427 42152 MT
(i)SH
10 /Times-Roman AF
14899 41807 MT
(= 1.)
SH( The)
336 W( value of the function for these arguments equals the)
43 W( value of the terminal vertex at the)42 W
7200 43184 MT
(end of the path.  Note that the path defined by)
37 W( a set of argument values is unique.  Furthermore, every vertex in the)38 W
7200 44561 MT
(graph is contained in at least one path, i.e. no part of the graph is "unreachable.")SH
8200 47040 MT
(Two function graphs are considered)
94 W( isomorphic if they match in both their structure and their attributes.  More)93 W
7200 48417 MT
(precisely:)SH
/Times-Bold SF
10200 50661 MT
(Definition 3:)26 W
/Times-Roman SF
15863 XM
(Function graphs)26 W
/Times-Italic SF
22637 XM
(G)SH
/Times-Roman SF
23635 XM
(and)SH
/Times-Italic SF
25355 XM
(G)SH
/Symbol SF
26227 XM
(\242)SH
/Times-Roman SF
26750 XM
(are)SH
/Times-Italic SF
28247 XM
(isomorphic)SH
/Times-Roman SF
33023 XM
(if there exists a one-to-one function)26 W
/Symbol SF
47677 XM
(s)SH
/Times-Roman SF
48557 XM
(from the)27 W
9200 51766 MT
(vertices of)91 W
/Times-Italic SF
13824 XM
(G)SH
/Times-Roman SF
14886 XM
(onto the vertices of)90 W
/Times-Italic SF
23189 XM
(G)SH
/Symbol SF
24061 XM
(\242)SH
/Times-Roman SF
24648 XM
(such that for any vertex)90 W
/Times-Italic SF
34790 XM
(v)SH
/Times-Roman SF
35574 XM
(if)SH
/Symbol SF
36525 XM
(s)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051=)SH
/Times-Italic SF
(v)SH
/Symbol SF
39396 XM
(\242)SH
/Times-Roman SF
(, then either both)90 W
/Times-Italic SF
47030 XM
(v)SH
/Times-Roman SF
47814 XM
(and)SH
/Times-Italic SF
49598 XM
(v)SH
/Symbol SF
50192 XM
(\242)SH
/Times-Roman SF
50779 XM
(are)SH
9200 52871 MT
(terminal vertices with)586 W
/Times-Italic SF
19929 XM
(value)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 =)SH
/Times-Italic SF
24269 XM
(value)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Symbol SF
27362 XM
(\242)SH
/Times-Roman SF
(\051, or both)586 W
/Times-Italic SF
33311 XM
(v)SH
/Times-Roman SF
34591 XM
(and)SH
/Times-Italic SF
36871 XM
(v)SH
/Symbol SF
37465 XM
(\242)SH
/Times-Roman SF
38548 XM
(are nonterminal)
586 W( vertices with)587 W
/Times-Italic SF
9200 53976 MT
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 =)SH
/Times-Italic SF
13540 XM
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Symbol SF
16633 XM
(\242)SH
/Times-Roman SF
(\051,)SH
/Symbol SF
17713 XM
(s)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051\051 =)SH
/Times-Italic SF
22601 XM
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Symbol SF
24973 XM
(\242)SH
/Times-Roman SF
(\051, and)SH
/Symbol SF
27747 XM
(s)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051\051=)SH
/Times-Italic SF
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Symbol SF
35173 XM
(\242)SH
/Times-Roman SF
(\051.)SH
8200 56455 MT
(Note that since a function graph contains)
10 W( only 1 root and the children of any nonterminal vertex are distinguished,)9 W
7200 57832 MT
(the isomorphic mapping)27 W
/Symbol SF
17253 XM
(s)SH
/Times-Roman SF
18133 XM
(between graphs)27 W
/Times-Italic SF
24685 XM
(G)SH
/Times-Roman SF
25684 XM
(and)SH
/Times-Italic SF
27405 XM
(G)SH
/Symbol SF
28277 XM
(\242)SH
/Times-Roman SF
28801 XM
(is quite constrained:  the root in)27 W
/Times-Italic SF
41907 XM
(G)SH
/Times-Roman SF
42907 XM
(must map to the root in)28 W
/Times-Italic SF
52631 XM
(G)SH
/Symbol SF
53503 XM
(\242)SH
/Times-Roman SF
(,)SH
7200 59209 MT
(the root's low child in)9 W
/Times-Italic SF
16328 XM
(G)SH
/Times-Roman SF
17309 XM
(must map to the root's low child)
9 W( in)8 W
/Times-Italic SF
31657 XM
(G)SH
/Symbol SF
32529 XM
(\242)SH
/Times-Roman SF
(, and so on all the way down to the terminal vertices.)8 W
7200 60586 MT
(Hence, testing 2 function graphs for isomorphism is quite simple.)SH
/Times-Bold SF
10200 62830 MT
(Definition 4:)55 W
/Times-Roman SF
15921 XM
(For any vertex)55 W
/Times-Italic SF
22168 XM
(v)SH
/Times-Roman SF
22917 XM
(in a function)
55 W( graph)56 W
/Times-Italic SF
30971 XM
(G)SH
/Times-Roman SF
(, the)56 W
/Times-Italic SF
33777 XM
(subgraph rooted by v)56 W
/Times-Roman SF
42778 XM
(is defined as the graph)56 W
9200 63935 MT
(consisting of)SH
/Times-Italic SF
14589 XM
(v)SH
/Times-Roman SF
15283 XM
(and all of its descendants.)SH
/Times-Bold SF
10200 66179 MT
(Lemma 1:)22 W
/Times-Roman SF
14854 XM
(If)SH
/Times-Italic SF
15792 XM
(G)SH
/Times-Roman SF
16786 XM
(is isomorphic to)22 W
/Times-Italic SF
23547 XM
(G)SH
/Symbol SF
24419 XM
(\242)SH
/Times-Roman SF
24938 XM
(by mapping)22 W
/Symbol SF
29982 XM
(s)SH
/Times-Roman SF
(, then)
22 W( for any vertex)21 W
/Times-Italic SF
39022 XM
(v)SH
/Times-Roman SF
39737 XM
(in)SH
/Times-Italic SF
40786 XM
(G)SH
/Times-Roman SF
(, the subgraph rooted by)21 W
/Times-Italic SF
51556 XM
(v)SH
/Times-Roman SF
9200 67284 MT
(is isomorphic to the subgraph rooted by)SH
/Symbol SF
25338 XM
(s)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051.)SH
8200 69763 MT
(The proof of this)
262 W( lemma is straightforward, since the restriction of)263 W
/Symbol SF
37808 XM
(s)SH
/Times-Roman SF
38924 XM
(to)SH
/Times-Italic SF
40215 XM
(v)SH
/Times-Roman SF
41172 XM
(and its descendants forms the)263 W
7200 71140 MT
(isomorphic mapping.)SH
ES
%%Page: 5 5

61200 79200 BS
0 SI
10 /Times-Roman AF
30350 4286 MT
(5)SH
8200 7886 MT
(A function graph)
34 W( can be reduced in size without changing the denoted function by eliminating redundant vertices)33 W
7200 9263 MT
(and duplicate subgraphs.  The resulting graph will be our primary data structure for representing a Boolean function.)SH
/Times-Bold SF
10200 11507 MT
(Definition 5:)58 W
/Times-Roman SF
15927 XM
(A function graph)58 W
/Times-Italic SF
23183 XM
(G)SH
/Times-Roman SF
24213 XM
(is)SH
/Times-Italic SF
25188 XM
(reduced)SH
/Times-Roman SF
28717 XM
(if it contains no vertex)58 W
/Times-Italic SF
38256 XM
(v)SH
/Times-Roman SF
39008 XM
(with)SH
/Times-Italic SF
41094 XM
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051=)SH
/Times-Italic SF
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051, nor does it)59 W
9200 12612 MT
(contain distinct vertices)SH
/Times-Italic SF
18949 XM
(v)SH
/Times-Roman SF
19643 XM
(and)SH
/Times-Italic SF
21337 XM
(v)SH
/Symbol SF
21931 XM
(\242)SH
/Times-Roman SF
22428 XM
(such that the subgraphs rooted by)SH
/Times-Italic SF
36093 XM
(v)SH
/Times-Roman SF
36787 XM
(and)SH
/Times-Italic SF
38481 XM
(v)SH
/Symbol SF
39075 XM
(\242)SH
/Times-Roman SF
39572 XM
(are isomorphic.)SH
8200 15091 MT
(The following lemma follows directly from the definition of reduced function graphs.)SH
/Times-Bold SF
10200 17335 MT
(Lemma 2:)52 W
/Times-Roman SF
14914 XM
(For every vertex)52 W
/Times-Italic SF
21929 XM
(v)SH
/Times-Roman SF
22675 XM
(in a reduced)
52 W( function graph, the subgraph rooted by)51 W
/Times-Italic SF
44076 XM
(v)SH
/Times-Roman SF
44821 XM
(is itself a reduced)51 W
9200 18440 MT
(function graph.)SH
8200 20919 MT
(The following theorem proves a key property of reduced)
156 W( function graphs, namely that they form a canonical)157 W
7200 22296 MT
(representation for Boolean functions, i.e. every function is represented by a unique reduced)
162 W( function graph.  In)161 W
7200 23673 MT
(contrast to)
40 W( other canonical representations of Boolean functions, such as canonical sum-of-products form, however,)41 W
7200 25050 MT
(many "interesting" Boolean functions are represented by function graphs of size polynomial in the number)
205 W( of)204 W
7200 26427 MT
(arguments.)SH
/Times-Bold SF
10200 28671 MT
(Theorem 1:)48 W
/Times-Roman SF
15517 XM
(For any Boolean function)48 W
/Times-Italic SF
26208 XM
(f)SH
/Times-Roman SF
(, there is a unique \050up to isomorphism\051 reduced function graph)49 W
9200 29776 MT
(denoting)SH
/Times-Italic SF
12950 XM
(f)SH
/Times-Roman SF
13478 XM
(and any other function graph denoting)SH
/Times-Italic SF
29031 XM
(f)SH
/Times-Roman SF
29559 XM
(contains more vertices.)SH
/Times-Italic SF
8200 32255 MT
(Proof)SH
/Times-Roman SF
10749 XM
(: The proof of)
21 W( this theorem is conceptually straightforward.  However, we must take care not to presuppose)20 W
7200 33632 MT
(anything about the possible representations of a function.  The proof proceeds by induction on the size of)SH
/Times-Italic SF
49499 XM
(I)SH
8 SS 
49832 33977 MT
(f)SH
10 /Times-Roman AF
50204 33632 MT
(.)SH
8200 36111 MT
(For)SH
/Symbol SF
9904 XM
(|)SH
/Times-Italic SF
(I)SH
8 SS 
10437 36456 MT
(f)SH
10 /Symbol AF
10809 36111 MT
(|)SH
/Times-Roman SF
11259 XM
(= 0,)SH
/Times-Italic SF
13138 XM
(f)SH
/Times-Roman SF
13731 XM
(must be one of the two constant functions)65 W
/Times-Bold SF
31194 XM
(0)SH
/Times-Roman SF
32009 XM
(or)SH
/Times-Bold SF
33157 XM
(1)SH
/Times-Roman SF
(. Let)380 W
/Times-Italic SF
36185 XM
(G)SH
/Times-Roman SF
37222 XM
(be a reduced function)
65 W( graph denoting the)66 W
7200 37488 MT
(function)SH
/Times-Bold SF
10799 XM
(0)SH
/Times-Roman SF
(. This)
282 W( graph can contain no terminal vertices having value 1, or else there would be some set of argument)16 W
7200 38865 MT
(values for which the function evaluates to 1, since all vertices in a)
168 W( function graph are reachable by some path)169 W
7200 40242 MT
(corresponding to a set of argument values.  Now suppose)10 W
/Times-Italic SF
30435 XM
(G)SH
/Times-Roman SF
31417 XM
(contains at least one nonterminal vertex.)
10 W( Then)
269 W( since the)9 W
7200 41619 MT
(graph is acyclic, there must be a)
99 W( nonterminal vertex)100 W
/Times-Italic SF
29034 XM
(v)SH
/Times-Roman SF
29828 XM
(where both)100 W
/Times-Italic SF
34749 XM
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 and)100 W
/Times-Italic SF
39448 XM
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 are terminal vertices, and it)100 W
7200 42996 MT
(follows that)124 W
/Times-Italic SF
12448 XM
(value)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051\051 =)SH
/Times-Italic SF
18899 XM
(value)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051\051 = 0.)
SH( Either)
498 W( these 2 vertices are distinct, in which case they constitute)124 W
7200 44373 MT
(isomorphic subgraphs,)
53 W( or they are identical, in which case)54 W
/Times-Italic SF
31153 XM
(v)SH
/Times-Roman SF
31901 XM
(has)SH
/Times-Italic SF
33538 XM
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 =)SH
/Times-Italic SF
37157 XM
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051. In)
358 W( either case,)54 W
/Times-Italic SF
46896 XM
(G)SH
/Times-Roman SF
47922 XM
(would not be a)54 W
7200 45750 MT
(reduced function graph.  Hence, the)
210 W( only reduced function graph denoting the function)209 W
/Times-Bold SF
44831 XM
(0)SH
/Times-Roman SF
45790 XM
(consists of a single)209 W
7200 47127 MT
(terminal vertex with value 0.  Similarly, the only reduced function graph denoting)103 W
/Times-Bold SF
41564 XM
(1)SH
/Times-Roman SF
42418 XM
(consists of a single terminal)104 W
7200 48504 MT
(vertex with value 1.)SH
8200 50983 MT
(Next suppose that the statement)
91 W( of the theorem holds for any function)90 W
/Times-Italic SF
37447 XM
(g)SH
/Times-Roman SF
38287 XM
(having)SH
/Symbol SF
41349 XM
(|)SH
/Times-Italic SF
(I)SH
8 SS 
41882 51328 MT
(g)SH
10 /Symbol AF
42432 50983 MT
(|)SH
/Times-Roman SF
42882 XM
(<)SH
/Times-Italic SF
43696 XM
(k)SH
/Times-Roman SF
(, and that)90 W
/Symbol SF
48354 XM
(|)SH
/Times-Italic SF
(I)SH
8 SS 
48887 51328 MT
(f)SH
10 /Symbol AF
49259 50983 MT
(|)SH
/Times-Roman SF
49709 XM
(=)SH
/Times-Italic SF
50523 XM
(k)SH
/Times-Roman SF
(, where)90 W
/Times-Italic SF
7200 52360 MT
(k)SH
/Times-Roman SF
7894 XM
(> 0.)
SH( Let)584 W
/Times-Italic SF
12042 XM
(i)SH
/Times-Roman SF
12737 XM
(be the minimum value in)167 W
/Times-Italic SF
23822 XM
(I)SH
8 SS 
24155 52705 MT
(f)SH
10 /Times-Roman AF
24527 52360 MT
(, i.e. the least argument on which the function)167 W
/Times-Italic SF
44583 XM
(f)SH
/Times-Roman SF
45278 XM
(depends. Define)
584 W( the)168 W
7200 53737 MT
(functions)SH
/Times-Italic SF
11284 XM
(f)SH
8 /Times-Roman AF
11562 54082 MT
(0)SH
10 SS 
12324 53737 MT
(and)SH
/Times-Italic SF
14130 XM
(f)SH
8 /Times-Roman AF
14408 54082 MT
(1)SH
10 SS 
15170 53737 MT
(as)SH
/Times-Italic SF
16365 XM
(f)SH
/Symbol SF
16893 XM
(|)SH
8 /Times-Italic AF
17093 54082 MT
(x)SH
17448 54427 MT
(i)SH
/Times-Roman SF
17670 54082 MT
(=0)SH
10 SS 
18883 53737 MT
(and)SH
/Times-Italic SF
20689 XM
(f)SH
/Symbol SF
21217 XM
(|)SH
8 /Times-Italic AF
21417 54082 MT
(x)SH
21772 54427 MT
(i)SH
/Times-Roman SF
21994 54082 MT
(=1)SH
10 SS 
22845 53737 MT
(, respectively.)
112 W( Both)472 W
/Times-Italic SF
31567 XM
(f)SH
8 /Times-Roman AF
31845 54082 MT
(0)SH
10 SS 
32606 53737 MT
(and)SH
/Times-Italic SF
34411 XM
(f)SH
8 /Times-Roman AF
34689 54082 MT
(1)SH
10 SS 
35450 53737 MT
(have dependency sets of size less than)111 W
/Times-Italic SF
51751 XM
(k)SH
/Times-Roman SF
52556 XM
(and)SH
7200 55288 MT
(hence are represented by unique reduced function graphs.  Let)42 W
/Times-Italic SF
32751 XM
(G)SH
/Times-Roman SF
33765 XM
(and)SH
/Times-Italic SF
35501 XM
(G)SH
/Symbol SF
36373 XM
(\242)SH
/Times-Roman SF
36912 XM
(be reduced function)
42 W( graphs for)43 W
/Times-Italic SF
49649 XM
(f)SH
/Times-Roman SF
(. We)
336 W( will)43 W
7200 56665 MT
(show that these two graphs are isomorphic, consisting of a root vertex with index)14 W
/Times-Italic SF
40142 XM
(i)SH
/Times-Roman SF
40684 XM
(and with low)
14 W( and high subgraphs)13 W
7200 58042 MT
(denoting the functions)426 W
/Times-Italic SF
17672 XM
(f)SH
8 /Times-Roman AF
17950 58387 MT
(0)SH
10 SS 
19026 58042 MT
(and)SH
/Times-Italic SF
21146 XM
(f)SH
8 /Times-Roman AF
21424 58387 MT
(1)SH
10 SS 
21824 58042 MT
(. Let)1104 W
/Times-Italic SF
25438 XM
(v)SH
/Times-Roman SF
26559 XM
(and)SH
/Times-Italic SF
28680 XM
(v)SH
/Symbol SF
29274 XM
(\242)SH
/Times-Roman SF
30198 XM
(be nonterminal vertices in the two graphs such that)427 W
/Times-Italic SF
7200 59419 MT
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 =)SH
/Times-Italic SF
11540 XM
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Symbol SF
14633 XM
(\242)SH
/Times-Roman SF
(\051 =)SH
/Times-Italic SF
16277 XM
(i)SH
/Times-Roman SF
(. The)
426 W( subgraphs rooted)
88 W( by)87 W
/Times-Italic SF
27996 XM
(v)SH
/Times-Roman SF
28777 XM
(and)SH
/Times-Italic SF
30558 XM
(v)SH
/Symbol SF
31152 XM
(\242)SH
/Times-Roman SF
31736 XM
(both denote)87 W
/Times-Italic SF
36854 XM
(f)SH
/Times-Roman SF
(, since)87 W
/Times-Italic SF
40111 XM
(f)SH
/Times-Roman SF
40876 XM
(is independent of the arguments)87 W
/Times-Italic SF
7200 60796 MT
(x)SH
8 /Times-Roman AF
7644 61141 MT
(1)SH
10 SS 
8044 60796 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 SS 
10738 61141 MT
(i)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 SS 
11799 60796 MT
(. The)
722 W( subgraphs rooted by vertices)236 W
/Times-Italic SF
27726 XM
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 and)237 W
/Times-Italic SF
32699 XM
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Symbol SF
35071 XM
(\242)SH
/Times-Roman SF
(\051 both denote the function)237 W
/Times-Italic SF
47085 XM
(f)SH
8 /Times-Roman AF
47363 61141 MT
(0)SH
10 SS 
48250 60796 MT
(and hence by)237 W
7200 62173 MT
(induction must be isomorphic according to some mapping)78 W
/Symbol SF
31323 XM
(s)SH
8 /Times-Roman AF
31926 62518 MT
(0)SH
10 SS 
32326 62173 MT
(. Similarly,)
406 W( the subgraphs rooted)
78 W( by vertices)77 W
/Times-Italic SF
51112 XM
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051)SH
7200 63550 MT
(and)SH
/Times-Italic SF
8894 XM
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Symbol SF
11599 XM
(\242)SH
/Times-Roman SF
(\051 both denote the function)SH
/Times-Italic SF
22428 XM
(f)SH
8 /Times-Roman AF
22706 63895 MT
(1)SH
10 SS 
23356 63550 MT
(and hence must be isomorphic according to some mapping)SH
/Symbol SF
47103 XM
(s)SH
8 /Times-Roman AF
47706 63895 MT
(1)SH
10 SS 
48106 63550 MT
(.)SH
8200 66029 MT
(We claim that the subgraphs rooted by)SH
/Times-Italic SF
23892 XM
(v)SH
/Times-Roman SF
24586 XM
(and)SH
/Times-Italic SF
26280 XM
(v)SH
/Symbol SF
26874 XM
(\242)SH
/Times-Roman SF
27371 XM
(must be isomorphic according to the mapping)SH
/Symbol SF
45953 XM
(s)SH
/Times-Roman SF
46806 XM
(defined as)SH
/Times-Italic SF
25400 67820 MT
(v)SH
/Symbol SF
25994 XM
(\242)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
28640 XM
(u)SH
/Times-Roman SF
29390 XM
(=)SH
/Times-Italic SF
30204 XM
(v)SH
/Times-Roman SF
(,)SH
/Symbol SF
20000 68925 MT
(s)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(u)SH
/Times-Roman SF
(\051 =)436 W
/Symbol SF
25400 XM
(s)SH
8 /Times-Roman AF
26003 69270 MT
(0)SH
10 SS 
26403 68925 MT
(\050)SH
/Times-Italic SF
(u)SH
/Times-Roman SF
(\051)SH
/Times-Italic SF
28640 XM
(u)SH
/Times-Roman SF
29540 XM
(in subgraph rooted by)SH
/Times-Italic SF
38439 XM
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051)SH
/Symbol SF
25400 70131 MT
(s)SH
8 /Times-Roman AF
26003 70476 MT
(1)SH
10 SS 
26403 70131 MT
(\050)SH
/Times-Italic SF
(u)SH
/Times-Roman SF
(\051,)SH
/Times-Italic SF
28640 XM
(u)SH
/Times-Roman SF
29540 XM
(in subgraph rooted by)SH
/Times-Italic SF
38439 XM
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051)SH
7200 71651 MT
(To prove this, we must show that the function)20 W
/Symbol SF
25990 XM
(s)SH
/Times-Roman SF
26863 XM
(is well-defined, and that it is an isomorphic mapping.)
20 W( Observe)
292 W( that)21 W
ES
%%Page: 6 6

61200 79200 BS
0 SI
10 /Times-Roman AF
30350 4286 MT
(6)SH
7200 7886 MT
(if vertex)3 W
/Times-Italic SF
10816 XM
(u)SH
/Times-Roman SF
11569 XM
(is contained in both the subgraph rooted by)3 W
/Times-Italic SF
29147 XM
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 and the subgraph rooted by)3 W
/Times-Italic SF
43107 XM
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051, then the subgraphs)2 W
7200 9263 MT
(rooted by)20 W
/Symbol SF
11295 XM
(s)SH
8 /Times-Roman AF
11898 9608 MT
(0)SH
10 SS 
12298 9263 MT
(\050)SH
/Times-Italic SF
(u)SH
/Times-Roman SF
(\051 and)20 W
/Symbol SF
15448 XM
(s)SH
8 /Times-Roman AF
16051 9608 MT
(1)SH
10 SS 
16451 9263 MT
(\050)SH
/Times-Italic SF
(u)SH
/Times-Roman SF
(\051 must be isomorphic to the one rooted by)20 W
/Times-Italic SF
34435 XM
(u)SH
/Times-Roman SF
35205 XM
(and hence to each other.  Since)20 W
/Times-Italic SF
48008 XM
(G)SH
/Symbol SF
48880 XM
(\242)SH
/Times-Roman SF
49397 XM
(contains no)20 W
7200 10640 MT
(isomorphic subgraphs, this can only hold if)7 W
/Symbol SF
24804 XM
(s)SH
8 /Times-Roman AF
25407 10985 MT
(0)SH
10 SS 
25807 10640 MT
(\050)SH
/Times-Italic SF
(u)SH
/Times-Roman SF
(\051 =)SH
/Symbol SF
28037 XM
(s)SH
8 /Times-Roman AF
28640 10985 MT
(1)SH
10 SS 
29040 10640 MT
(\050)SH
/Times-Italic SF
(u)SH
/Times-Roman SF
(\051, and hence there is no conflict in the above definition of)7 W
/Symbol SF
53147 XM
(s)SH
/Times-Roman SF
(.)SH
7200 12017 MT
(By similar reasoning, we can see that)74 W
/Symbol SF
22882 XM
(s)SH
/Times-Roman SF
23809 XM
(must be one-to-one---if there)
74 W( were distinct vertices)75 W
/Times-Italic SF
44909 XM
(u)SH
8 /Times-Roman AF
45409 12362 MT
(1)SH
10 SS 
46134 12017 MT
(and)SH
/Times-Italic SF
47903 XM
(u)SH
8 /Times-Roman AF
48403 12362 MT
(2)SH
10 SS 
49128 12017 MT
(in)SH
/Times-Italic SF
50231 XM
(G)SH
/Times-Roman SF
51278 XM
(having)SH
/Symbol SF
7200 13394 MT
(s)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(u)SH
8 /Times-Roman AF
8636 13739 MT
(1)SH
10 SS 
9036 13394 MT
(\051)
150 MX(=)SH
/Symbol SF
10233 XM
(s)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(u)SH
8 /Times-Roman AF
11669 13739 MT
(2)SH
10 SS 
12069 13394 MT
(\051, then)
33 W( the subgraphs rooted by these two vertices would be isomorphic to the subgraph rooted by)32 W
/Symbol SF
51831 XM
(s)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(u)SH
8 /Times-Roman AF
53267 13739 MT
(1)SH
10 SS 
53667 13394 MT
(\051)SH
7200 14771 MT
(and hence to each other implying that)57 W
/Times-Italic SF
22902 XM
(G)SH
/Times-Roman SF
23931 XM
(is not reduced.  Finally, the properties that)57 W
/Symbol SF
41552 XM
(s)SH
/Times-Roman SF
42462 XM
(is onto and)
57 W( is an isomorphic)58 W
7200 16148 MT
(mapping follows directly from its definition and from the fact that both)SH
/Symbol SF
35920 XM
(s)SH
8 /Times-Roman AF
36523 16493 MT
(0)SH
10 SS 
37173 16148 MT
(and)SH
/Symbol SF
38867 XM
(s)SH
8 /Times-Roman AF
39470 16493 MT
(1)SH
10 SS 
40120 16148 MT
(obey these properties.)SH
8200 18627 MT
(By similar reasoning, we can see that graph)8 W
/Times-Italic SF
25955 XM
(G)SH
/Times-Roman SF
26935 XM
(contains exactly one vertex with)7 W
/Times-Italic SF
40162 XM
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 =)SH
/Times-Italic SF
44502 XM
(i)SH
/Times-Roman SF
(, because if some other)7 W
7200 20004 MT
(such vertex existed, the subgraphs rooted by it and by)53 W
/Times-Italic SF
29477 XM
(v)SH
/Times-Roman SF
30224 XM
(would be isomorphic.  We claim in fact that)53 W
/Times-Italic SF
48533 XM
(v)SH
/Times-Roman SF
49281 XM
(must be the)54 W
7200 21381 MT
(root. Suppose)
540 W( instead that there is some vertex)145 W
/Times-Italic SF
27614 XM
(u)SH
/Times-Roman SF
28509 XM
(with)SH
/Times-Italic SF
30682 XM
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(u)SH
/Times-Roman SF
(\051 =)SH
/Times-Italic SF
35078 XM
(j)SH
/Times-Roman SF
35606 XM
(<)SH
/Times-Italic SF
36420 XM
(i)SH
/Times-Roman SF
(, but such that there is no other vertex)145 W
/Times-Italic SF
53333 XM
(w)SH
/Times-Roman SF
7200 22758 MT
(having)SH
/Times-Italic SF
10306 XM
(j)SH
/Times-Roman SF
10834 XM
(<)SH
/Times-Italic SF
11648 XM
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(w)SH
/Times-Roman SF
(\051 <)SH
/Times-Italic SF
16211 XM
(i)SH
/Times-Roman SF
(. The function)135 W
/Times-Italic SF
22782 XM
(f)SH
/Times-Roman SF
23445 XM
(does not depend on the)135 W
/Times-Italic SF
33591 XM
(x)SH
8 SS 
34035 23103 MT
(j)SH
10 /Times-Roman AF
34642 22758 MT
(and hence the subgraphs rooted by)135 W
/Times-Italic SF
49560 XM
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(u)SH
/Times-Roman SF
(\051 and)135 W
/Times-Italic SF
7200 24135 MT
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(u)SH
/Times-Roman SF
(\051 both denote)42 W
/Times-Italic SF
15464 XM
(f)SH
/Times-Roman SF
(, but this implies that)42 W
/Times-Italic SF
24620 XM
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(u)SH
/Times-Roman SF
(\051 =)SH
/Times-Italic SF
28295 XM
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(u)SH
/Times-Roman SF
(\051 =)SH
/Times-Italic SF
32303 XM
(v)SH
/Times-Roman SF
(, i.e.)42 W
/Times-Italic SF
35095 XM
(G)SH
/Times-Roman SF
36109 XM
(is not)
42 W( reduced.  Similarly, vertex)41 W
/Times-Italic SF
49688 XM
(v)SH
/Symbol SF
50282 XM
(\242)SH
/Times-Roman SF
50820 XM
(must be)41 W
7200 25512 MT
(the root of)SH
/Times-Italic SF
11616 XM
(G)SH
/Symbol SF
12488 XM
(\242)SH
/Times-Roman SF
(, and hence the two graphs are isomorphic.)SH
8200 27991 MT
(Finally, we can prove that of all the graphs denoting a)
23 W( particular function, only the reduced graph has a minimum)24 W
7200 29368 MT
(number of vertices.  Suppose)149 W
/Times-Italic SF
19832 XM
(G)SH
/Times-Roman SF
20953 XM
(is not)
149 W( a reduced graph.  Then we can form a smaller graph denoting the same)148 W
7200 30745 MT
(function as follows.  If)94 W
/Times-Italic SF
17002 XM
(G)SH
/Times-Roman SF
18069 XM
(contains a vertex)95 W
/Times-Italic SF
25380 XM
(v)SH
/Times-Roman SF
26169 XM
(with)SH
/Times-Italic SF
28292 XM
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 =)SH
/Times-Italic SF
31911 XM
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051, then eliminate this vertex, and for any vertex)95 W
7200 32122 MT
(having)SH
/Times-Italic SF
10216 XM
(v)SH
/Times-Roman SF
10954 XM
(as child, make)44 W
/Times-Italic SF
17085 XM
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 be the child instead.  If)44 W
/Times-Italic SF
29613 XM
(G)SH
/Times-Roman SF
30629 XM
(contains distinct vertices)44 W
/Times-Italic SF
40899 XM
(v)SH
/Times-Roman SF
41637 XM
(and)SH
/Times-Italic SF
43375 XM
(v)SH
/Symbol SF
43969 XM
(\242)SH
/Times-Roman SF
44510 XM
(such that)
44 W( the subgraphs)43 W
7200 33499 MT
(rooted by)69 W
/Times-Italic SF
11393 XM
(v)SH
/Times-Roman SF
12156 XM
(and)SH
/Times-Italic SF
13919 XM
(v)SH
/Symbol SF
14513 XM
(\242)SH
/Times-Roman SF
15079 XM
(are isomorphic, then eliminate vertex)69 W
/Times-Italic SF
30588 XM
(v)SH
/Symbol SF
31182 XM
(\242)SH
/Times-Roman SF
31748 XM
(and for any vertex having)69 W
/Times-Italic SF
42618 XM
(v)SH
/Symbol SF
43212 XM
(\242)SH
/Times-Roman SF
43778 XM
(as a)
69 W( child, make)70 W
/Times-Italic SF
50750 XM
(v)SH
/Times-Roman SF
51514 XM
(be the)70 W
7200 34876 MT
(child instead.)SH
12 /Times-Bold AF
7200 38560 MT
(3. Properties)SH
1 SS 
20155 7200 59820 PB 
%%BeginDocument: figs/fig1.eps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox:  0 0 201 202 
%%Title: (F:\\txt\\papers\\tc86\\figs\\fig1.CNV) 
%%Creator: Canvas (7.0 : Build 270) 
%%CreationDate: (04/08/00 @ 02:42 PM) 
%%DocumentProcSets: Deneba_CanvasCustomColors
%%+ CVDict
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%EndComments
%%BeginProlog 
%%BeginResource: procset CVDict
%%Title: Deneba standard graphics
%%Version: 1.02
%%CreationDate: 10/14/99
%%Copyright: (C) 1994, 1999 Deneba Systems. All Rights Reserved
userdict /CVDict 200 dict put
CVDict begin
/invalidcolortable? true def   
/level2 /languagelevel where {pop languagelevel 2 ge}{false} ifelse def
level2 not { /xshow {
0 currentpoint 5 -1 roll {pop pop moveto dup 1 add 3 1 roll exch dup 4 1 roll exch get 0 rmoveto currentpoint} exch kshow 
pop pop pop pop} def } if
/initialize
{CVDict
{dup xcheck{bind}if pop pop}forall
currentscreen /_sp exch def /_sa exch def /_sf exch def
/DefaultScreen{_sf _sa /_sp load}def
/DefaultScreenProc{ /_sp load}def
/setstrokeadjust where{pop true}{false}ifelse
{/sa /setstrokeadjust load def
/li /lineto load def
/mt /moveto load def
/ct /curveto load def
/lh { currentpoint exch pop lineto}bind def
/lv { currentpoint pop exch lineto}bind def}
{/sa{{currentdict StrokeAdjustDict ne{StrokeAdjustDict begin}if}{ currentdict StrokeAdjustDict eq{end}if}ifelse} bind def
userdict /StrokeAdjustDict 100 dict put
StrokeAdjustDict begin
/_xl
{transform
.25 sub round .25 add exch
.25 sub round .25 add exch
itransform
}bind def
/li{ _xl lineto}bind def
/mt{ _xl moveto}bind def
/ct{ _xl curveto}bind def
/lh { dup _xl pop currentpoint exch pop lineto}bind def
/lv { dup _xl pop currentpoint pop exch lineto}bind def
/rp{_xl/cv_b xdf/cv_r xdf
_xl/cv_t xdf/cv_l xdf
cv_l cv_t moveto
cv_r cv_t lineto
cv_r cv_b lineto
cv_l cv_b lineto
closepath
}bind def
end}ifelse}def
/terminate
{userdict /StrokeAdjustDict known {currentdict StrokeAdjustDict eq{end}if}if
currentdict CVDict eq{end}if}def
/mxMax 64 def
/mxStk [mxMax {matrix} repeat]def
/mxIdx 0 def
/stm{mxStk mxIdx 0 lt {/mxIdx 0 store}if mxIdx get currentmatrix pop /mxIdx mxIdx 1 add store}def
/rtm{mxIdx 1 ge {/mxIdx mxIdx 1 sub store mxStk mxIdx get setmatrix}if }def
/scl { 72 div exch 72 div exch scale } def
/scli { 72 exch div exch 72 exch div exch scale } def
/_cvmtx matrix def
/_txtmtx matrix def
/_initmtx matrix def
/xdf{exch def}def
/min{2 copy gt{exch}if pop}def
/max{2 copy lt{exch}if pop}def
/CVvec 256 array def
/T true def
/F false def
/_id 0 def
/_encodindex 0 def
/_encodArr 3 array def
/_fd 0 def
/_textSave null def
/_letterSpace 0 def
/_spaceXtra 0 def
/_PageSave null def
/_penh 1.0 def
/_penv 1.0 def
/save0 null def
/_w 0 def
/_h 0 def
/_ds 0 def
/hct false def
/pw 0 def
/wdif 0 def
/temp 0 def
/currot 0 def
/savehandler null def
/ia 0 def
/ix 0 def
/ixn 1 def
/MultipleDataSources false def 
/debug
{dup /$eps exch not def{/savehandler errordict /handleerror get def
errordict
/handleerror{$error begin
newerror{/newerror false def
showpage
72 72 scale
/Helvetica findfont .2 scalefont setfont
.25 9.6 moveto
(Error: )show
errorname
{dup type/stringtype ne
{(converted error name will end up in this string)cvs}if
show}exec
.25 9.4 moveto
(Offending Command: )show
/command load
{dup type/stringtype ne
{(converted command name will end up in this string)cvs}if
show}exec
.25 9.2 moveto
(Stack: )show
ostack
{.25 currentpoint .2 sub exch pop moveto
dup type/stringtype ne{dup type/integertype eq
1 index type/realtype eq or
1 index type/nametype eq or
not {type}if
(converted stack will end up in this string)cvs}if
show}forall
showpage
CVDict /savehandler get exec}if
end}put}if}def
/lc{setlinecap}def
/lj{setlinejoin}def
/lm{setmiterlimit}def
/lf{setflat}def
/cp{closepath}def
/np{newpath}def
/$psz 30 array def
/$pix 0 def
/gs{gsave $psz dup $pix _penh put $pix 1 add _penv put /$pix $pix 2 add def}def
/gr{grestore/$pix $pix 2 sub def $psz dup $pix get /_penh exch def $pix 1 add get /_penv exch def}def
/li{lineto} def
/lh{currentpoint exch pop lineto}def
/lv{currentpoint pop exch lineto}def
/mt{moveto} def
/_cv_mh{currentpoint exch pop moveto}def
/_cv_mv{currentpoint pop exch moveto}def
/ct{curveto} def
/rt{4 -2 roll moveto
dup 0 exch rlineto
exch 0 rlineto
neg 0 exch rlineto
closepath}def
/_hr
{
{/@err false def currentflat dup{gsave{eoclip}stopped{grestore 2 mul dup setflat dup 200 ge{(%% Canvas:Clip failed\r)print /@err true def pop exit}if}{grestore setflat exit}ifelse}loop @err not {eoclip}if setflat}
{/@err false def currentflat dup{gsave{clip}stopped{grestore 2 mul dup setflat dup 200 ge{(%% Canvas:Clip failed\r)print /@err true def pop exit}if}{grestore setflat exit}ifelse}loop @err not {clip}if setflat}
}def
/_cs null def
/fg{setgray}def
/setcmykcolor where {pop true}{false}ifelse
{/f4{ setcmykcolor}def}{/f4{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll}repeat setrgbcolor pop}def}ifelse
/setcolorspace where {pop true}{false}ifelse
{/scs{ dup setcolorspace /_cs exch def}def/f3{ _cs setcolorspace setcolor}def
}{/f3{ setrgbcolor}def/scs{ pop}def}ifelse
/$cc 5 array def
/findcmykcustomcolor where {pop true}{false}ifelse
not {/findcmykcustomcolor{$cc astore}def}if
/setcustomcolor where {pop true}{false}ifelse
not{/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}def}if
/fc{6 1 roll findcmykcustomcolor exch setcustomcolor}def
/setseparationgray where {pop true}{false}ifelse
not{/setseparationgray {systemdict /setgray get exec} def}if
/sg{ setseparationgray}def
/sp{/_penv xdf/_penh xdf}def
/rp
{/cv_b xdf/cv_r xdf
/cv_t xdf/cv_l xdf
cv_l cv_t moveto
cv_r cv_t lineto
cv_r cv_b lineto
cv_l cv_b lineto
closepath}def
/rr{/yradius xdf
/xradius xdf
/cv_b xdf
/cv_r xdf
/cv_t xdf
/cv_l xdf
cv_l xradius add cv_t moveto
cv_r xradius sub cv_t lineto
_cvmtx currentmatrix pop
currentpoint translate
xradius yradius scale
1 0 1 1 1 arcto 4{pop}repeat
_cvmtx setmatrix
cv_r cv_b yradius sub lineto
_cvmtx currentmatrix pop
currentpoint translate
xradius yradius scale
0 1 -1 1 1 arcto 4{pop}repeat
_cvmtx setmatrix
cv_l xradius add cv_b lineto
_cvmtx currentmatrix pop
currentpoint translate
xradius yradius scale
-1 0 -1 -1 1 arcto 4{pop}repeat
_cvmtx setmatrix
cv_l cv_t yradius add lineto
_cvmtx currentmatrix pop
currentpoint translate
xradius yradius scale
0 -1 1 -1 1 arcto 4{pop}repeat
_cvmtx setmatrix
closepath}def
/ep{_cvmtx currentmatrix pop
translate
scale
1 0 moveto
0 0 1 0 360 arc
closepath
_cvmtx setmatrix}def
/wd{_cvmtx currentmatrix pop
translate
scale
0 0 moveto
0 0 1 5 -2 roll arcn
closepath
_cvmtx setmatrix}def
/as{_cvmtx currentmatrix pop
translate
scale
0 0 1 5 -2 roll arcn
_cvmtx setmatrix}def
/ds
{_penv _penh ne dup{stm _penh dup 0 le{pop 1}if _penv dup 0 le{pop 1}if scale}{_penh setlinewidth}ifelse stroke {rtm}if}def
/df{fill}def
/de{eofill}def
/_gstk 5 array def
/_gstkc 0 def
/_gst{ 9 dict begin level2{/_ccs currentcolorspace def /_cc [currentcolor] def}{/_cc [currentrgbcolor]def}ifelse {currentpoint}stopped {/_cp null def}{ 2 array astore /_cp exch def}ifelse /_cf currentfont def
/_clw currentlinewidth def /_clc currentlinecap def /_clj currentlinejoin def /_cml currentmiterlimit def currentdict end}def
/hs{newpath gsave stm}def
/hc{/_hr load exch get exec newpath}def
/he{_gstk _gstkc _gst put /_gstkc _gstkc 1 add store 
grestore rtm /_gstkc _gstkc 1 sub store _gstk _gstkc get level2{dup /_ccs get setcolorspace dup /_cc get aload pop setcolor}{dup /_cc get aload pop setrgbcolor}ifelse dup /_cp get dup null eq 
not{aload pop moveto}{pop}ifelse dup /_cf get setfont
dup/_clw get setlinewidth dup/_clc get setlinecap dup/_clj get setlinejoin dup/_cml get setmiterlimit pop}def
/id{ /_id xdf}def
/_imatrix{_w 0 0 _h _id 0 ne{neg 0 _h}{0 0}ifelse _cvmtx astore}def
% Copyright (C) 1990, 1991 by Adobe Systems Incorporated.
% All rights reserved.
level2 { save /dontloadlevel1 xdf }if
/startnoload{{/noload save def} if}def
/endnoload{{noload restore}if }def
/testsystemdict{where{systemdict eq{true}{false}ifelse}{false}ifelse}def
/ncolors 1 def
/colorimage where{pop true}{false}ifelse{/ncolors 0
statusdict begin 
/processcolors where{pop pop processcolors}{/deviceinfo where{pop deviceinfo /Colors known
{pop {deviceinfo /Colors get}}if}if}ifelse end def
ncolors 0 ne{/colorimage testsystemdict
/setcolortransfer testsystemdict
/currentcolortransfer testsystemdict
/currentcmykcolor testsystemdict
and and and not{/ncolors 0 def}if}if}if
ncolors dup 1 ne exch dup 3 ne exch 4 ne and and {/ncolors 0 def}if
ncolors 1 eq dup dup not startnoload
{/doclutimage{[{255 mul round cvi bwclut exch get 255 div} /exec load dup currenttransfer exch] 
cvx bind settransfer _w _h 8 _imatrix _ds image}def}if
not endnoload
ncolors dup 3 eq exch 4 eq or
dup dup not startnoload
{/nullproc{{}}def/concatutil{/exec load
7 -1 roll /exec load}def
/defsubclut
{1 add getinterval def}def
/spconcattransfer   
{/Dclut exch def/Cclut exch def/Bclut exch def/Aclut exch def/ncompute exch ld
currentcolortransfer
[{Aclut ncompute}concatutil] cvx
[{Bclut ncompute}concatutil] cvx
[{Cclut ncompute}concatutil] cvx
[{Dclut ncompute}concatutil] cvx
setcolortransfer}def
/setuprgbcluts
{/bit3x rgbclut length 3 sub def
/bit1x bit3x 3 idiv def/rclut rgbclut def
/gclut rclut 1 bit3x defsubclut/bclut rclut 2 bit3x defsubclut}def}if not  
endnoload ncolors 3 eq dup dup not startnoload
{/3compute{exch bit3x mul
round cvi get 255 div}def
/doclutimage{%/rgbclut xdf pop 
setuprgbcluts/3compute rclut gclut bclut dup
spconcattransfer _w _h 8 _imatrix
[/_ds load /exec load /dup load dup]cvx
nullproc nullproc true 3 colorimage}def}if not endnoload ncolors 4 eq dup dup not startnoload
{/stuffclut{cmykindex 3 -1 roll put}def
/ftoint{1 exch sub 255 mul round cvi}def
/4compute { exch bit4x mul round cvi get 255 div } def
/computecmykclut{setuprgbcluts/bit4x rgbclut length 3 idiv 4 mul 4 sub def
/cmykclut bit4x 4 add string def
/cclut cmykclut def
/mclut cclut 1 bit4x defsubclut
/yclut cclut 2 bit4x defsubclut
/kclut cclut 3 bit4x defsubclut
/cmykindex 0 def
0 1 bit1x
{dup /cmykindex exch bit1x exch sub 4 mul def
3 mul dup rclut exch get 255 div exch dup gclut exch get 255 div
exch bclut exch get 255 div
setrgbcolor currentcmykcolor
ftoint kclut stuffclut
ftoint yclut stuffclut
ftoint mclut stuffclut
ftoint cclut stuffclut
}for}def
/doclutimage{invalidcolortable?{computecmykclut}if
/4compute cclut mclut yclut kclut spconcattransfer
_w _h 8 _imatrix[/_ds load /exec load/dup load dup dup] cvx 
nullproc nullproc nullproc true 4 colorimage}def}if
not endnoload
ncolors 0 eq
dup dup not startnoload
{/colorexpand{mystringexp 0 rgbclut
3 copy
7 -1 roll
{3 mul 3 getinterval putinterval exch 3 add exch 3 copy}forall
pop pop pop pop pop}def
/createexpandstr{/mystringexp exch st0 length mul string def}def
/doclutimage{/rgbclut xdf pop 3 createexpandstr _w _h 8 _imatrix
[/_ds load /exec load /colorexpand load /exec load] cvx
false 3 colorimage}def}if not endnoload
level2 { dontloadlevel1 restore }if
level2 not{ save /dontloadlevel2 xdf }if
/rgbclut 0 def
/doclutimage{/hival 255 def 
[/Indexed /DeviceRGB hival rgbclut] setcolorspace
_imagedict dup begin 
/Width _w def 
/Height _h def  
/Decode [0 hival] def  
/ImageMatrix _imatrix def
/BitsPerComponent 8 def 
/Interpolate false def
end image}def
level2 not{ dontloadlevel2 restore }if
%%EndProcSet
/_imagedict 15 dict begin /ImageType 1 def/BitsPerComponent 8 def/Interpolate false def currentdict end def
/hascolor true def
/level2 systemdict /languagelevel known
{languagelevel 2 ge}{false}ifelse def
/foureq {4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and} def
/setupbands{gsave
/_settransfer systemdict /settransfer get def
/_currenttransfer systemdict /currenttransfer get def
/_image systemdict /image get def
/blank 0 _currenttransfer exec
1 _currenttransfer exec eq def
/negative blank{0 _currenttransfer exec 0.5 lt}
{0 _currenttransfer exec 1 _currenttransfer exec gt}ifelse def
/inverted? negative def
/_currentgray systemdict /currentgray get def
hascolor{/$b 0 def} {/$b 5 def} ifelse
/setcmykcolor where{pop 1 0 0 0 setcmykcolor _currentgray 1 exch sub
0 1 0 0 setcmykcolor _currentgray 1 exch sub
0 0 1 0 setcmykcolor _currentgray 1 exch sub
0 0 0 1 setcmykcolor _currentgray 1 exch sub
4 {4 copy} repeat
1 0 0 0 foureq{/$b 1 store}if
0 1 0 0 foureq{/$b 2 store}if
0 0 1 0 foureq{/$b 3 store}if
0 0 0 1 foureq{/$b 4 store}if
0 0 0 0 foureq{/$b 6 store}if}if
blank{/$b 6 store}if
$b 0 eq $b 5 eq or{/$dt 0 def}if/$dt -1 def grestore}def
/doimage{
level2{image}{begin
Width Height BitsPerComponent ImageMatrix
Decode length 2 eq
{/DataSource load end image}{
Decode length 6 eq
{MultipleDataSources{DataSource 0 get DataSource 1 get DataSource 2 get}{/DataSource load}ifelse
MultipleDataSources 3 end DSIColorImage}{
Decode length 8 eq{MultipleDataSources{DataSource 0 get DataSource 1 get
DataSource 2 get DataSource 3 get}{/DataSource load}ifelse
MultipleDataSources 4 end DSIColorImage}if}ifelse
}ifelse
}ifelse}def
/dt{/rgbclut xdf /bwclut xdf}def
/cl{$i setmatrix translate scale
/_w _imagedict /Width get def
/_h _imagedict /Height get def
/_ds _imagedict /DataSource get def
doclutimage} def
/cd{$i setmatrix translate scale
level2{_imagedict /ColorSpace get setcolorspace}if
/_w _imagedict /Width get def
/_h _imagedict /Height get def
/_ds _imagedict /DataSource get def
_imagedict begin
/ImageMatrix _imatrix def
currentdict end
doimage} def
/im{$i setmatrix translate scale 
level2{/DeviceGray setcolorspace 0 setgray}if
/_w _imagedict /Width get def
/_h _imagedict /Height get def
/_ds _imagedict /DataSource get def
_imagedict begin
%/Decode [0 1] def  
%/Width _w def
%/Height _h def
/ImageMatrix _imatrix def
currentdict end 
doimage }def
/colorimage where{pop/DSIColorImage {colorimage} def}{/DSIColorImage{
/$nc xdf pop /proc0 xdf 3 index 2 index mul 7 add 8 div cvi string /st1 xdf
$nc 3 eq{{proc0 dup/st0 xdf 0 exch 3 exch length 3 sub
{dup st0 exch get .3 mul 1 index 1 add st0 exch get .59 mul add 1 index 2 add st0 exch get .11 mul add
cvi exch 3 div cvi exch st1 3 1 roll put}for st1}}{{proc0 dup/st0 xdf 0 exch 4 exch length 4 sub{dup
st0 exch get .3 mul
1 index 1 add st0 exch get .59 mul add
1 index 2 add st0 exch get .11 mul add
1 index 3 add st0 exch get add dup 255.0 gt{pop 255.0}if
255.0 exch sub cvi
exch 4 div cvi exch
st1 3 1 roll put}for st1}}ifelse
image}def}ifelse
/OPIimage{image}def
/$i matrix def
/bi{scale translate $i currentmatrix pop translate scale setupbands}def
/ei{$i setmatrix}def
/ik{$i setmatrix translate scale 
/_w _imagedict /Width get def
/_h _imagedict /Height get def
/_ds _imagedict /DataSource get def
_w _h false _imatrix 5 -1 roll _ds imagemask}def
/rs{2 copy translate
3 -1 roll neg rotate
neg exch neg exch translate
}def
/cs{_cvmtx astore concat} def
/fd{/_fd xdf}def
/_fontMatrix{1 0 0 _fd 0 ne{-1 0 0}{1 0 0}ifelse _cvmtx astore}def
/rf{/_encodindex xdf
FontDirectory exch known {
findfont dup length 1 add dict begin{1 index/FID ne{def}{pop pop}ifelse}forall
dup /FontName exch def FontType 0 ne{/Encoding Encoding 256 array copy def
_encodindex 0 ge{0 _encodArr _encodindex get{dup type/nametype eq{Encoding 2 index 2 index put pop 1 add}
{exch pop}ifelse}forall pop}if}if
currentdict end
definefont pop }{pop pop}ifelse} def
/cvsf{ findfont ftSize 0 0 ftSize _fd 0 ne{-1 mul}if 0 0 _cvmtx astore 
makefont setfont}def
/mf{3 -1 roll findfont 3 1 roll exch ftSize mul exch ftSize mul 0 exch 0 exch 
_fd 0 ne{-1 mul}if 0 0 _cvmtx astore makefont setfont}def
/wrk1 ( ) def
/wdict 16 dict def
/Work75 75 string def
/Nmk{Work75 cvs dup}def
/Npt{put cvn}def
/dhOdh{Nmk 2 79 Npt}def
/dhBdh{Nmk 2 111 Npt}def
/dhSdh{Nmk 2 83 Npt}def
/sfWidth{gsave 0 0 moveto 0 0 lineto 0 0 lineto 0 0 lineto closepath clip stringwidth grestore}def
/fts{/ftSize exch def}def
/mkFT{dup/FontType get 0 eq{dup maxlength dict begin
{1 index/FID ne 2 index /UniqueID ne and{def}{pop pop}ifelse}forall
currentdict end
dup/FDepVector 2 copy get
[exch 6 index exch 6 index exch{mkFT 3 1 roll}forall pop pop] put dup}{/tempFT 12 dict def
tempFT begin
/FontMatrix [1 0 0 1 0 0] def
/FontType 3 def
dup/Encoding get/Encoding exch def
/proc2 2 index def
dup/ft1 exch def
/ft2 1 array def
/FontBBox [0 0 1 1] def
/BuildChar{CVDict begin
exch dup/ftdt xdf begin
wdict begin
/chr xdf/chrst wrk1 dup 0 chr put def
ft2 0 get null eq{ft1 dup length 2 add dict begin
{1 index/FID ne 2 index /UniqueID ne and{def}{pop pop}ifelse}forall
/PaintType 2 def/StrokeWidth .024 0 FontMatrix idtransform pop def
currentdict end
/q exch definefont
ft2 exch 0 exch put}if
ftdt/proc2 get exec end end end}def end tempFT}ifelse
3 index exch
definefont exch pop}def
/mb{dup dhBdh FontDirectory 1 index known
{exch pop}{dup 2 index
findfont{boldproc} exch
mkFT pop pop pop exch pop
}ifelse }def
/mo{dup dhOdh FontDirectory 1 index known
{exch pop}{dup 2 index
findfont{outproc} exch
mkFT pop pop pop exch pop
}ifelse }def
/ms{dup dhSdh FontDirectory 1 index known
{exch pop}{dup 2 index
findfont{ShadChar} exch
mkFT  pop pop pop exch pop
}ifelse }def
/outproc{ft1 setfont
gsave chrst sfWidth grestore
setcharwidth dblsh}def
/boldproc{ft1 setfont
gsave
chrst sfWidth 1 index 0 ne{exch .05 add exch}if
grestore
setcharwidth
ft1 /PaintType get 2 ne
{0 0 moveto gsave ft2 0 get setfont chrst show grestore chrst show}
{0 0 moveto gsave chrst show grestore .05 0 moveto chrst show}ifelse}def
/dblsh{currentcolor currentcolorspace 1.0 setgray
chrst 0 0 moveto show setcolorspace setcolor
ft2 0 get setfont chrst 0 0 moveto show}def
/ShadChar{
ft1 setfont
gsave
chrst sfWidth 1 index 0 ne{exch .05 add exch}if
grestore
setcharwidth
chrst .06 0 moveto show
0 .05 translate dblsh}def
/ts{show}def
/ta{/_letterSpace xdf/_spaceXtra xdf}def
/tf{/_textWidth xdf
/_numSpaces xdf
/_stringLength xdf
dup     stringwidth pop
_letterSpace _stringLength 1 sub mul add
_spaceXtra _numSpaces mul add
_textWidth exch sub /wdif xdf
_spaceXtra 0 32
wdif _stringLength div
_letterSpace add
0 6 -1 roll awidthshow}def
/pb{/_PageSave save def/showpage{}def}def
/pe{_PageSave restore}def
/pm{_pm currentmatrix pop}def
/_pm matrix def
/ps{showpage _pm setmatrix}def
level2{/ef {gsave 6 array astore concat dup execform grestore}def}
{/ef{gsave 6 array astore concat newpath dup begin Matrix concat
BBox dup dup 0 get exch 1 get moveto
dup dup 0 get exch 3 get lineto
dup dup 2 get exch 3 get lineto
dup 2 get exch 1 get lineto closepath
clip newpath PaintProc end grestore}def}ifelse
/bc{save 11 1 roll 10 dict begin /BBox 5 1 roll 4 array astore def
/Matrix 7 1 roll 6 array astore def /FormType 1 def/PaintProc{/pp get exec}def}def
/ec{pop restore}def
/printvm{1 vmreclaim vmstatus pop exch pop (                         )cvs print (\n)print flush}def
/setoverprint where {pop}{/setoverprint{pop}def}ifelse
/sstr { /$sstrs exch def /$sstr exch def /$sstry exch def /$sstrx exch def /Courier findfont $sstrs 
scalefont setfont $sstrx $sstry mt stm 1 -1 scale $sstr show rtm } def
/DSIBeginPaintProc{/pp mark{currentfile token not{}if dup/DSIEndPaintProc
        eq{pop counttomark array astore cvx bind /exec load]cvx def DSIEndPaintProc exit}
        {counttomark 300 gt{counttomark array astore cvx bind /exec load}if}ifelse}loop}def
/DSIEndPaintProc{currentdict end}def
/DSIBeginPaintSubProc {save 11 1 roll 10 dict dup /pD exch def begin 
        /BBox 5 1 roll 4 array astore def /Matrix 7 1 roll 6 array astore def 
        /FormType 1 def /PaintProc { /pp get exec } def /pp} def
/DSIEndPaintSubProc {bind def end pD} def
/iaa {/ix ix ixn add def} def
/ias2 {/igap exch def /_st0 ia ix igap add get def _st0} def
/ias {/st0 ia ix get def iaa st0} def
/i85s {0 ias2 /ASCII85Decode filter st0 readstring pop iaa} def
/irles {0 ias2 /ASCII85Decode filter /RunLengthDecode filter st0 readstring pop iaa} def
initialize
end
%%EndResource
CVDict begin 0 id 1 fd
_encodArr 0
[
39/quotesingle 96/grave
128/bullet/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE/bullet/bullet/bullet
/bullet/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron
/guilsinglright/oe/bullet/bullet/Ydieresis
/bullet/exclamdown/cent/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis
/Aring
/AE/Ccedilla/Egrave/Eacute/Egrave/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis
/aring
/ae/ccedilla/egrave/eacute/ecircumflex/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] put
_encodArr 1
[
39/quotesingle 96/grave
128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/blank/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute
/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex
/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
] put
end
%%EndProlog 
%%IncludeFont: CourierNewPSMT
CVDict begin
/___FN2 /Courier dup dup findfont dup /CharStrings known {begin CharStrings /Adieresis known { 0 }{-1} ifelse end} {pop -1} ifelse rf
end
0.25 0.25 translate
%%BeginSetup 
CVDict begin

0 id
1 fd
0 202 translate
300 -300 scli
%%EndSetup 
%%BeginPageSetup 
pm
%%EndPageSetup
/DeviceRGB scs
0.0 0.0 0.0 1. f4
0.1250 0.1250 sp
 0 lc
 2 lj
T sa
%page rect: 50 290 252 491 
stm
0.0 0.0 0.0 1. f4
4.1667 4.1667 sp
11.5 lm
 0 lj
np
544.7903 626.732 mt
794.7897 460.0657 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
544.7903 460.0657 mt
794.7897 626.732 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
794.7897 460.0657 mt
794.7897 626.732 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
544.7903 460.0657 mt
544.7903 626.732 li
ds
rtm
stm
stm
41.6666 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
691.6235 493.3985 mt
(1)  show
T sa
rtm
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
629.1237 493.3985 mt
(1)  show
T sa
rtm
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
504.124 555.8983 mt
(0)  show
T sa
rtm
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
816.6232 555.8983 mt
(0)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 1. f4
np
544.7903 793.3983 mt
794.7897 626.732 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
544.7903 626.732 mt
794.7897 793.3983 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
794.7897 626.732 mt
794.7897 793.3983 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
544.7903 626.732 mt
544.7903 793.3983 li
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
691.6235 660.0647 mt
(1)  show
T sa
rtm
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
629.1237 660.0647 mt
(1)  show
T sa
rtm
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
504.124 722.5646 mt
(0)  show
T sa
rtm
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
816.6232 722.5646 mt
(0)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 1. f4
np
544.7903 501.7323 mt
794.7897 335.066 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
544.7903 335.066 mt
794.7897 501.7323 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
794.7897 335.066 mt
794.7897 501.7323 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
544.7903 335.066 mt
544.7903 501.7323 li
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
691.6235 368.3988 mt
(1)  show
T sa
rtm
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
629.1237 368.3988 mt
(1)  show
T sa
rtm
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
504.124 430.8986 mt
(0)  show
T sa
rtm
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
816.6232 430.8986 mt
(0)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 1. f4
np
541.6653 166.6663 mt
666.665 41.6666 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
85.4165 168.7605 mt
168.7496 43.7608 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
252.0827 168.7605 mt
168.7496 43.7608 li
ds
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 168.7496 43.7608 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 168.7496 43.7608 ep
ds
rtm
stm
0.0 0.0 0.0 0 f4
np
43.7499 127.0939 127.083 210.427 rp
de
0.0 0.0 0.0 1. f4
np
43.7499 127.0939 127.083 210.427 rp
ds
rtm
stm
0.0 0.0 0.0 0 f4
np
210.4162 127.0939 293.7493 210.427 rp
de
0.0 0.0 0.0 1. f4
np
210.4162 127.0939 293.7493 210.427 rp
ds
rtm
stm
stm
49.9999 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
154.7498 56.6767 mt
(i)  show
T sa
rtm
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
71.4167 181.6765 mt
(0)  show
T sa
rtm
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
238.083 181.6765 mt
(1)  show
T sa
rtm
rtm
stm
stm
41.6666 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
100.9999 97.9268 mt
(0)  show
T sa
rtm
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
217.6663 97.9268 mt
(1)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 1. f4
np
83.3331 666.6651 mt
168.7496 418.7598 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
252.0827 543.7595 mt
168.7496 418.7598 li
ds
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 168.7496 418.7598 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 168.7496 418.7598 ep
ds
rtm
stm
stm
49.9999 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
154.7498 431.6758 mt
(1)  show
T sa
rtm
rtm
stm
stm
41.6666 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
103.0833 491.665 mt
(0)  show
T sa
rtm
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
217.6663 479.1759 mt
(1)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 1. f4
np
291.666 791.6648 mt
249.9994 541.6654 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
83.3331 666.6651 mt
249.9994 541.6654 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
41.6666 791.6648 mt
83.3331 666.6651 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
291.666 791.6648 mt
83.3331 666.6651 li
ds
rtm
stm
0.0 0.0 0.0 0 f4
np
2.0833 752.0816 85.4165 835.4147 rp
de
0.0 0.0 0.0 1. f4
np
2.0833 752.0816 85.4165 835.4147 rp
ds
rtm
stm
stm
49.9999 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
29.7502 806.6642 mt
(0)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
252.0827 752.0816 335.4158 835.4147 rp
de
0.0 0.0 0.0 1. f4
np
252.0827 752.0816 335.4158 835.4147 rp
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
279.7495 806.6642 mt
(1)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 252.0936 543.7595 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 252.0936 543.7595 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
238.0938 556.6755 mt
(2)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 85.4273 668.7592 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 85.4273 668.7592 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
71.4275 681.6752 mt
(4)  show
T sa
rtm
rtm
stm
stm
41.6666 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
280.1662 639.5813 mt
(1)  show
T sa
rtm
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
159.3331 699.9978 mt
(1)  show
T sa
rtm
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
161.4165 581.2481 mt
(0)  show
T sa
rtm
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
26.0001 735.4144 mt
(0)  show
T sa
rtm
rtm
stm
stm
49.9999 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
43.9187 344.1653 mt
(x)  show
T sa
rtm
stm
41.6666 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
73.9178 357.1653 mt
(1)  show
T sa
rtm
stm
49.9999 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
98.9172 331.1653 mt
(.)  show
T sa
rtm
stm
0.0 0.0 0.0 1. f4
F sa
128.9163 344.1653 mt
(x)  show
T sa
rtm
stm
41.6666 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
158.9154 357.1653 mt
(2)  show
T sa
rtm
stm
49.9999 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
183.9148 344.1653 mt
0 0 ta
( + ) 3 2 90.00 tf
T sa
rtm
stm
0.0 0.0 0.0 1. f4
F sa
273.912 344.1653 mt
(x)  show
T sa
rtm
stm
41.6666 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
303.9111 357.1653 mt
(4)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 1. f4
np
791.6647 166.6663 mt
668.7484 43.7608 li
ds
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 668.7484 43.7608 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 668.7484 43.7608 ep
ds
rtm
stm
stm
49.9999 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
654.7486 56.6767 mt
(1)  show
T sa
rtm
rtm
stm
stm
41.6666 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
563.4988 95.8327 mt
(0)  show
T sa
rtm
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
750.9984 95.8327 mt
(1)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
502.0821 752.0816 585.4152 835.4147 rp
de
0.0 0.0 0.0 1. f4
np
502.0821 752.0816 585.4152 835.4147 rp
ds
rtm
stm
stm
49.9999 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
529.7489 806.6642 mt
(0)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
752.0815 752.0816 835.4146 835.4147 rp
de
0.0 0.0 0.0 1. f4
np
752.0815 752.0816 835.4146 835.4147 rp
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
779.7483 806.6642 mt
(1)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 793.7589 627.0927 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 793.7589 627.0927 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
779.7591 640.0086 mt
(n)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 543.7595 627.0927 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 543.7595 627.0927 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
529.7597 640.0086 mt
(n)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 1. f4
np
541.6653 333.3326 mt
791.6647 166.6663 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
541.6653 166.6663 mt
791.6647 333.3326 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
791.6647 166.6663 mt
791.6647 333.3326 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
541.6653 166.6663 mt
541.6653 333.3326 li
ds
rtm
stm
stm
41.6666 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
688.4985 199.9991 mt
(1)  show
T sa
rtm
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
625.9987 199.9991 mt
(1)  show
T sa
rtm
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
500.999 262.4989 mt
(0)  show
T sa
rtm
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
813.4982 262.4989 mt
(0)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 793.7589 168.7605 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 793.7589 168.7605 ep
ds
rtm
stm
stm
49.9999 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
779.7591 181.6764 mt
(2)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 543.7595 168.7605 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 543.7595 168.7605 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
529.7597 181.6764 mt
(2)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 793.7589 335.4267 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 793.7589 335.4267 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
779.7591 348.3427 mt
(3)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 543.7595 335.4267 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 543.7595 335.4267 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
529.7597 348.3427 mt
(3)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
520.8321 437.499 812.498 520.8321 rp
de
rtm
stm
0.0 0.0 0.0 1. f4
np
10.4166 10.4166 624.9985 479.1656 ep
de
0.0 0.0 0.0 1. f4
np
10.4166 10.4166 624.9985 479.1656 ep
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
10.4166 10.4166 666.6651 479.1656 ep
de
0.0 0.0 0.0 1. f4
np
10.4166 10.4166 666.6651 479.1656 ep
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
10.4166 10.4166 708.3317 479.1656 ep
de
0.0 0.0 0.0 1. f4
np
10.4166 10.4166 708.3317 479.1656 ep
ds
rtm
terminate

%%EndDocument
 PE 10 /Times-Roman AF
23545 61430 MT
(Figure 1.Example Function Graphs)SH
8200 63221 MT
(In this section we explore the efficiency of our representation)
118 W( by means of several examples.  Figure 1 shows)117 W
7200 64598 MT
(several examples of)
238 W( reduced function graphs.  In this figure, a nonterminal vertex is represented by a circle)239 W
7200 65975 MT
(containing the index with the)
37 W( two children indicated by branches labeled 0 \050low\051 and 1 \050high\051.  A terminal vertex is)36 W
7200 67352 MT
(represented by a square containing the value.)SH
ES
%%Page: 7 7

61200 79200 BS
0 SI
10 /Times-Roman AF
30350 4286 MT
(7)SH
11 /Times-Bold AF
7200 7937 MT
(3.1. Example Functions)SH
10 /Times-Roman AF
8200 9314 MT
(The function which yields the value of the)74 W
/Times-Italic SF
25956 XM
(i)SH
/Times-Roman SF
26384 XM
(th argument is denoted by a graph with a single nonterminal vertex)74 W
7200 10691 MT
(having index)27 W
/Times-Italic SF
12698 XM
(i)SH
/Times-Roman SF
13253 XM
(and having as low child a terminal vertex with value)
27 W( 0 and as high child a terminal vertex with value)26 W
7200 12068 MT
(1. We)
318 W( present this graph mainly to point out that an input variable can be viewed as a)
34 W( Boolean function, and hence)35 W
7200 13445 MT
(can be operated on by the manipulation algorithms described in this paper.)SH
8200 15924 MT
(The odd parity function of)56 W
/Times-Italic SF
19283 XM
(n)SH
/Times-Roman SF
20088 XM
(variables is denoted by a graph containing 2)55 W
/Times-Italic SF
(n)SH
/Times-Roman SF
(+1 vertices.  This compares favorably)55 W
7200 17301 MT
(to its representation in reduced sum-of-products form \050requiring 2)27 W
8 /Times-Italic AF
33800 16956 MT
(n)SH
10 /Times-Roman AF
34477 17301 MT
(terms.\051 This)
304 W( graph)
27 W( resembles the familiar parity)28 W
7200 18678 MT
(ladder contact network first described by Shannon)
38 W( [11].)
SH( In)
324 W( fact, we can adapt his construction of a contact network)37 W
7200 20055 MT
(to implement an arbitrary symmetric function to show that any symmetric function of)63 W
/Times-Italic SF
42488 XM
(n)SH
/Times-Roman SF
43301 XM
(arguments is denoted by a)64 W
7200 21432 MT
(reduced function graph having O)
150 0 WX(\050)SH
/Times-Italic SF
(n)SH
8 /Times-Roman AF
21402 21087 MT
(2)SH
10 SS 
21802 21432 MT
(\051 vertices.)SH
8200 23911 MT
(As a)
193 W( third example, the graph denoting the function)192 W
/Times-Italic SF
30815 XM
(x)SH
8 /Times-Roman AF
31259 24256 MT
(1)SH
10 /Symbol AF
31659 23911 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
32353 24256 MT
(2)SH
10 SS 
33003 23911 MT
(+)SH
/Times-Italic SF
33817 XM
(x)SH
8 /Times-Roman AF
34261 24256 MT
(4)SH
10 SS 
35103 23911 MT
(contains 5 vertices as shown.  This example)192 W
7200 25288 MT
(illustrates several key properties of reduced function graphs.  First, observe that there is no)
74 W( vertex having index 3,)75 W
7200 26665 MT
(because the)
62 W( function is independent of)61 W
/Times-Italic SF
23175 XM
(x)SH
8 /Times-Roman AF
23619 27010 MT
(3)SH
10 SS 
24019 26665 MT
(. More)
372 W( generally, a reduced function graph for a function)61 W
/Times-Italic SF
47989 XM
(f)SH
/Times-Roman SF
48578 XM
(contains only)61 W
7200 28042 MT
(vertices having indices in)17 W
/Times-Italic SF
17711 XM
(I)SH
8 SS 
18044 28387 MT
(f)SH
10 /Times-Roman AF
18416 28042 MT
(. There)
285 W( are no inefficiencies caused by considering all of the functions to have the same)18 W
/Times-Italic SF
7200 29419 MT
(n)SH
/Times-Roman SF
7955 XM
(arguments. This)
259 W( would not be the case if we represented functions by their truth tables.  Second, observe that even)4 W
7200 30796 MT
(for this simple function, several)
1 W( of the subgraphs are shared by different branches.  This sharing yields efficiency not)2 W
7200 32173 MT
(only in the size of the)
45 W( function representation, but also in the performance of our algorithms---once some operation)44 W
7200 33550 MT
(has been performed on a subgraph, the result can be utilized by all places sharing this subgraph.)SH
11 /Times-Bold AF
7200 37167 MT
(3.2. Ordering Dependency)SH
1 SS 
26242 7200 64514 PB 
%%BeginDocument: figs/fig2.eps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox:  0 0 311 263 
%%Title: (F:\\txt\\papers\\tc86\\figs\\fig2.CNV) 
%%Creator: Canvas (7.0 : Build 270) 
%%CreationDate: (04/08/00 @ 03:53 PM) 
%%DocumentProcSets: Deneba_CanvasCustomColors
%%+ CVDict
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%EndComments
%%BeginProlog 
%%BeginResource: procset CVDict
%%Title: Deneba standard graphics
%%Version: 1.02
%%CreationDate: 10/14/99
%%Copyright: (C) 1994, 1999 Deneba Systems. All Rights Reserved
userdict /CVDict 200 dict put
CVDict begin
/invalidcolortable? true def   
/level2 /languagelevel where {pop languagelevel 2 ge}{false} ifelse def
level2 not { /xshow {
0 currentpoint 5 -1 roll {pop pop moveto dup 1 add 3 1 roll exch dup 4 1 roll exch get 0 rmoveto currentpoint} exch kshow 
pop pop pop pop} def } if
/initialize
{CVDict
{dup xcheck{bind}if pop pop}forall
currentscreen /_sp exch def /_sa exch def /_sf exch def
/DefaultScreen{_sf _sa /_sp load}def
/DefaultScreenProc{ /_sp load}def
/setstrokeadjust where{pop true}{false}ifelse
{/sa /setstrokeadjust load def
/li /lineto load def
/mt /moveto load def
/ct /curveto load def
/lh { currentpoint exch pop lineto}bind def
/lv { currentpoint pop exch lineto}bind def}
{/sa{{currentdict StrokeAdjustDict ne{StrokeAdjustDict begin}if}{ currentdict StrokeAdjustDict eq{end}if}ifelse} bind def
userdict /StrokeAdjustDict 100 dict put
StrokeAdjustDict begin
/_xl
{transform
.25 sub round .25 add exch
.25 sub round .25 add exch
itransform
}bind def
/li{ _xl lineto}bind def
/mt{ _xl moveto}bind def
/ct{ _xl curveto}bind def
/lh { dup _xl pop currentpoint exch pop lineto}bind def
/lv { dup _xl pop currentpoint pop exch lineto}bind def
/rp{_xl/cv_b xdf/cv_r xdf
_xl/cv_t xdf/cv_l xdf
cv_l cv_t moveto
cv_r cv_t lineto
cv_r cv_b lineto
cv_l cv_b lineto
closepath
}bind def
end}ifelse}def
/terminate
{userdict /StrokeAdjustDict known {currentdict StrokeAdjustDict eq{end}if}if
currentdict CVDict eq{end}if}def
/mxMax 64 def
/mxStk [mxMax {matrix} repeat]def
/mxIdx 0 def
/stm{mxStk mxIdx 0 lt {/mxIdx 0 store}if mxIdx get currentmatrix pop /mxIdx mxIdx 1 add store}def
/rtm{mxIdx 1 ge {/mxIdx mxIdx 1 sub store mxStk mxIdx get setmatrix}if }def
/scl { 72 div exch 72 div exch scale } def
/scli { 72 exch div exch 72 exch div exch scale } def
/_cvmtx matrix def
/_txtmtx matrix def
/_initmtx matrix def
/xdf{exch def}def
/min{2 copy gt{exch}if pop}def
/max{2 copy lt{exch}if pop}def
/CVvec 256 array def
/T true def
/F false def
/_id 0 def
/_encodindex 0 def
/_encodArr 3 array def
/_fd 0 def
/_textSave null def
/_letterSpace 0 def
/_spaceXtra 0 def
/_PageSave null def
/_penh 1.0 def
/_penv 1.0 def
/save0 null def
/_w 0 def
/_h 0 def
/_ds 0 def
/hct false def
/pw 0 def
/wdif 0 def
/temp 0 def
/currot 0 def
/savehandler null def
/ia 0 def
/ix 0 def
/ixn 1 def
/MultipleDataSources false def 
/debug
{dup /$eps exch not def{/savehandler errordict /handleerror get def
errordict
/handleerror{$error begin
newerror{/newerror false def
showpage
72 72 scale
/Helvetica findfont .2 scalefont setfont
.25 9.6 moveto
(Error: )show
errorname
{dup type/stringtype ne
{(converted error name will end up in this string)cvs}if
show}exec
.25 9.4 moveto
(Offending Command: )show
/command load
{dup type/stringtype ne
{(converted command name will end up in this string)cvs}if
show}exec
.25 9.2 moveto
(Stack: )show
ostack
{.25 currentpoint .2 sub exch pop moveto
dup type/stringtype ne{dup type/integertype eq
1 index type/realtype eq or
1 index type/nametype eq or
not {type}if
(converted stack will end up in this string)cvs}if
show}forall
showpage
CVDict /savehandler get exec}if
end}put}if}def
/lc{setlinecap}def
/lj{setlinejoin}def
/lm{setmiterlimit}def
/lf{setflat}def
/cp{closepath}def
/np{newpath}def
/$psz 30 array def
/$pix 0 def
/gs{gsave $psz dup $pix _penh put $pix 1 add _penv put /$pix $pix 2 add def}def
/gr{grestore/$pix $pix 2 sub def $psz dup $pix get /_penh exch def $pix 1 add get /_penv exch def}def
/li{lineto} def
/lh{currentpoint exch pop lineto}def
/lv{currentpoint pop exch lineto}def
/mt{moveto} def
/_cv_mh{currentpoint exch pop moveto}def
/_cv_mv{currentpoint pop exch moveto}def
/ct{curveto} def
/rt{4 -2 roll moveto
dup 0 exch rlineto
exch 0 rlineto
neg 0 exch rlineto
closepath}def
/_hr
{
{/@err false def currentflat dup{gsave{eoclip}stopped{grestore 2 mul dup setflat dup 200 ge{(%% Canvas:Clip failed\r)print /@err true def pop exit}if}{grestore setflat exit}ifelse}loop @err not {eoclip}if setflat}
{/@err false def currentflat dup{gsave{clip}stopped{grestore 2 mul dup setflat dup 200 ge{(%% Canvas:Clip failed\r)print /@err true def pop exit}if}{grestore setflat exit}ifelse}loop @err not {clip}if setflat}
}def
/_cs null def
/fg{setgray}def
/setcmykcolor where {pop true}{false}ifelse
{/f4{ setcmykcolor}def}{/f4{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll}repeat setrgbcolor pop}def}ifelse
/setcolorspace where {pop true}{false}ifelse
{/scs{ dup setcolorspace /_cs exch def}def/f3{ _cs setcolorspace setcolor}def
}{/f3{ setrgbcolor}def/scs{ pop}def}ifelse
/$cc 5 array def
/findcmykcustomcolor where {pop true}{false}ifelse
not {/findcmykcustomcolor{$cc astore}def}if
/setcustomcolor where {pop true}{false}ifelse
not{/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}def}if
/fc{6 1 roll findcmykcustomcolor exch setcustomcolor}def
/setseparationgray where {pop true}{false}ifelse
not{/setseparationgray {systemdict /setgray get exec} def}if
/sg{ setseparationgray}def
/sp{/_penv xdf/_penh xdf}def
/rp
{/cv_b xdf/cv_r xdf
/cv_t xdf/cv_l xdf
cv_l cv_t moveto
cv_r cv_t lineto
cv_r cv_b lineto
cv_l cv_b lineto
closepath}def
/rr{/yradius xdf
/xradius xdf
/cv_b xdf
/cv_r xdf
/cv_t xdf
/cv_l xdf
cv_l xradius add cv_t moveto
cv_r xradius sub cv_t lineto
_cvmtx currentmatrix pop
currentpoint translate
xradius yradius scale
1 0 1 1 1 arcto 4{pop}repeat
_cvmtx setmatrix
cv_r cv_b yradius sub lineto
_cvmtx currentmatrix pop
currentpoint translate
xradius yradius scale
0 1 -1 1 1 arcto 4{pop}repeat
_cvmtx setmatrix
cv_l xradius add cv_b lineto
_cvmtx currentmatrix pop
currentpoint translate
xradius yradius scale
-1 0 -1 -1 1 arcto 4{pop}repeat
_cvmtx setmatrix
cv_l cv_t yradius add lineto
_cvmtx currentmatrix pop
currentpoint translate
xradius yradius scale
0 -1 1 -1 1 arcto 4{pop}repeat
_cvmtx setmatrix
closepath}def
/ep{_cvmtx currentmatrix pop
translate
scale
1 0 moveto
0 0 1 0 360 arc
closepath
_cvmtx setmatrix}def
/wd{_cvmtx currentmatrix pop
translate
scale
0 0 moveto
0 0 1 5 -2 roll arcn
closepath
_cvmtx setmatrix}def
/as{_cvmtx currentmatrix pop
translate
scale
0 0 1 5 -2 roll arcn
_cvmtx setmatrix}def
/ds
{_penv _penh ne dup{stm _penh dup 0 le{pop 1}if _penv dup 0 le{pop 1}if scale}{_penh setlinewidth}ifelse stroke {rtm}if}def
/df{fill}def
/de{eofill}def
/_gstk 5 array def
/_gstkc 0 def
/_gst{ 9 dict begin level2{/_ccs currentcolorspace def /_cc [currentcolor] def}{/_cc [currentrgbcolor]def}ifelse {currentpoint}stopped {/_cp null def}{ 2 array astore /_cp exch def}ifelse /_cf currentfont def
/_clw currentlinewidth def /_clc currentlinecap def /_clj currentlinejoin def /_cml currentmiterlimit def currentdict end}def
/hs{newpath gsave stm}def
/hc{/_hr load exch get exec newpath}def
/he{_gstk _gstkc _gst put /_gstkc _gstkc 1 add store 
grestore rtm /_gstkc _gstkc 1 sub store _gstk _gstkc get level2{dup /_ccs get setcolorspace dup /_cc get aload pop setcolor}{dup /_cc get aload pop setrgbcolor}ifelse dup /_cp get dup null eq 
not{aload pop moveto}{pop}ifelse dup /_cf get setfont
dup/_clw get setlinewidth dup/_clc get setlinecap dup/_clj get setlinejoin dup/_cml get setmiterlimit pop}def
/id{ /_id xdf}def
/_imatrix{_w 0 0 _h _id 0 ne{neg 0 _h}{0 0}ifelse _cvmtx astore}def
% Copyright (C) 1990, 1991 by Adobe Systems Incorporated.
% All rights reserved.
level2 { save /dontloadlevel1 xdf }if
/startnoload{{/noload save def} if}def
/endnoload{{noload restore}if }def
/testsystemdict{where{systemdict eq{true}{false}ifelse}{false}ifelse}def
/ncolors 1 def
/colorimage where{pop true}{false}ifelse{/ncolors 0
statusdict begin 
/processcolors where{pop pop processcolors}{/deviceinfo where{pop deviceinfo /Colors known
{pop {deviceinfo /Colors get}}if}if}ifelse end def
ncolors 0 ne{/colorimage testsystemdict
/setcolortransfer testsystemdict
/currentcolortransfer testsystemdict
/currentcmykcolor testsystemdict
and and and not{/ncolors 0 def}if}if}if
ncolors dup 1 ne exch dup 3 ne exch 4 ne and and {/ncolors 0 def}if
ncolors 1 eq dup dup not startnoload
{/doclutimage{[{255 mul round cvi bwclut exch get 255 div} /exec load dup currenttransfer exch] 
cvx bind settransfer _w _h 8 _imatrix _ds image}def}if
not endnoload
ncolors dup 3 eq exch 4 eq or
dup dup not startnoload
{/nullproc{{}}def/concatutil{/exec load
7 -1 roll /exec load}def
/defsubclut
{1 add getinterval def}def
/spconcattransfer   
{/Dclut exch def/Cclut exch def/Bclut exch def/Aclut exch def/ncompute exch ld
currentcolortransfer
[{Aclut ncompute}concatutil] cvx
[{Bclut ncompute}concatutil] cvx
[{Cclut ncompute}concatutil] cvx
[{Dclut ncompute}concatutil] cvx
setcolortransfer}def
/setuprgbcluts
{/bit3x rgbclut length 3 sub def
/bit1x bit3x 3 idiv def/rclut rgbclut def
/gclut rclut 1 bit3x defsubclut/bclut rclut 2 bit3x defsubclut}def}if not  
endnoload ncolors 3 eq dup dup not startnoload
{/3compute{exch bit3x mul
round cvi get 255 div}def
/doclutimage{%/rgbclut xdf pop 
setuprgbcluts/3compute rclut gclut bclut dup
spconcattransfer _w _h 8 _imatrix
[/_ds load /exec load /dup load dup]cvx
nullproc nullproc true 3 colorimage}def}if not endnoload ncolors 4 eq dup dup not startnoload
{/stuffclut{cmykindex 3 -1 roll put}def
/ftoint{1 exch sub 255 mul round cvi}def
/4compute { exch bit4x mul round cvi get 255 div } def
/computecmykclut{setuprgbcluts/bit4x rgbclut length 3 idiv 4 mul 4 sub def
/cmykclut bit4x 4 add string def
/cclut cmykclut def
/mclut cclut 1 bit4x defsubclut
/yclut cclut 2 bit4x defsubclut
/kclut cclut 3 bit4x defsubclut
/cmykindex 0 def
0 1 bit1x
{dup /cmykindex exch bit1x exch sub 4 mul def
3 mul dup rclut exch get 255 div exch dup gclut exch get 255 div
exch bclut exch get 255 div
setrgbcolor currentcmykcolor
ftoint kclut stuffclut
ftoint yclut stuffclut
ftoint mclut stuffclut
ftoint cclut stuffclut
}for}def
/doclutimage{invalidcolortable?{computecmykclut}if
/4compute cclut mclut yclut kclut spconcattransfer
_w _h 8 _imatrix[/_ds load /exec load/dup load dup dup] cvx 
nullproc nullproc nullproc true 4 colorimage}def}if
not endnoload
ncolors 0 eq
dup dup not startnoload
{/colorexpand{mystringexp 0 rgbclut
3 copy
7 -1 roll
{3 mul 3 getinterval putinterval exch 3 add exch 3 copy}forall
pop pop pop pop pop}def
/createexpandstr{/mystringexp exch st0 length mul string def}def
/doclutimage{/rgbclut xdf pop 3 createexpandstr _w _h 8 _imatrix
[/_ds load /exec load /colorexpand load /exec load] cvx
false 3 colorimage}def}if not endnoload
level2 { dontloadlevel1 restore }if
level2 not{ save /dontloadlevel2 xdf }if
/rgbclut 0 def
/doclutimage{/hival 255 def 
[/Indexed /DeviceRGB hival rgbclut] setcolorspace
_imagedict dup begin 
/Width _w def 
/Height _h def  
/Decode [0 hival] def  
/ImageMatrix _imatrix def
/BitsPerComponent 8 def 
/Interpolate false def
end image}def
level2 not{ dontloadlevel2 restore }if
%%EndProcSet
/_imagedict 15 dict begin /ImageType 1 def/BitsPerComponent 8 def/Interpolate false def currentdict end def
/hascolor true def
/level2 systemdict /languagelevel known
{languagelevel 2 ge}{false}ifelse def
/foureq {4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and} def
/setupbands{gsave
/_settransfer systemdict /settransfer get def
/_currenttransfer systemdict /currenttransfer get def
/_image systemdict /image get def
/blank 0 _currenttransfer exec
1 _currenttransfer exec eq def
/negative blank{0 _currenttransfer exec 0.5 lt}
{0 _currenttransfer exec 1 _currenttransfer exec gt}ifelse def
/inverted? negative def
/_currentgray systemdict /currentgray get def
hascolor{/$b 0 def} {/$b 5 def} ifelse
/setcmykcolor where{pop 1 0 0 0 setcmykcolor _currentgray 1 exch sub
0 1 0 0 setcmykcolor _currentgray 1 exch sub
0 0 1 0 setcmykcolor _currentgray 1 exch sub
0 0 0 1 setcmykcolor _currentgray 1 exch sub
4 {4 copy} repeat
1 0 0 0 foureq{/$b 1 store}if
0 1 0 0 foureq{/$b 2 store}if
0 0 1 0 foureq{/$b 3 store}if
0 0 0 1 foureq{/$b 4 store}if
0 0 0 0 foureq{/$b 6 store}if}if
blank{/$b 6 store}if
$b 0 eq $b 5 eq or{/$dt 0 def}if/$dt -1 def grestore}def
/doimage{
level2{image}{begin
Width Height BitsPerComponent ImageMatrix
Decode length 2 eq
{/DataSource load end image}{
Decode length 6 eq
{MultipleDataSources{DataSource 0 get DataSource 1 get DataSource 2 get}{/DataSource load}ifelse
MultipleDataSources 3 end DSIColorImage}{
Decode length 8 eq{MultipleDataSources{DataSource 0 get DataSource 1 get
DataSource 2 get DataSource 3 get}{/DataSource load}ifelse
MultipleDataSources 4 end DSIColorImage}if}ifelse
}ifelse
}ifelse}def
/dt{/rgbclut xdf /bwclut xdf}def
/cl{$i setmatrix translate scale
/_w _imagedict /Width get def
/_h _imagedict /Height get def
/_ds _imagedict /DataSource get def
doclutimage} def
/cd{$i setmatrix translate scale
level2{_imagedict /ColorSpace get setcolorspace}if
/_w _imagedict /Width get def
/_h _imagedict /Height get def
/_ds _imagedict /DataSource get def
_imagedict begin
/ImageMatrix _imatrix def
currentdict end
doimage} def
/im{$i setmatrix translate scale 
level2{/DeviceGray setcolorspace 0 setgray}if
/_w _imagedict /Width get def
/_h _imagedict /Height get def
/_ds _imagedict /DataSource get def
_imagedict begin
%/Decode [0 1] def  
%/Width _w def
%/Height _h def
/ImageMatrix _imatrix def
currentdict end 
doimage }def
/colorimage where{pop/DSIColorImage {colorimage} def}{/DSIColorImage{
/$nc xdf pop /proc0 xdf 3 index 2 index mul 7 add 8 div cvi string /st1 xdf
$nc 3 eq{{proc0 dup/st0 xdf 0 exch 3 exch length 3 sub
{dup st0 exch get .3 mul 1 index 1 add st0 exch get .59 mul add 1 index 2 add st0 exch get .11 mul add
cvi exch 3 div cvi exch st1 3 1 roll put}for st1}}{{proc0 dup/st0 xdf 0 exch 4 exch length 4 sub{dup
st0 exch get .3 mul
1 index 1 add st0 exch get .59 mul add
1 index 2 add st0 exch get .11 mul add
1 index 3 add st0 exch get add dup 255.0 gt{pop 255.0}if
255.0 exch sub cvi
exch 4 div cvi exch
st1 3 1 roll put}for st1}}ifelse
image}def}ifelse
/OPIimage{image}def
/$i matrix def
/bi{scale translate $i currentmatrix pop translate scale setupbands}def
/ei{$i setmatrix}def
/ik{$i setmatrix translate scale 
/_w _imagedict /Width get def
/_h _imagedict /Height get def
/_ds _imagedict /DataSource get def
_w _h false _imatrix 5 -1 roll _ds imagemask}def
/rs{2 copy translate
3 -1 roll neg rotate
neg exch neg exch translate
}def
/cs{_cvmtx astore concat} def
/fd{/_fd xdf}def
/_fontMatrix{1 0 0 _fd 0 ne{-1 0 0}{1 0 0}ifelse _cvmtx astore}def
/rf{/_encodindex xdf
FontDirectory exch known {
findfont dup length 1 add dict begin{1 index/FID ne{def}{pop pop}ifelse}forall
dup /FontName exch def FontType 0 ne{/Encoding Encoding 256 array copy def
_encodindex 0 ge{0 _encodArr _encodindex get{dup type/nametype eq{Encoding 2 index 2 index put pop 1 add}
{exch pop}ifelse}forall pop}if}if
currentdict end
definefont pop }{pop pop}ifelse} def
/cvsf{ findfont ftSize 0 0 ftSize _fd 0 ne{-1 mul}if 0 0 _cvmtx astore 
makefont setfont}def
/mf{3 -1 roll findfont 3 1 roll exch ftSize mul exch ftSize mul 0 exch 0 exch 
_fd 0 ne{-1 mul}if 0 0 _cvmtx astore makefont setfont}def
/wrk1 ( ) def
/wdict 16 dict def
/Work75 75 string def
/Nmk{Work75 cvs dup}def
/Npt{put cvn}def
/dhOdh{Nmk 2 79 Npt}def
/dhBdh{Nmk 2 111 Npt}def
/dhSdh{Nmk 2 83 Npt}def
/sfWidth{gsave 0 0 moveto 0 0 lineto 0 0 lineto 0 0 lineto closepath clip stringwidth grestore}def
/fts{/ftSize exch def}def
/mkFT{dup/FontType get 0 eq{dup maxlength dict begin
{1 index/FID ne 2 index /UniqueID ne and{def}{pop pop}ifelse}forall
currentdict end
dup/FDepVector 2 copy get
[exch 6 index exch 6 index exch{mkFT 3 1 roll}forall pop pop] put dup}{/tempFT 12 dict def
tempFT begin
/FontMatrix [1 0 0 1 0 0] def
/FontType 3 def
dup/Encoding get/Encoding exch def
/proc2 2 index def
dup/ft1 exch def
/ft2 1 array def
/FontBBox [0 0 1 1] def
/BuildChar{CVDict begin
exch dup/ftdt xdf begin
wdict begin
/chr xdf/chrst wrk1 dup 0 chr put def
ft2 0 get null eq{ft1 dup length 2 add dict begin
{1 index/FID ne 2 index /UniqueID ne and{def}{pop pop}ifelse}forall
/PaintType 2 def/StrokeWidth .024 0 FontMatrix idtransform pop def
currentdict end
/q exch definefont
ft2 exch 0 exch put}if
ftdt/proc2 get exec end end end}def end tempFT}ifelse
3 index exch
definefont exch pop}def
/mb{dup dhBdh FontDirectory 1 index known
{exch pop}{dup 2 index
findfont{boldproc} exch
mkFT pop pop pop exch pop
}ifelse }def
/mo{dup dhOdh FontDirectory 1 index known
{exch pop}{dup 2 index
findfont{outproc} exch
mkFT pop pop pop exch pop
}ifelse }def
/ms{dup dhSdh FontDirectory 1 index known
{exch pop}{dup 2 index
findfont{ShadChar} exch
mkFT  pop pop pop exch pop
}ifelse }def
/outproc{ft1 setfont
gsave chrst sfWidth grestore
setcharwidth dblsh}def
/boldproc{ft1 setfont
gsave
chrst sfWidth 1 index 0 ne{exch .05 add exch}if
grestore
setcharwidth
ft1 /PaintType get 2 ne
{0 0 moveto gsave ft2 0 get setfont chrst show grestore chrst show}
{0 0 moveto gsave chrst show grestore .05 0 moveto chrst show}ifelse}def
/dblsh{currentcolor currentcolorspace 1.0 setgray
chrst 0 0 moveto show setcolorspace setcolor
ft2 0 get setfont chrst 0 0 moveto show}def
/ShadChar{
ft1 setfont
gsave
chrst sfWidth 1 index 0 ne{exch .05 add exch}if
grestore
setcharwidth
chrst .06 0 moveto show
0 .05 translate dblsh}def
/ts{show}def
/ta{/_letterSpace xdf/_spaceXtra xdf}def
/tf{/_textWidth xdf
/_numSpaces xdf
/_stringLength xdf
dup     stringwidth pop
_letterSpace _stringLength 1 sub mul add
_spaceXtra _numSpaces mul add
_textWidth exch sub /wdif xdf
_spaceXtra 0 32
wdif _stringLength div
_letterSpace add
0 6 -1 roll awidthshow}def
/pb{/_PageSave save def/showpage{}def}def
/pe{_PageSave restore}def
/pm{_pm currentmatrix pop}def
/_pm matrix def
/ps{showpage _pm setmatrix}def
level2{/ef {gsave 6 array astore concat dup execform grestore}def}
{/ef{gsave 6 array astore concat newpath dup begin Matrix concat
BBox dup dup 0 get exch 1 get moveto
dup dup 0 get exch 3 get lineto
dup dup 2 get exch 3 get lineto
dup 2 get exch 1 get lineto closepath
clip newpath PaintProc end grestore}def}ifelse
/bc{save 11 1 roll 10 dict begin /BBox 5 1 roll 4 array astore def
/Matrix 7 1 roll 6 array astore def /FormType 1 def/PaintProc{/pp get exec}def}def
/ec{pop restore}def
/printvm{1 vmreclaim vmstatus pop exch pop (                         )cvs print (\n)print flush}def
/setoverprint where {pop}{/setoverprint{pop}def}ifelse
/sstr { /$sstrs exch def /$sstr exch def /$sstry exch def /$sstrx exch def /Courier findfont $sstrs 
scalefont setfont $sstrx $sstry mt stm 1 -1 scale $sstr show rtm } def
/DSIBeginPaintProc{/pp mark{currentfile token not{}if dup/DSIEndPaintProc
        eq{pop counttomark array astore cvx bind /exec load]cvx def DSIEndPaintProc exit}
        {counttomark 300 gt{counttomark array astore cvx bind /exec load}if}ifelse}loop}def
/DSIEndPaintProc{currentdict end}def
/DSIBeginPaintSubProc {save 11 1 roll 10 dict dup /pD exch def begin 
        /BBox 5 1 roll 4 array astore def /Matrix 7 1 roll 6 array astore def 
        /FormType 1 def /PaintProc { /pp get exec } def /pp} def
/DSIEndPaintSubProc {bind def end pD} def
/iaa {/ix ix ixn add def} def
/ias2 {/igap exch def /_st0 ia ix igap add get def _st0} def
/ias {/st0 ia ix get def iaa st0} def
/i85s {0 ias2 /ASCII85Decode filter st0 readstring pop iaa} def
/irles {0 ias2 /ASCII85Decode filter /RunLengthDecode filter st0 readstring pop iaa} def
initialize
end
%%EndResource
CVDict begin 0 id 1 fd
_encodArr 0
[
39/quotesingle 96/grave
128/bullet/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE/bullet/bullet/bullet
/bullet/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron
/guilsinglright/oe/bullet/bullet/Ydieresis
/bullet/exclamdown/cent/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis
/Aring
/AE/Ccedilla/Egrave/Eacute/Egrave/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis
/aring
/ae/ccedilla/egrave/eacute/ecircumflex/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] put
_encodArr 1
[
39/quotesingle 96/grave
128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/blank/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute
/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex
/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
] put
end
%%EndProlog 
%%IncludeFont: CourierNewPSMT
%%IncludeFont: TimesNewRomanPSMT
CVDict begin
/___FN2 /Courier dup dup findfont dup /CharStrings known {begin CharStrings /Adieresis known { 0 }{-1} ifelse end} {pop -1} ifelse rf
/___FN3 /Times-Roman dup dup findfont dup /CharStrings known {begin CharStrings /Adieresis known { 0 }{-1} ifelse end} {pop -1} ifelse rf
end
0.25 0.25 translate
%%BeginSetup 
CVDict begin

0 id
1 fd
0 263 translate
300 -300 scli
%%EndSetup 
%%BeginPageSetup 
pm
%%EndPageSetup
/DeviceRGB scs
0.0 0.0 0.0 1. f4
0.1250 0.1250 sp
 0 lc
 2 lj
T sa
%page rect: 35 270 346 533 
stm
0.0 0.0 0.0 1. f4
4.1667 4.1667 sp
11.5 lm
 0 lj
np
833.2719 812.0563 mt
1249.9375 957.8893 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
604.1057 957.8893 mt
833.2719 812.0563 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
833.2719 812.0563 mt
1041.6047 666.2234 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
1249.9375 957.8893 mt
1041.6047 666.2234 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
1249.9375 957.8893 mt
687.4389 666.2234 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
604.1057 978.7226 mt
687.4389 666.2234 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
687.4389 666.2234 mt
812.4386 395.3907 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
1041.6047 666.2234 mt
812.4386 395.3907 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
624.939 957.8893 mt
854.1051 541.2237 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
833.2719 812.0563 mt
604.1057 395.3907 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
833.2719 770.3898 mt
1124.9378 541.2237 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
1249.9375 957.8893 mt
854.1051 541.2237 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
1249.9375 957.8893 mt
1041.6047 541.2237 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
1249.9375 957.8893 mt
1124.9378 541.2237 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
1249.9375 957.8893 mt
1249.9375 541.2237 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
1124.9378 541.2237 mt
979.1048 395.3907 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
604.1057 957.8893 mt
604.1057 395.3907 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
687.4389 666.2234 mt
1041.6047 541.2237 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
1041.6047 666.2234 mt
1249.9375 541.2237 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
1249.9375 542.0443 mt
1187.4377 396.2114 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
1041.6047 541.2237 mt
1187.4377 396.2114 li
ds
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 1127.032 544.1385 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 1127.032 544.1385 ep
ds
rtm
stm
stm
49.9999 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
1113.0322 557.0544 mt
(4)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 1252.0317 544.1385 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 1252.0317 544.1385 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
1238.0319 557.0544 mt
(4)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 1. f4
np
1187.4377 395.3907 mt
1083.2712 270.391 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
979.1048 395.3907 mt
1083.2712 270.391 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
708.2722 270.391 mt
897.8659 124.558 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
1083.2712 270.391 mt
897.8659 124.558 li
ds
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 899.9601 126.6522 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 899.9601 126.6522 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
885.9603 139.5681 mt
(1)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 1. f4
np
604.1057 395.3907 mt
708.2722 270.391 li
ds
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 1085.3654 272.4851 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 1085.3654 272.4851 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
1071.3656 285.4011 mt
(2)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 1. f4
np
854.1051 541.2237 mt
979.1048 395.3907 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
812.4386 395.3907 mt
708.2722 270.391 li
ds
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 606.1999 397.4848 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 606.1999 397.4848 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
588.0335 410.4008 mt
(3)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 856.1993 543.3178 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 856.1993 543.3178 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
842.1995 556.2338 mt
(4)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 689.5331 668.3175 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 689.5331 668.3175 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
675.5333 681.2335 mt
(5)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 835.3661 814.1505 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 835.3661 814.1505 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
817.1996 827.0664 mt
(6)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
564.5225 918.3061 647.8556 1001.6392 rp
de
0.0 0.0 0.0 1. f4
np
564.5225 918.3061 647.8556 1001.6392 rp
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
592.1893 972.8887 mt
(0)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
1210.3543 918.3061 1293.6874 1001.6392 rp
de
0.0 0.0 0.0 1. f4
np
1210.3543 918.3061 1293.6874 1001.6392 rp
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
1238.0211 972.8887 mt
(1)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 710.3664 272.4851 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 710.3664 272.4851 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
696.3666 285.4011 mt
(2)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 814.5328 397.4848 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 814.5328 397.4848 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
796.3663 410.4008 mt
(3)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 981.199 397.4848 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 981.199 397.4848 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
963.0326 410.4008 mt
(3)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 1189.5319 397.4848 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 1189.5319 397.4848 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
1171.3654 410.4008 mt
(3)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 1043.6989 543.3178 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 1043.6989 543.3178 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
1029.6991 556.2338 mt
(4)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 1043.6989 668.3175 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 1043.6989 668.3175 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
1029.6991 681.2335 mt
(5)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 1. f4
np
106.2012 416.224 mt
106.2012 124.558 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
210.3676 270.391 mt
106.2012 124.558 li
ds
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 108.2954 126.6522 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 108.2954 126.6522 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
94.2956 139.5681 mt
(1)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 1. f4
np
106.2012 416.224 mt
210.3676 270.391 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
356.2006 957.8893 mt
210.3676 270.391 li
ds
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 212.4618 272.4851 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 212.4618 272.4851 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
198.462 285.4011 mt
(2)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 1. f4
np
106.2012 687.0566 mt
106.2012 395.3907 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
210.3676 541.2237 mt
106.2012 395.3907 li
ds
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 108.2954 397.4848 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 108.2954 397.4848 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
90.1289 410.4008 mt
(3)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 1. f4
np
106.2012 687.0566 mt
210.3676 541.2237 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
356.2006 957.8893 mt
210.3676 541.2237 li
ds
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 212.4618 543.3178 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 212.4618 543.3178 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
198.462 556.2338 mt
(4)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 1. f4
np
104.107 955.7952 mt
104.107 664.1292 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
208.2734 809.9622 mt
104.107 664.1292 li
ds
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 106.2012 666.2234 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 106.2012 666.2234 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
92.2014 679.1393 mt
(5)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 1. f4
np
104.107 955.7952 mt
208.2734 809.9622 li
ds
rtm
stm
0.0 0.0 0.0 1. f4
np
356.2006 957.8893 mt
208.2734 809.9622 li
ds
rtm
stm
0.0 0.0 0.0 0 f4
np
41.6666 41.6666 210.3676 812.0563 ep
de
0.0 0.0 0.0 1. f4
np
41.6666 41.6666 210.3676 812.0563 ep
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
192.2011 824.9723 mt
(6)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
66.6179 918.3061 149.9511 1001.6392 rp
de
0.0 0.0 0.0 1. f4
np
66.6179 918.3061 149.9511 1001.6392 rp
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
94.2848 972.8887 mt
(0)  show
T sa
rtm
rtm
stm
0.0 0.0 0.0 0 f4
np
316.6173 918.3061 399.9504 1001.6392 rp
de
0.0 0.0 0.0 1. f4
np
316.6173 918.3061 399.9504 1001.6392 rp
ds
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
344.2841 972.8887 mt
(1)  show
T sa
rtm
rtm
stm
stm
0.0 0.0 0.0 1. f4
F sa
2.6109 52.0576 mt
(x)  show
T sa
rtm
stm
41.6666 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
32.61 65.0576 mt
(1)  show
T sa
rtm
stm
49.9999 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
57.6093 39.0576 mt
(.)  show
T sa
rtm
stm
0.0 0.0 0.0 1. f4
F sa
87.6084 52.0576 mt
(x)  show
T sa
rtm
stm
41.6666 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
117.6075 65.0576 mt
(2)  show
T sa
rtm
stm
49.9999 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
142.6069 52.0576 mt
(+)  show
T sa
rtm
stm
0.0 0.0 0.0 1. f4
F sa
172.606 52.0576 mt
(x)  show
T sa
rtm
stm
41.6666 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
202.6051 65.0576 mt
(3)  show
T sa
rtm
stm
49.9999 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
227.6045 39.0576 mt
(.)  show
T sa
rtm
stm
0.0 0.0 0.0 1. f4
F sa
257.6035 52.0576 mt
(x)  show
T sa
rtm
stm
41.6666 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
287.6026 65.0576 mt
(4)  show
T sa
rtm
stm
49.9999 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
312.602 52.0576 mt
(+)  show
T sa
rtm
stm
0.0 0.0 0.0 1. f4
F sa
342.6011 52.0576 mt
(x)  show
T sa
rtm
stm
41.6666 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
372.6002 65.0576 mt
(5)  show
T sa
rtm
stm
49.9999 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
397.5996 39.0576 mt
(.)  show
T sa
rtm
stm
0.0 0.0 0.0 1. f4
F sa
427.5987 52.0576 mt
(x)  show
T sa
rtm
stm
41.6666 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
457.5977 65.0576 mt
(6)  show
T sa
rtm
rtm
stm
stm
49.9999 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
665.1093 52.0576 mt
(x)  show
T sa
rtm
stm
41.6666 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
695.1083 65.0576 mt
(1)  show
T sa
rtm
stm
49.9999 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
720.1077 39.0576 mt
(.)  show
T sa
rtm
stm
0.0 0.0 0.0 1. f4
F sa
750.1068 52.0576 mt
(x)  show
T sa
rtm
stm
41.6666 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
780.1059 65.0576 mt
(3)  show
T sa
rtm
stm
49.9999 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
805.1053 52.0576 mt
(+)  show
T sa
rtm
stm
0.0 0.0 0.0 1. f4
F sa
835.1044 52.0576 mt
(x)  show
T sa
rtm
stm
41.6666 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
865.1035 65.0576 mt
(2)  show
T sa
rtm
stm
49.9999 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
890.1028 39.0576 mt
(.)  show
T sa
rtm
stm
0.0 0.0 0.0 1. f4
F sa
920.1019 52.0576 mt
(x)  show
T sa
rtm
stm
41.6666 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
950.101 65.0576 mt
(5)  show
T sa
rtm
stm
49.9999 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
975.1004 52.0576 mt
(+)  show
T sa
rtm
stm
0.0 0.0 0.0 1. f4
F sa
1005.0995 52.0576 mt
(x)  show
T sa
rtm
stm
41.6666 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
1035.0986 65.0576 mt
(3)  show
T sa
rtm
stm
49.9999 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
1060.098 39.0576 mt
(.)  show
T sa
rtm
stm
0.0 0.0 0.0 1. f4
F sa
1090.097 52.0576 mt
(x)  show
T sa
rtm
stm
41.6666 fts
/___FN2 cvsf
0.0 0.0 0.0 1. f4
F sa
1120.0961 65.0576 mt
(6)  show
T sa
rtm
rtm
stm
stm
49.9999 fts
/___FN3 cvsf
0.0 0.0 0.0 1. f4
F sa
292.6122 1081.2217 mt
0 0 ta
(Left = low.  Right = high) 25 6 749.98 tf
T sa
rtm
rtm
terminate

%%EndDocument
 PE 10 /Times-Roman AF
19769 66124 MT
(Figure 2.Example of Argument Ordering Dependency)SH
8200 67915 MT
(Figure 2 shows an extreme case of how the ordering of the arguments can affect the size)
45 W( of the graph denoting a)46 W
7200 69292 MT
(function. The)
394 W( functions)72 W
/Times-Italic SF
17348 XM
(x)SH
8 /Times-Roman AF
17792 69637 MT
(1)SH
10 /Symbol AF
18192 69292 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
18886 69637 MT
(2)SH
10 SS 
19536 69292 MT
(+)SH
/Times-Italic SF
20350 XM
(x)SH
8 /Times-Roman AF
20794 69637 MT
(3)SH
10 /Symbol AF
21194 69292 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
21888 69637 MT
(4)SH
10 SS 
22538 69292 MT
(+)SH
/Times-Italic SF
23352 XM
(x)SH
8 /Times-Roman AF
23796 69637 MT
(5)SH
10 /Symbol AF
24196 69292 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
24890 69637 MT
(6)SH
10 SS 
25612 69292 MT
(and)SH
/Times-Italic SF
27378 XM
(x)SH
8 /Times-Roman AF
27822 69637 MT
(1)SH
10 /Symbol AF
28222 69292 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
28916 69637 MT
(4)SH
10 SS 
29566 69292 MT
(+)SH
/Times-Italic SF
30380 XM
(x)SH
8 /Times-Roman AF
30824 69637 MT
(2)SH
10 /Symbol AF
31224 69292 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
31918 69637 MT
(5)SH
10 SS 
32568 69292 MT
(+)SH
/Times-Italic SF
33382 XM
(x)SH
8 /Times-Roman AF
33826 69637 MT
(3)SH
10 /Symbol AF
34226 69292 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
34920 69637 MT
(6)SH
10 SS 
35642 69292 MT
(differ from each other only)
72 W( by a permutation)71 W
7200 70669 MT
(of their arguments, yet one is denoted by a function graph with 8 vertices while the other requires)
155 W( 16 vertices.)156 W
ES
%%Page: 8 8

61200 79200 BS
0 SI
10 /Times-Roman AF
30350 4286 MT
(8)SH
7200 7886 MT
(Generalizing this to)
66 W( functions of 2)65 W
/Times-Italic SF
(n)SH
/Times-Roman SF
22035 XM
(arguments, the function)65 W
/Times-Italic SF
31951 XM
(x)SH
8 /Times-Roman AF
32395 8231 MT
(1)SH
10 /Symbol AF
32795 7886 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
33489 8231 MT
(2)SH
10 SS 
34139 7886 MT
(+)SH
/Symbol SF
35203 XM
(\327 \327 \327)SH
/Times-Roman SF
36953 XM
(+)SH
/Times-Italic SF
37767 XM
(x)SH
8 /Times-Roman AF
38211 8231 MT
(2)SH
/Times-Italic SF
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 /Symbol AF
39850 7886 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
40544 8231 MT
(2)SH
/Times-Italic SF
(n)SH
10 /Times-Roman AF
41659 7886 MT
(is denoted by a graph of 2)65 W
/Times-Italic SF
(n)SH
/Times-Roman SF
(+2)SH
7200 9300 MT
(vertices, while the function)144 W
/Times-Italic SF
18913 XM
(x)SH
8 /Times-Roman AF
19357 9645 MT
(1)SH
10 /Symbol AF
19757 9300 MT
(\327)SH
/Times-Italic SF
(x)SH
8 SS 
20451 9645 MT
(n)SH
/Times-Roman SF
(+1)SH
10 SS 
21952 9300 MT
(+)SH
/Symbol SF
23016 XM
(\327 \327 \327)SH
/Times-Roman SF
24766 XM
(+)SH
/Times-Italic SF
25580 XM
(x)SH
8 SS 
26024 9645 MT
(n)SH
10 /Symbol AF
26424 9300 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
27118 9645 MT
(2)SH
/Times-Italic SF
(n)SH
10 /Times-Roman AF
28312 9300 MT
(requires 2)144 W
8 /Times-Italic AF
32427 8955 MT
(n)SH
/Times-Roman SF
(+1)SH
10 SS 
34072 9300 MT
(vertices. Consequently,)
539 W( a poor initial choice of)145 W
7200 10677 MT
(input ordering can have very undesirable effects.)SH
8200 13156 MT
(Upon closer examination of)
36 W( these two graphs, we can gain a better intuition of how this problem arises.  Imagine)35 W
7200 14533 MT
(a bit-serial processor that computes a Boolean function by examining the arguments)153 W
/Times-Italic SF
42920 XM
(x)SH
8 /Times-Roman AF
43364 14878 MT
(1)SH
10 SS 
43764 14533 MT
(,)SH
/Times-Italic SF
44417 XM
(x)SH
8 /Times-Roman AF
44861 14878 MT
(2)SH
10 SS 
45261 14533 MT
(, and so)
153 W( on in order,)154 W
7200 15910 MT
(producing output 0 or 1 after the last)
63 W( bit has been read.  Such a processor requires internal storage to store enough)62 W
7200 17287 MT
(information about the arguments it has already seen to correctly deduce the value)
32 W( of the function from the values of)33 W
7200 18664 MT
(the remaining arguments.  Some functions require little intermediate information.  For example, to compute)
150 W( the)149 W
7200 20041 MT
(parity function)
81 W( a bit-serial processor need only store the parity of the arguments it has already seen.  Similarly, to)82 W
7200 21418 MT
(compute the function)87 W
/Times-Italic SF
16210 XM
(x)SH
8 /Times-Roman AF
16654 21763 MT
(1)SH
10 /Symbol AF
17054 21418 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
17748 21763 MT
(2)SH
10 SS 
18398 21418 MT
(+)SH
/Symbol SF
19462 XM
(\327 \327 \327)SH
/Times-Roman SF
21212 XM
(+)SH
/Times-Italic SF
22026 XM
(x)SH
8 /Times-Roman AF
22470 21763 MT
(2)SH
/Times-Italic SF
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 /Symbol AF
24109 21418 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
24803 21763 MT
(2)SH
/Times-Italic SF
(n)SH
10 /Times-Roman AF
25603 21418 MT
(, the processor need only store whether any of the preceding pairs)
87 W( of)86 W
7200 22795 MT
(arguments were both 1, and perhaps the value of the previous argument.  On the other)
11 W( hand, to compute the function)12 W
/Times-Italic SF
7200 24172 MT
(x)SH
8 /Times-Roman AF
7644 24517 MT
(1)SH
10 /Symbol AF
8044 24172 MT
(\327)SH
/Times-Italic SF
(x)SH
8 SS 
8738 24517 MT
(n)SH
/Times-Roman SF
(+1)SH
10 SS 
10239 24172 MT
(+)SH
/Symbol SF
11303 XM
(\327 \327 \327)SH
/Times-Roman SF
13053 XM
(+)SH
/Times-Italic SF
13867 XM
(x)SH
8 SS 
14311 24517 MT
(n)SH
10 /Symbol AF
14711 24172 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
15405 24517 MT
(2)SH
/Times-Italic SF
(n)SH
10 /Times-Roman AF
16205 24172 MT
(, we would need to store the first)93 W
/Times-Italic SF
30308 XM
(n)SH
/Times-Roman SF
31151 XM
(arguments to correctly deduce the value of the)
93 W( function)92 W
7200 25549 MT
(from the remaining arguments.  A function graph can be thought of as such a processor, with)
118 W( the set of vertices)119 W
7200 26926 MT
(having index)84 W
/Times-Italic SF
12812 XM
(i)SH
/Times-Roman SF
13424 XM
(describing the processing of)
84 W( argument)83 W
/Times-Italic SF
29367 XM
(x)SH
8 SS 
29811 27271 MT
(i)SH
10 /Times-Roman AF
30033 26926 MT
(. Rather)
416 W( than storing intermediate information as bits in a)83 W
7200 28303 MT
(memory, however, this information is encoded in the set of possible branch destinations.  That is,)
97 W( if the bit-serial)98 W
7200 29680 MT
(processor requires)43 W
/Times-Italic SF
14839 XM
(b)SH
/Times-Roman SF
15632 XM
(bits to encode information about the first)43 W
/Times-Italic SF
32514 XM
(i)SH
/Times-Roman SF
33084 XM
(arguments, then in any graph for this function there)42 W
7200 31057 MT
(must be at least 2)110 W
8 /Times-Italic AF
14584 30712 MT
(b)SH
10 /Times-Roman AF
15344 31057 MT
(vertices that are)
110 W( either terminal or are nonterminal with index greater than)111 W
/Times-Italic SF
46500 XM
(i)SH
/Times-Roman SF
47139 XM
(having incoming)111 W
7200 32434 MT
(branches from vertices with index less than or equal to)29 W
/Times-Italic SF
29597 XM
(i)SH
/Times-Roman SF
(. For)
308 W( example, the function)29 W
/Times-Italic SF
41381 XM
(x)SH
8 /Times-Roman AF
41825 32779 MT
(1)SH
10 /Symbol AF
42225 32434 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
42919 32779 MT
(4)SH
10 SS 
43569 32434 MT
(+)SH
/Times-Italic SF
44383 XM
(x)SH
8 /Times-Roman AF
44827 32779 MT
(2)SH
10 /Symbol AF
45227 32434 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
45921 32779 MT
(5)SH
10 SS 
46571 32434 MT
(+)SH
/Times-Italic SF
47385 XM
(x)SH
8 /Times-Roman AF
47829 32779 MT
(3)SH
10 /Symbol AF
48229 32434 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
48923 32779 MT
(6)SH
10 SS 
49601 32434 MT
(requires 2)28 W
8 SS 
53600 32089 MT
(3)SH
10 SS 
7200 33811 MT
(branches between vertices)
128 W( with index less than or equal to 3 to vertices which are either terminal or have index)129 W
7200 35188 MT
(greater than 3.  In fact, the first 3 levels of this)
119 W( graph must form a complete binary tree to obtain this degree of)118 W
7200 36565 MT
(branching. In)
466 W( the generalization of this function, the first)108 W
/Times-Italic SF
31443 XM
(n)SH
/Times-Roman SF
32302 XM
(levels of the graph form a complete binary tree, and)109 W
7200 37942 MT
(hence the number of vertices grows exponentially with the number of arguments.)SH
8200 40421 MT
(To view this from a different perspective, consider the family of functions:)SH
/Times-Italic SF
9200 42212 MT
(f)SH
8 SS 
9478 42557 MT
(b)SH
/Times-Roman SF
9878 42902 MT
(1)SH
10278 42557 MT
(, . . . ,)SH
/Times-Italic SF
(b)SH
12478 42902 MT
(n)SH
10 /Times-Roman AF
12878 42212 MT
(\050)SH
/Times-Italic SF
(x)SH
8 SS 
13655 42557 MT
(n)SH
/Times-Roman SF
(+1)SH
10 SS 
14906 42212 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
17600 42557 MT
(2)SH
/Times-Italic SF
(n)SH
10 /Times-Roman AF
18400 42212 MT
(\051 =)436 W
/Times-Italic SF
20669 XM
(b)SH
8 /Times-Roman AF
21169 42557 MT
(1)SH
10 /Symbol AF
21569 42212 MT
(\327)SH
/Times-Italic SF
(x)SH
8 SS 
22263 42557 MT
(n)SH
/Times-Roman SF
(+1)SH
10 SS 
23764 42212 MT
(+)SH
/Symbol SF
24828 XM
(\327 \327 \327)SH
/Times-Roman SF
26578 XM
(+)SH
/Times-Italic SF
27392 XM
(b)SH
8 SS 
27892 42557 MT
(n)SH
10 /Symbol AF
28292 42212 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
28986 42557 MT
(2)SH
/Times-Italic SF
(n)SH
10 /Times-Roman AF
29786 42212 MT
(.)SH
7200 43971 MT
(For all 2)26 W
8 /Times-Italic AF
10641 43626 MT
(n)SH
10 /Times-Roman AF
11317 43971 MT
(possible combinations of the values)26 W
/Times-Italic SF
25974 XM
(b)SH
8 /Times-Roman AF
26474 44316 MT
(1)SH
10 SS 
26874 43971 MT
(, . . . ,)SH
/Times-Italic SF
(b)SH
8 SS 
29624 44316 MT
(n)SH
10 /Times-Roman AF
30024 43971 MT
(, each of these functions is distinct, and hence they must)
26 W( be)25 W
7200 45348 MT
(represented by distinct subgraphs in the graph of the function)SH
/Times-Italic SF
31974 XM
(x)SH
8 /Times-Roman AF
32418 45693 MT
(1)SH
10 /Symbol AF
32818 45348 MT
(\327)SH
/Times-Italic SF
(x)SH
8 SS 
33512 45693 MT
(n)SH
/Times-Roman SF
(+1)SH
10 SS 
35013 45348 MT
(+)SH
/Symbol SF
36077 XM
(\327 \327 \327)SH
/Times-Roman SF
37827 XM
(+)SH
/Times-Italic SF
38641 XM
(x)SH
8 SS 
39085 45693 MT
(n)SH
10 /Symbol AF
39485 45348 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
40179 45693 MT
(2)SH
/Times-Italic SF
(n)SH
10 /Times-Roman AF
40979 45348 MT
(.)SH
8200 47827 MT
(To use our algorithms on anything other than small problems \050e.g. functions of 16 variables or more\051, a user must)19 W
7200 49204 MT
(have an intuition about why certain functions have large function graphs, and how the choice of input ordering may)31 W
7200 50581 MT
(affect this size.  In Section 5 we will present examples of how the structure of the problem)
18 W( to be solved can often be)19 W
7200 51958 MT
(exploited to obtain a suitable input ordering.)SH
11 /Times-Bold AF
7200 55575 MT
(3.3. Inherently Complex Functions)SH
10 /Times-Roman AF
8200 56952 MT
(Some functions cannot)
281 W( be represented efficiently with our representation regardless of the input ordering.)280 W
7200 58329 MT
(Unfortunately, the functions representing the output bits of an)
19 W( integer multiplier fall within this class.  The appendix)20 W
7200 59706 MT
(contains a proof that for any)
187 W( ordering of the inputs)186 W
/Times-Italic SF
29506 XM
(a)SH
8 /Times-Roman AF
30006 60051 MT
(1)SH
10 SS 
30406 59706 MT
(, . . . ,)SH
/Times-Italic SF
(a)SH
8 SS 
33156 60051 MT
(n)SH
10 /Times-Roman AF
33992 59706 MT
(and)SH
/Times-Italic SF
35872 XM
(b)SH
8 /Times-Roman AF
36372 60051 MT
(1)SH
10 SS 
36772 59706 MT
(, . . . ,)SH
/Times-Italic SF
(b)SH
8 SS 
39522 60051 MT
(n)SH
10 /Times-Roman AF
39922 59706 MT
(, at least one of the 2)186 W
/Times-Italic SF
(n)SH
/Times-Roman SF
50278 XM
(functions)SH
7200 61120 MT
(representing the integer product)23 W
/Times-Italic SF
20289 XM
(a)SH
/Symbol SF
20939 XM
(\327)SH
/Times-Italic SF
(b)SH
/Times-Roman SF
21962 XM
(requires a graph containing at least 2)23 W
8 /Times-Italic AF
36819 60775 MT
(n)SH
/Times-Roman SF
(/8)SH
10 SS 
38114 61120 MT
(vertices. While)
296 W( this)
23 W( lower bound is not)24 W
7200 62497 MT
(very large for word sizes encountered in)
270 W( practice \050e.g. it equals 256 for)269 W
/Times-Italic SF
39278 XM
(n)SH
/Times-Roman SF
(=64\051, it indicates the exponential)269 W
7200 63874 MT
(complexity of these functions.  Furthermore, we suspect the true bound is far worse.)SH
8200 66353 MT
(Empirically, we have found that for word sizes)140 W
/Times-Italic SF
28344 XM
(n)SH
/Times-Roman SF
29234 XM
(less than or equal to 8, the)
140 W( output functions of a multiplier)141 W
7200 67730 MT
(require no more)
100 W( than 5000 vertices for a variety of different input orderings.  However, for)99 W
/Times-Italic SF
45332 XM
(n)SH
/Times-Roman SF
46132 XM
(> 10,)
50 W( some outputs)99 W
7200 69107 MT
(require graphs with more than 100,000 vertices and hence become impractical.)SH
8200 71586 MT
(Given the wide variety of techniques used in implementing)
70 W( multipliers \050e.g.)
71 W( [12]\051,)
SH( a canonical form for Boolean)71 W
ES
%%Page: 9 9

61200 79200 BS
0 SI
10 /Times-Roman AF
30350 4286 MT
(9)SH
7200 7886 MT
(functions \050along with a set of manipulation algorithms\051 that could efficiently represent multiplication)
89 W( would be of)88 W
7200 9263 MT
(great interest for circuit verification.  Unfortunately, these functions seem especially intractable.)SH
12 /Times-Bold AF
7200 12947 MT
(4. Operations)SH
10 /Times-Roman AF
8200 14324 MT
(We view a symbolic manipulation)
15 W( program as executing a sequence of commands that build up representations of)16 W
7200 15701 MT
(functions and determine various properties about them.  For example, suppose)
367 W( we wish to construct the)366 W
7200 17078 MT
(representation of)
64 W( the function computed by a combinational logic gate network.  Starting from graphs representing)65 W
7200 18455 MT
(the input)
37 W( variables, we proceed through the network, constructing the function computed at the output of each logic)36 W
7200 19832 MT
(gate by applying the gate operator)
36 W( to the functions at the gate inputs.  In this process, we can take advantage of any)37 W
7200 21209 MT
(repeated structure by first)
145 W( constructing the functions representing the individual subcircuits \050in terms of a set of)144 W
7200 22586 MT
(auxiliary variables\051 and then composing the subcircuit functions to obtain the complete network functions.)
198 W( A)648 W
7200 23963 MT
(similar procedure is followed to construct the representation of the function denoted)
80 W( by some Boolean expression.)79 W
7200 25340 MT
(At this point we can test various properties of the function, such as whether it equals)241 W
/Times-Bold SF
45080 XM
(0)SH
/Times-Roman SF
46072 XM
(\050satisfiability\051 or)242 W
/Times-Bold SF
53500 XM
(1)SH
/Times-Roman SF
7200 26717 MT
(\050tautology\051, or whether it equals the function denoted by some other expression \050equivalence\051.  We can)
39 W( also ask for)38 W
7200 28094 MT
(information about)
184 W( the function's satisfying set, such as to list some member, to list all members, to test some)185 W
7200 29471 MT
(element for membership, etc.)SH
/Times-Bold SF
14400 31246 MT
(Procedure)SH
31039 XM
(Result)SH
41400 XM
(Time Complexity)SH
/Times-Italic SF
14400 32623 MT
(Reduce)SH
23400 XM
(G)SH
/Times-Roman SF
24372 XM
(reduced to canonical form)SH
41400 XM
(O)
150 MX(\050)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
/Symbol SF
43677 XM
(|\327)SH
/Times-Roman SF
(log)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
/Symbol SF
46477 XM
(|)SH
/Times-Roman SF
(\051)SH
/Times-Italic SF
14400 34000 MT
(Apply)SH
23400 XM
(f)SH
8 /Times-Roman AF
23678 34345 MT
(1)SH
10 SS 
24328 34000 MT
(<op>)SH
/Times-Italic SF
26706 XM
(f)SH
8 /Times-Roman AF
26984 34345 MT
(2)SH
10 SS 
41400 34000 MT
(O)
150 MX(\050)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
43527 34345 MT
(1)SH
10 /Symbol AF
43927 34000 MT
(|\327|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
45299 34345 MT
(2)SH
10 /Symbol AF
45699 34000 MT
(|)SH
/Times-Roman SF
(\051)SH
/Times-Italic SF
14400 35377 MT
(Restrict)SH
23400 XM
(f)SH
/Symbol SF
23928 XM
(|)SH
8 /Times-Italic AF
24128 35722 MT
(x)SH
24483 36067 MT
(i)SH
/Times-Roman SF
24705 35722 MT
(=)SH
/Times-Italic SF
(b)SH
10 /Times-Roman AF
41400 35377 MT
(O)
150 MX(\050)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
/Symbol SF
43677 XM
(|\327)SH
/Times-Roman SF
(log)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
/Symbol SF
46477 XM
(|)SH
/Times-Roman SF
(\051)SH
/Times-Italic SF
14400 37136 MT
(Compose)SH
23400 XM
(f)SH
8 /Times-Roman AF
23678 37481 MT
(1)SH
10 /Symbol AF
24228 37136 MT
(|)SH
8 /Times-Italic AF
24428 37481 MT
(x)SH
24783 37826 MT
(i)SH
/Times-Roman SF
25005 37481 MT
(=)SH
/Times-Italic SF
(f)SH
/Times-Roman SF
25678 37826 MT
(2)SH
10 SS 
41400 37136 MT
(O)
150 MX(\050)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
43527 37481 MT
(1)SH
10 /Symbol AF
43927 37136 MT
(|)SH
8 /Times-Roman AF
44127 36791 MT
(2)SH
10 /Symbol AF
44527 37136 MT
(\327|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
45699 37481 MT
(2)SH
10 /Symbol AF
46099 37136 MT
(|)SH
/Times-Roman SF
(\051)SH
/Times-Italic SF
14400 38687 MT
(Satisfy-one)SH
/Times-Roman SF
23400 XM
(some element of)SH
/Times-Italic SF
30260 XM
(S)SH
8 SS 
30760 39032 MT
(f)SH
10 /Times-Roman AF
41400 38687 MT
(O)
150 MX(\050)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(\051)SH
/Times-Italic SF
14400 40064 MT
(Satisfy-all)SH
23400 XM
(S)SH
8 SS 
23900 40409 MT
(f)SH
10 /Times-Roman AF
41400 40064 MT
(O)
150 MX(\050)SH
/Times-Italic SF
(n)SH
/Symbol SF
(\327|)SH
/Times-Italic SF
(S)SH
8 SS 
44055 40409 MT
(f)SH
10 /Symbol AF
44427 40064 MT
(|)SH
/Times-Roman SF
(\051)SH
/Times-Italic SF
14400 41441 MT
(Satisfy-count)SH
/Symbol SF
23400 XM
(|)SH
/Times-Italic SF
(S)SH
8 SS 
24100 41786 MT
(f)SH
10 /Symbol AF
24472 41441 MT
(|)SH
/Times-Roman SF
41400 XM
(O)
150 MX(\050)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
/Symbol SF
43677 XM
(|)SH
/Times-Roman SF
(\051)SH
22920 43051 MT
(Table 1.Summary of Basic Operations)SH
8200 45530 MT
(In this section we will)
223 W( present algorithms to perform basic operations on Boolean functions represented as)222 W
7200 46907 MT
(function graphs as summarized in Table 1.)31 W
8 SS 
24411 46562 MT
(4)SH
10 SS 
25372 46907 MT
(These few basic operations can be combined to perform a wide variety)30 W
7200 48284 MT
(of operations on Boolean functions.  In the table, the)
173 W( function)174 W
/Times-Italic SF
33963 XM
(f)SH
/Times-Roman SF
34815 XM
(is represented by a reduced function graph)174 W
/Times-Italic SF
53278 XM
(G)SH
/Times-Roman SF
7200 49661 MT
(containing)SH
/Symbol SF
11720 XM
(|)SH
/Times-Italic SF
(G)SH
/Symbol SF
12792 XM
(|)SH
/Times-Roman SF
13290 XM
(vertices, and similarly for the functions)48 W
/Times-Italic SF
29548 XM
(f)SH
8 /Times-Roman AF
29826 50006 MT
(1)SH
10 SS 
30524 49661 MT
(and)SH
/Times-Italic SF
32266 XM
(f)SH
8 /Times-Roman AF
32544 50006 MT
(2)SH
10 SS 
32944 49661 MT
(. Our)
346 W( algorithms utilize techniques commonly)
48 W( used)47 W
7200 51038 MT
(in graph algorithms such as ordered)
71 W( traversal, table look-up and vertex encoding.  As the table shows, most of the)72 W
7200 52415 MT
(algorithms have time complexity proportional)
98 W( to the size of the graphs being manipulated.  Hence, as long as the)97 W
7200 53792 MT
(functions of interest can be represented by reasonably small graphs, our algorithms are quite efficient.)SH
11 /Times-Bold AF
7200 57409 MT
(4.1. Data Structures)SH
10 /Times-Roman AF
8200 58786 MT
(We will express our algorithms in a pseudo-Pascal notation.  Each vertex in a)
51 W( function graph is represented by a)52 W
7200 60163 MT
(record declared as follows:)SH
10800 50 7200 65587 UL
6 SS 
8000 66926 MT
(4)SH
8 /Times-Bold AF
8300 67235 MT
(Update:)SH
/Times-Roman SF
11605 XM
(Some of the time complexity entries in this table are not strictly correct.  An extra factor)
75 W( of \050log)76 W
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
/Times-Roman SF
44272 67580 MT
(1)SH
/Symbol SF
44822 67235 MT
(|)SH
/Times-Roman SF
(+log)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
/Times-Roman SF
47193 67580 MT
(2)SH
/Symbol SF
47593 67235 MT
(|)SH
/Times-Roman SF
(\051 should have been)76 W
7200 68304 MT
(included in the time complexity of)20 W
/Times-Italic SF
18558 XM
(Apply)SH
/Times-Roman SF
20644 XM
(and)SH
/Times-Italic SF
22019 XM
(Compose)SH
/Times-Roman SF
25217 XM
(to account for the complexity of reducing)
20 W( the resulting graph.  In later research, Wegener)19 W
7200 69228 MT
(and Sieling showed how to perform BDD)
34 W( reduction in linear time \050)35 W
/Times-Italic SF
(Information Processing Letters 48)35 W
/Times-Roman SF
(, pp. 139-144, 1993.\051  Consequently, all of)35 W
7200 70152 MT
(the log factors can be dropped from the table.  In practice, most BDD implementations use hash tables rather than)
7 W( the sorting method described in)6 W
7200 71076 MT
(this paper.  Assuming retrieving an element from a hash table takes constant time \050a reasonable)
98 W( assumption for a good hash function\051, these)99 W
7200 72000 MT
(implementations also perform BDD reduction in linear time.)SH
ES
%%Page: 10 10

61200 79200 BS
0 SI
10 /Times-Roman AF
30100 4286 MT
(10)SH
9200 7886 MT
(type vertex = record)SH
11718 8991 MT
(low, high: vertex;)SH
11718 10096 MT
(index: 1..n+1;)SH
11718 11201 MT
(val: \0500,1,X\051;)SH
11718 12306 MT
(id: integer;)SH
11718 13411 MT
(mark: boolean;)SH
9200 14516 MT
(end;)SH
7200 16036 MT
(Both nonterminal and terminal vertices are represented by the)
12 W( same type of record, but the field values for a vertex)11 W
/Times-Italic SF
53556 XM
(v)SH
/Times-Roman SF
7200 17413 MT
(depend on the vertex type as given in the following table.)SH
/Times-Bold SF
20516 19007 MT
(Field)SH
26800 XM
(Terminal)SH
40478 XM
(Nonterminal)SH
/Times-Roman SF
20850 20112 MT
(low)SH
28022 XM
(null)SH
/Times-Italic SF
41922 XM
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051)SH
20711 21217 MT
(high)SH
28022 XM
(null)SH
/Times-Italic SF
41756 XM
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051)SH
20489 22322 MT
(index)SH
/Times-Italic SF
28018 XM
(n)SH
/Times-Roman SF
(+1)SH
/Times-Italic SF
41562 XM
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051)SH
20989 23427 MT
(val)SH
/Times-Italic SF
27162 XM
(value)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051)SH
42839 XM
(X)SH
8200 25906 MT
(The id and mark fields contain auxiliary information used by the algorithms.  The id)
151 W( field contains a integer)152 W
7200 27283 MT
(identifier which is unique to that vertex in the graph.  It does not)
60 W( matter how the identifiers are ordered among the)59 W
7200 28660 MT
(vertices, only that they range from 1 up to the number of vertices and that they all be different.)
70 W( The)
391 W( mark field is)71 W
7200 30037 MT
(used to mark which vertices have)
96 W( been visited during a traversal of the graph.  The procedure)95 W
/Times-Italic SF
46366 XM
(Traverse)SH
/Times-Roman SF
50266 XM
(shown in)95 W
7200 31414 MT
(Figure 3 illustrates)
81 W( a general method used by many of our algorithms for traversing a graph and performing some)82 W
7200 32791 MT
(operation on the vertices.  This procedure is called at the top level with the)
97 W( root vertex as argument and with the)96 W
7200 34168 MT
(mark fields of the vertices being either all true or all false.  It)
30 W( then systematically visits every vertex in the graph by)31 W
7200 35545 MT
(recursively visiting the subgraphs rooted by the two children.  As it)
49 W( visits a vertex, it complements the value of the)48 W
7200 36922 MT
(mark field, so that it can later determine whether a child has already been visited by comparing the two marks.  As)
14 W( a)15 W
7200 38299 MT
(vertex is visited, we could perform some operation such as to increment a counter and then set the id field to the)94 W
7200 39676 MT
(value of the counter \050thereby assigning a unique identifier to each vertex.\051  Each vertex is visited exactly once,)
47 W( and)48 W
7200 41053 MT
(assuming the operation at each vertex requires constant time, the complexity of the algorithm)
236 W( is O)
150 235 WX(\050)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
/Symbol SF
51510 XM
(|)SH
/Times-Roman SF
(\051, i.e.)235 W
7200 42430 MT
(proportional to the number of vertices in)
93 W( the graph.  Upon termination, the vertices again all have the same mark)94 W
7200 43807 MT
(value.)SH
9200 45598 MT
(procedure)SH
/Times-Italic SF
13448 XM
(Traverse)SH
/Times-Roman SF
(\050v:vertex\051;)SH
9200 46703 MT
(begin)SH
11718 47808 MT
(v.mark := not v.mark;)SH
11718 48913 MT
(... do something to v ...)SH
11718 50018 MT
(if v.index)SH
/Symbol SF
15951 XM
(\243)SH
/Times-Roman SF
16900 XM
(n)SH
11718 51123 MT
(then begin {v nonterminal})SH
14236 52228 MT
(if v.mark)SH
/Symbol SF
18302 XM
(\271)SH
/Times-Roman SF
19251 XM
(v.low.mark then)SH
/Times-Italic SF
26028 XM
(Traverse)SH
/Times-Roman SF
(\050v.low\051;)SH
14236 53333 MT
(if v.mark)SH
/Symbol SF
18302 XM
(\271)SH
/Times-Roman SF
19251 XM
(v.high.mark then)SH
/Times-Italic SF
26306 XM
(Traverse)SH
/Times-Roman SF
(\050v.high\051;)SH
11718 54438 MT
(end;)SH
9200 55543 MT
(end;)SH
21310 57153 MT
(Figure 3.Implementation of Ordered Traversal)SH
11 /Times-Bold AF
7200 60770 MT
(4.2. Reduction)SH
10 /Times-Roman AF
8200 62147 MT
(The reduction algorithm transforms)
51 W( an arbitrary function graph into a reduced graph denoting the same function.)50 W
7200 63524 MT
(It closely follows an algorithm presented in Example 3.2 of Aho,)
16 W( Hopcroft, and Ullman)
17 W( [13])
SH( for testing whether two)17 W
7200 64901 MT
(trees are isomorphic.)
39 W( Proceeding)
326 W( from the terminal vertices up to the root, a unique integer identifier is assigned to)38 W
7200 66278 MT
(each unique subgraph root.  That is, for each vertex)46 W
/Times-Italic SF
28488 XM
(v)SH
/Times-Roman SF
29228 XM
(it assigns)
46 W( a label)47 W
/Times-Italic SF
36248 XM
(id)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 such that for any two vertices)47 W
/Times-Italic SF
50768 XM
(u)SH
/Times-Roman SF
51565 XM
(and)SH
/Times-Italic SF
53306 XM
(v)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
7200 67655 MT
(id)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(u)SH
/Times-Roman SF
(\051 =)SH
/Times-Italic SF
10208 XM
(id)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 if and only if)33 W
/Times-Italic SF
17955 XM
(f)SH
8 SS 
18233 68000 MT
(u)SH
10 /Times-Roman AF
18633 67655 MT
(=)SH
/Times-Italic SF
(f)SH
8 SS 
19475 68000 MT
(v)SH
10 /Times-Roman AF
20113 67655 MT
(\050in the)
33 W( terminology of Definition 2.\051  Given this labeling, the algorithm constructs a)32 W
7200 69032 MT
(graph with one vertex for each unique label.)SH
8200 71511 MT
(By working from the terminal vertices up to the root, a procedure)
7 W( can label the vertices by the following inductive)8 W
ES
%%Page: 11 11

61200 79200 BS
0 SI
10 /Times-Roman AF
30100 4286 MT
(11)SH
7200 7886 MT
(method. First,)
378 W( two terminal vertices should have the same label if and only if they have the same)
64 W( value attributes.)63 W
7200 9263 MT
(Now assume all terminal)
71 W( vertices and all nonterminal vertices with index greater than)72 W
/Times-Italic SF
42599 XM
(i)SH
/Times-Roman SF
43199 XM
(have been labeled.  As we)72 W
7200 10640 MT
(proceed with the labeling of vertices with index)41 W
/Times-Italic SF
26858 XM
(i)SH
/Times-Roman SF
(, a vertex)41 W
/Times-Italic SF
31202 XM
(v)SH
/Times-Roman SF
31937 XM
(should have)40 W
/Times-Italic SF
37072 XM
(id)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 equal to that of some vertex that has)40 W
7200 12017 MT
(already been labeled if and only if one of two conditions is satisfied.  First, if)36 W
/Times-Italic SF
38829 XM
(id)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051\051 =)SH
/Times-Italic SF
43892 XM
(id)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051\051, then vertex)37 W
/Times-Italic SF
53556 XM
(v)SH
/Times-Roman SF
7200 13394 MT
(is redundant, and we should set)9 W
/Times-Italic SF
20058 XM
(id)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 =)SH
/Times-Italic SF
23010 XM
(id)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051\051. Second,)
268 W( if there is some labeled vertex)8 W
/Times-Italic SF
43552 XM
(u)SH
/Times-Roman SF
44310 XM
(with)SH
/Times-Italic SF
46346 XM
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(u)SH
/Times-Roman SF
(\051 =)SH
/Times-Italic SF
50742 XM
(i)SH
/Times-Roman SF
51278 XM
(having)SH
/Times-Italic SF
7200 14771 MT
(id)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051\051 =)SH
/Times-Italic SF
12263 XM
(id)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(u)SH
/Times-Roman SF
(\051\051, and)84 W
/Times-Italic SF
18680 XM
(id)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051\051 =)SH
/Times-Italic SF
24076 XM
(id)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(u)SH
/Times-Roman SF
(\051\051, then the reduced subgraphs)
84 W( rooted by these two vertices will)85 W
7200 16148 MT
(be isomorphic, and we should set)SH
/Times-Italic SF
20782 XM
(id)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 =)SH
/Times-Italic SF
23734 XM
(id)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(u)SH
/Times-Roman SF
(\051.)SH
8200 18627 MT
(A sketch of the code is shown in Figure 4.  First, the vertices)
89 W( are collected into lists according to their indices.)88 W
7200 20004 MT
(This can be done by a procedure similar to)45 W
/Times-Italic SF
24907 XM
(Traverse)SH
/Times-Roman SF
(, where)
45 W( as a vertex is visited, it is added to the appropriate list.)46 W
7200 21381 MT
(Then we process these lists working from the one containing the terminal vertices up to)
31 W( the one containing the root.)30 W
7200 22758 MT
(For each vertex on a list we create a key of the form \050)13 W
/Times-Italic SF
(value)SH
/Times-Roman SF
(\051 for a terminal vertex or of the form \050)13 W
/Times-Italic SF
(lowid)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
48975 XM
(highid)SH
/Times-Roman SF
(\051 for a)13 W
7200 24135 MT
(nonterminal vertex, where)74 W
/Times-Italic SF
18197 XM
(lowid)SH
/Times-Roman SF
20670 XM
(=)SH
/Times-Italic SF
21484 XM
(id)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051\051 and)74 W
/Times-Italic SF
27575 XM
(highid)SH
/Times-Roman SF
30381 XM
(=)SH
/Times-Italic SF
31195 XM
(id)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051\051. If)
398 W( a vertex has)74 W
/Times-Italic SF
42662 XM
(lowid)SH
/Times-Roman SF
45135 XM
(=)SH
/Times-Italic SF
45949 XM
(highid)SH
/Times-Roman SF
(, then we can)73 W
7200 25512 MT
(immediately set)185 W
/Times-Italic SF
14181 XM
(id)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 =)SH
/Times-Italic SF
17133 XM
(lowid)SH
/Times-Roman SF
(. The)
620 W( remaining vertices are sorted according to)
185 W( their keys.  Aho, Hopcroft, and)186 W
7200 26889 MT
(Ullman describe)
19 W( a linear-time lexicographic sorting method for this based on bucket sorting.  We then work through)18 W
7200 28266 MT
(this sorted list, assigning a given label to all vertices having the same key.  We also select one vertex record for each)9 W
7200 29643 MT
(unique label and store a pointer to this vertex)
21 W( in an array indexed by the label.  These selected vertices will form the)20 W
7200 31020 MT
(final reduced graph.  Hence, we can obtain the reduced version of a subgraph with root)110 W
/Times-Italic SF
44006 XM
(v)SH
/Times-Roman SF
44810 XM
(by accessing)
110 W( the array)111 W
7200 32397 MT
(element with index)83 W
/Times-Italic SF
15364 XM
(id)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 We use this method to modify a vertex record so that its two children are vertices in the)82 W
7200 33774 MT
(reduced graph and to return the root of)
75 W( the final reduced graph when the procedure is exited.  Note that the labels)76 W
7200 35151 MT
(assigned to the vertices by this)
115 W( routine can serve as unique identifiers for later routines.  Assuming a linear-time)114 W
7200 36528 MT
(sorting routine, the processing at each level requires time proportional to the number of vertices at that level.  Each)44 W
7200 37905 MT
(level is processed once, and hence the overall complexity of the algorithm is linear in the number of vertices.)SH
9200 39696 MT
(function)SH
/Times-Italic SF
12783 XM
(Reduce)SH
/Times-Roman SF
(\050v: vertex\051: vertex;)SH
11718 40801 MT
(var subgraph: array[1..)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
/Symbol SF
(|)SH
/Times-Roman SF
(] of vertex;)SH
11718 41906 MT
(var vlist: array[1..n+1] of list;)SH
9200 43011 MT
(begin)SH
11718 44116 MT
(Put each vertex u on list  vlist[u.index])SH
11718 45221 MT
(nextid := 0;)SH
11718 46326 MT
(for i := n+1 downto 1 do)SH
11718 47431 MT
(begin)SH
14236 48536 MT
(Q := empty set;)SH
14236 49641 MT
(for each u in vlist[i] do)SH
16754 50746 MT
(if u.index = n+1)SH
19272 51851 MT
(then add <key,u> to Q where key = \050u.value\051 {terminal vertex})SH
19272 52956 MT
(else if u.low.id = u.high.id)SH
21790 54061 MT
(then u.id := u.low.id {redundant vertex})SH
21790 55166 MT
(else add <key,u> to Q where key = \050u.low.id, u.high.id\051;)SH
14236 56271 MT
(Sort elements of Q by keys;)SH
14236 57376 MT
(oldkey := \050)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1;)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1\051; {unmatchable)
1500 W( key})SH
14236 58481 MT
(for each <key,u> in Q removed in order do)SH
16754 59586 MT
(if key = oldkey)SH
19272 60691 MT
(then u.id:= nextid;)
SH( {matches)
500 W( existing vertex})SH
19272 61796 MT
(else begin  {unique vertex})SH
21790 62901 MT
(nextid := nextid + 1; u.id := nextid; subgraph[nextid] := u;)SH
21790 64006 MT
(u.low := subgraph[u.low.id]; u.high := subgraph[u.high.id];)SH
21790 65111 MT
(oldkey := key;)SH
19272 66216 MT
(end;)SH
11718 67321 MT
(end;)SH
11718 68426 MT
(return\050subgraph[v.id]\051;)SH
9200 69531 MT
(end;)SH
23490 71141 MT
(Figure 4.Implementation of)SH
/Times-Italic SF
34767 XM
(Reduce)SH
ES
%%Page: 12 12

61200 79200 BS
0 SI
10 /Times-Roman AF
30100 4286 MT
(12)SH
1 SS 
15067 7200 22267 PB 
%%BeginDocument: figs/fig5.eps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox:  0 0 341 151 
%%Title: (C:\\Shared Files\\Documents\\BDD Paper\\fig5.CNV) 
%%Creator: Canvas (7.0.1) 
%%CreationDate: (05/09/00 @ 03:51 PM) 
%%DocumentProcSets: Deneba_CanvasCustomColors
%%+ CVDict
%%DocumentFonts: 
%%DocumentNeededFonts: CourierNewPSMT

%%DocumentProcessColors: Cyan Magenta Yellow Black
%%EndComments
%%BeginProlog 
%%BeginResource: procset CVDict
%%Title: Deneba standard graphics
%%Version: 1.02
%%CreationDate: 10/14/99
%%Copyright: (C) 1994, 1999 Deneba Systems. All Rights Reserved
userdict /CVDict 200 dict put
CVDict begin
/invalidcolortable? true def   
/level2 /languagelevel where {pop languagelevel 2 ge}{false} ifelse def
level2 not { /xshow {
0 currentpoint 5 -1 roll {pop pop moveto dup 1 add 3 1 roll exch dup 4 1 roll exch get 0 rmoveto currentpoint} exch kshow 
pop pop pop pop} def } if
/initialize
{CVDict
{dup xcheck{bind}if pop pop}forall
currentscreen /_sp exch def /_sa exch def /_sf exch def
/DefaultScreen{_sf _sa /_sp load}def
/DefaultScreenProc{ /_sp load}def
/setstrokeadjust where{pop true}{false}ifelse
{/sa /setstrokeadjust load def
/li /lineto load def
/mt /moveto load def
/ct /curveto load def
/lh { currentpoint exch pop lineto}bind def
/lv { currentpoint pop exch lineto}bind def}
{/sa{{currentdict StrokeAdjustDict ne{StrokeAdjustDict begin}if}{ currentdict StrokeAdjustDict eq{end}if}ifelse} bind def
userdict /StrokeAdjustDict 100 dict put
StrokeAdjustDict begin
/_xl
{transform
.25 sub round .25 add exch
.25 sub round .25 add exch
itransform
}bind def
/li{ _xl lineto}bind def
/mt{ _xl moveto}bind def
/ct{ _xl curveto}bind def
/lh { dup _xl pop currentpoint exch pop lineto}bind def
/lv { dup _xl pop currentpoint pop exch lineto}bind def
/rp{_xl/cv_b xdf/cv_r xdf
_xl/cv_t xdf/cv_l xdf
cv_l cv_t moveto
cv_r cv_t lineto
cv_r cv_b lineto
cv_l cv_b lineto
closepath
}bind def
end}ifelse}def
/terminate
{userdict /StrokeAdjustDict known {currentdict StrokeAdjustDict eq{end}if}if
currentdict CVDict eq{end}if}def
/mxMax 64 def
/mxStk [mxMax {matrix} repeat]def
/mxIdx 0 def
/stm{mxStk mxIdx 0 lt {/mxIdx 0 store}if mxIdx get currentmatrix pop /mxIdx mxIdx 1 add store}def
/rtm{mxIdx 1 ge {/mxIdx mxIdx 1 sub store mxStk mxIdx get setmatrix}if }def
/scl { 72 div exch 72 div exch scale } def
/scli { 72 exch div exch 72 exch div exch scale } def
/_cvmtx matrix def
/_txtmtx matrix def
/_initmtx matrix def
/xdf{exch def}def
/min{2 copy gt{exch}if pop}def
/max{2 copy lt{exch}if pop}def
/CVvec 256 array def
/T true def
/F false def
/_id 0 def
/_encodindex 0 def
/_encodArr 3 array def
/_fd 0 def
/_textSave null def
/_letterSpace 0 def
/_spaceXtra 0 def
/_PageSave null def
/_penh 1.0 def
/_penv 1.0 def
/save0 null def
/_w 0 def
/_h 0 def
/_ds 0 def
/hct false def
/pw 0 def
/wdif 0 def
/temp 0 def
/currot 0 def
/savehandler null def
/ia 0 def
/ix 0 def
/ixn 1 def
/MultipleDataSources false def 
/debug
{dup /$eps exch not def{/savehandler errordict /handleerror get def
errordict
/handleerror{$error begin
newerror{/newerror false def
showpage
72 72 scale
/Helvetica findfont .2 scalefont setfont
.25 9.6 moveto
(Error: )show
errorname
{dup type/stringtype ne
{(converted error name will end up in this string)cvs}if
show}exec
.25 9.4 moveto
(Offending Command: )show
/command load
{dup type/stringtype ne
{(converted command name will end up in this string)cvs}if
show}exec
.25 9.2 moveto
(Stack: )show
ostack
{.25 currentpoint .2 sub exch pop moveto
dup type/stringtype ne{dup type/integertype eq
1 index type/realtype eq or
1 index type/nametype eq or
not {type}if
(converted stack will end up in this string)cvs}if
show}forall
showpage
CVDict /savehandler get exec}if
end}put}if}def
/lc{setlinecap}def
/lj{setlinejoin}def
/lm{setmiterlimit}def
/lf{setflat}def
/cp{closepath}def
/np{newpath}def
/$psz 30 array def
/$pix 0 def
/gs{gsave $psz dup $pix _penh put $pix 1 add _penv put /$pix $pix 2 add def}def
/gr{grestore/$pix $pix 2 sub def $psz dup $pix get /_penh exch def $pix 1 add get /_penv exch def}def
/li{lineto} def
/lh{currentpoint exch pop lineto}def
/lv{currentpoint pop exch lineto}def
/mt{moveto} def
/_cv_mh{currentpoint exch pop moveto}def
/_cv_mv{currentpoint pop exch moveto}def
/ct{curveto} def
/rt{4 -2 roll moveto
dup 0 exch rlineto
exch 0 rlineto
neg 0 exch rlineto
closepath}def
/_hr
{
{/@err false def currentflat dup{gsave{eoclip}stopped{grestore 2 mul dup setflat dup 200 ge{(%% Canvas:Clip failed\r)print /@err true def pop exit}if}{grestore setflat exit}ifelse}loop @err not {eoclip}if setflat}
{/@err false def currentflat dup{gsave{clip}stopped{grestore 2 mul dup setflat dup 200 ge{(%% Canvas:Clip failed\r)print /@err true def pop exit}if}{grestore setflat exit}ifelse}loop @err not {clip}if setflat}
}def
/_cs null def
/fg{setgray}def
/setcmykcolor where {pop true}{false}ifelse
{/f4{ setcmykcolor}def}{/f4{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll}repeat setrgbcolor pop}def}ifelse
/setcolorspace where {pop true}{false}ifelse
{/scs{ dup setcolorspace /_cs exch def}def/f3{ _cs setcolorspace setcolor}def
}{/f3{ setrgbcolor}def/scs{ pop}def}ifelse
/$cc 5 array def
/findcmykcustomcolor where {pop true}{false}ifelse
not {/findcmykcustomcolor{$cc astore}def}if
/setcustomcolor where {pop true}{false}ifelse
not{/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}def}if
/fc{6 1 roll findcmykcustomcolor exch setcustomcolor}def
/setseparationgray where {pop true}{false}ifelse
not{/setseparationgray {systemdict /setgray get exec} def}if
/sg{ setseparationgray}def
/sp{/_penv xdf/_penh xdf}def
/rp
{/cv_b xdf/cv_r xdf
/cv_t xdf/cv_l xdf
cv_l cv_t moveto
cv_r cv_t lineto
cv_r cv_b lineto
cv_l cv_b lineto
closepath}def
/rr{/yradius xdf
/xradius xdf
/cv_b xdf
/cv_r xdf
/cv_t xdf
/cv_l xdf
cv_l xradius add cv_t moveto
cv_r xradius sub cv_t lineto
_cvmtx currentmatrix pop
currentpoint translate
xradius yradius scale
1 0 1 1 1 arcto 4{pop}repeat
_cvmtx setmatrix
cv_r cv_b yradius sub lineto
_cvmtx currentmatrix pop
currentpoint translate
xradius yradius scale
0 1 -1 1 1 arcto 4{pop}repeat
_cvmtx setmatrix
cv_l xradius add cv_b lineto
_cvmtx currentmatrix pop
currentpoint translate
xradius yradius scale
-1 0 -1 -1 1 arcto 4{pop}repeat
_cvmtx setmatrix
cv_l cv_t yradius add lineto
_cvmtx currentmatrix pop
currentpoint translate
xradius yradius scale
0 -1 1 -1 1 arcto 4{pop}repeat
_cvmtx setmatrix
closepath}def
/ep{_cvmtx currentmatrix pop
translate
scale
1 0 moveto
0 0 1 0 360 arc
closepath
_cvmtx setmatrix}def
/wd{_cvmtx currentmatrix pop
translate
scale
0 0 moveto
0 0 1 5 -2 roll arcn
closepath
_cvmtx setmatrix}def
/as{_cvmtx currentmatrix pop
translate
scale
0 0 1 5 -2 roll arcn
_cvmtx setmatrix}def
/ds
{_penv _penh ne dup{stm _penh dup 0 le{pop 1}if _penv dup 0 le{pop 1}if scale}{_penh setlinewidth}ifelse stroke {rtm}if}def
/df{fill}def
/de{eofill}def
/_gstk 5 array def
/_gstkc 0 def
/_gst{ 9 dict begin level2{/_ccs currentcolorspace def /_cc [currentcolor] def}{/_cc [currentrgbcolor]def}ifelse {currentpoint}stopped {/_cp null def}{ 2 array astore /_cp exch def}ifelse /_cf currentfont def
/_clw currentlinewidth def /_clc currentlinecap def /_clj currentlinejoin def /_cml currentmiterlimit def currentdict end}def
/hs{newpath gsave stm}def
/hc{/_hr load exch get exec newpath}def
/he{_gstk _gstkc _gst put /_gstkc _gstkc 1 add store 
grestore rtm /_gstkc _gstkc 1 sub store _gstk _gstkc get level2{dup /_ccs get setcolorspace dup /_cc get aload pop setcolor}{dup /_cc get aload pop setrgbcolor}ifelse dup /_cp get dup null eq 
not{aload pop moveto}{pop}ifelse dup /_cf get setfont
dup/_clw get setlinewidth dup/_clc get setlinecap dup/_clj get setlinejoin dup/_cml get setmiterlimit pop}def
/id{ /_id xdf}def
/_imatrix{_w 0 0 _h _id 0 ne{neg 0 _h}{0 0}ifelse _cvmtx astore}def
% Copyright (C) 1990, 1991 by Adobe Systems Incorporated.
% All rights reserved.
level2 { save /dontloadlevel1 xdf }if
/startnoload{{/noload save def} if}def
/endnoload{{noload restore}if }def
/testsystemdict{where{systemdict eq{true}{false}ifelse}{false}ifelse}def
/ncolors 1 def
/colorimage where{pop true}{false}ifelse{/ncolors 0
statusdict begin 
/processcolors where{pop pop processcolors}{/deviceinfo where{pop deviceinfo /Colors known
{pop {deviceinfo /Colors get}}if}if}ifelse end def
ncolors 0 ne{/colorimage testsystemdict
/setcolortransfer testsystemdict
/currentcolortransfer testsystemdict
/currentcmykcolor testsystemdict
and and and not{/ncolors 0 def}if}if}if
ncolors dup 1 ne exch dup 3 ne exch 4 ne and and {/ncolors 0 def}if
ncolors 1 eq dup dup not startnoload
{/doclutimage{[{255 mul round cvi bwclut exch get 255 div} /exec load dup currenttransfer exch] 
cvx bind settransfer _w _h 8 _imatrix _ds image}def}if
not endnoload
ncolors dup 3 eq exch 4 eq or
dup dup not startnoload
{/nullproc{{}}def/concatutil{/exec load
7 -1 roll /exec load}def
/defsubclut
{1 add getinterval def}def
/spconcattransfer   
{/Dclut exch def/Cclut exch def/Bclut exch def/Aclut exch def/ncompute exch ld
currentcolortransfer
[{Aclut ncompute}concatutil] cvx
[{Bclut ncompute}concatutil] cvx
[{Cclut ncompute}concatutil] cvx
[{Dclut ncompute}concatutil] cvx
setcolortransfer}def
/setuprgbcluts
{/bit3x rgbclut length 3 sub def
/bit1x bit3x 3 idiv def/rclut rgbclut def
/gclut rclut 1 bit3x defsubclut/bclut rclut 2 bit3x defsubclut}def}if not  
endnoload ncolors 3 eq dup dup not startnoload
{/3compute{exch bit3x mul
round cvi get 255 div}def
/doclutimage{%/rgbclut xdf pop 
setuprgbcluts/3compute rclut gclut bclut dup
spconcattransfer _w _h 8 _imatrix
[/_ds load /exec load /dup load dup]cvx
nullproc nullproc true 3 colorimage}def}if not endnoload ncolors 4 eq dup dup not startnoload
{/stuffclut{cmykindex 3 -1 roll put}def
/ftoint{1 exch sub 255 mul round cvi}def
/4compute { exch bit4x mul round cvi get 255 div } def
/computecmykclut{setuprgbcluts/bit4x rgbclut length 3 idiv 4 mul 4 sub def
/cmykclut bit4x 4 add string def
/cclut cmykclut def
/mclut cclut 1 bit4x defsubclut
/yclut cclut 2 bit4x defsubclut
/kclut cclut 3 bit4x defsubclut
/cmykindex 0 def
0 1 bit1x
{dup /cmykindex exch bit1x exch sub 4 mul def
3 mul dup rclut exch get 255 div exch dup gclut exch get 255 div
exch bclut exch get 255 div
setrgbcolor currentcmykcolor
ftoint kclut stuffclut
ftoint yclut stuffclut
ftoint mclut stuffclut
ftoint cclut stuffclut
}for}def
/doclutimage{invalidcolortable?{computecmykclut}if
/4compute cclut mclut yclut kclut spconcattransfer
_w _h 8 _imatrix[/_ds load /exec load/dup load dup dup] cvx 
nullproc nullproc nullproc true 4 colorimage}def}if
not endnoload
ncolors 0 eq
dup dup not startnoload
{/colorexpand{mystringexp 0 rgbclut
3 copy
7 -1 roll
{3 mul 3 getinterval putinterval exch 3 add exch 3 copy}forall
pop pop pop pop pop}def
/createexpandstr{/mystringexp exch st0 length mul string def}def
/doclutimage{/rgbclut xdf pop 3 createexpandstr _w _h 8 _imatrix
[/_ds load /exec load /colorexpand load /exec load] cvx
false 3 colorimage}def}if not endnoload
level2 { dontloadlevel1 restore }if
level2 not{ save /dontloadlevel2 xdf }if
/rgbclut 0 def
/doclutimage{/hival 255 def 
[/Indexed /DeviceRGB hival rgbclut] setcolorspace
_imagedict dup begin 
/Width _w def 
/Height _h def  
/Decode [0 hival] def  
/ImageMatrix _imatrix def
/BitsPerComponent 8 def 
/Interpolate false def
end image}def
level2 not{ dontloadlevel2 restore }if
%%EndProcSet
/_imagedict 15 dict begin /ImageType 1 def/BitsPerComponent 8 def/Interpolate false def currentdict end def
/hascolor true def
/level2 systemdict /languagelevel known
{languagelevel 2 ge}{false}ifelse def
/foureq {4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and} def
/setupbands{gsave
/_settransfer systemdict /settransfer get def
/_currenttransfer systemdict /currenttransfer get def
/_image systemdict /image get def
/blank 0 _currenttransfer exec
1 _currenttransfer exec eq def
/negative blank{0 _currenttransfer exec 0.5 lt}
{0 _currenttransfer exec 1 _currenttransfer exec gt}ifelse def
/inverted? negative def
/_currentgray systemdict /currentgray get def
hascolor{/$b 0 def} {/$b 5 def} ifelse
/setcmykcolor where{pop 1 0 0 0 setcmykcolor _currentgray 1 exch sub
0 1 0 0 setcmykcolor _currentgray 1 exch sub
0 0 1 0 setcmykcolor _currentgray 1 exch sub
0 0 0 1 setcmykcolor _currentgray 1 exch sub
4 {4 copy} repeat
1 0 0 0 foureq{/$b 1 store}if
0 1 0 0 foureq{/$b 2 store}if
0 0 1 0 foureq{/$b 3 store}if
0 0 0 1 foureq{/$b 4 store}if
0 0 0 0 foureq{/$b 6 store}if}if
blank{/$b 6 store}if
$b 0 eq $b 5 eq or{/$dt 0 def}if/$dt -1 def grestore}def
/doimage{
level2{image}{begin
Width Height BitsPerComponent ImageMatrix
Decode length 2 eq
{/DataSource load end image}{
Decode length 6 eq
{MultipleDataSources{DataSource 0 get DataSource 1 get DataSource 2 get}{/DataSource load}ifelse
MultipleDataSources 3 end DSIColorImage}{
Decode length 8 eq{MultipleDataSources{DataSource 0 get DataSource 1 get
DataSource 2 get DataSource 3 get}{/DataSource load}ifelse
MultipleDataSources 4 end DSIColorImage}if}ifelse
}ifelse
}ifelse}def
/dt{/rgbclut xdf /bwclut xdf}def
/cl{$i setmatrix translate scale
/_w _imagedict /Width get def
/_h _imagedict /Height get def
/_ds _imagedict /DataSource get def
doclutimage} def
/cd{$i setmatrix translate scale
level2{_imagedict /ColorSpace get setcolorspace}if
/_w _imagedict /Width get def
/_h _imagedict /Height get def
/_ds _imagedict /DataSource get def
_imagedict begin
/ImageMatrix _imatrix def
currentdict end
doimage} def
/im{$i setmatrix translate scale 
level2{/DeviceGray setcolorspace 0 setgray}if
/_w _imagedict /Width get def
/_h _imagedict /Height get def
/_ds _imagedict /DataSource get def
_imagedict begin
%/Decode [0 1] def  
%/Width _w def
%/Height _h def
/ImageMatrix _imatrix def
currentdict end 
doimage }def
/colorimage where{pop/DSIColorImage {colorimage} def}{/DSIColorImage{
/$nc xdf pop /proc0 xdf 3 index 2 index mul 7 add 8 div cvi string /st1 xdf
$nc 3 eq{{proc0 dup/st0 xdf 0 exch 3 exch length 3 sub
{dup st0 exch get .3 mul 1 index 1 add st0 exch get .59 mul add 1 index 2 add st0 exch get .11 mul add
cvi exch 3 div cvi exch st1 3 1 roll put}for st1}}{{proc0 dup/st0 xdf 0 exch 4 exch length 4 sub{dup
st0 exch get .3 mul
1 index 1 add st0 exch get .59 mul add
1 index 2 add st0 exch get .11 mul add
1 index 3 add st0 exch get add dup 255.0 gt{pop 255.0}if
255.0 exch sub cvi
exch 4 div cvi exch
st1 3 1 roll put}for st1}}ifelse
image}def}ifelse
/OPIimage{image}def
/$i matrix def
/bi{scale translate $i currentmatrix pop translate scale setupbands}def
/ei{$i setmatrix}def
/ik{$i setmatrix translate scale 
/_w _imagedict /Width get def
/_h _imagedict /Height get def
/_ds _imagedict /DataSource get def
_w _h false _imatrix 5 -1 roll _ds imagemask}def
/rs{2 copy translate
3 -1 roll neg rotate
neg exch neg exch translate
}def
/cs{_cvmtx astore concat} def
/fd{/_fd xdf}def
/_fontMatrix{1 0 0 _fd 0 ne{-1 0 0}{1 0 0}ifelse _cvmtx astore}def
/rf{/_encodindex xdf
FontDirectory exch known {
findfont dup length 1 add dict begin{1 index/FID ne{def}{pop pop}ifelse}forall
dup /FontName exch def FontType 0 ne{/Encoding Encoding 256 array copy def
_encodindex 0 ge{0 _encodArr _encodindex get{dup type/nametype eq{Encoding 2 index 2 index put pop 1 add}
{exch pop}ifelse}forall pop}if}if
currentdict end
definefont pop }{pop pop}ifelse} def
/cvsf{ findfont ftSize 0 0 ftSize _fd 0 ne{-1 mul}if 0 0 _cvmtx astore 
makefont setfont}def
/mf{3 -1 roll findfont 3 1 roll exch ftSize mul exch ftSize mul 0 exch 0 exch 
_fd 0 ne{-1 mul}if 0 0 _cvmtx astore makefont setfont}def
/wrk1 ( ) def
/wdict 16 dict def
/Work75 75 string def
/Nmk{Work75 cvs dup}def
/Npt{put cvn}def
/dhOdh{Nmk 2 79 Npt}def
/dhBdh{Nmk 2 111 Npt}def
/dhSdh{Nmk 2 83 Npt}def
/sfWidth{gsave 0 0 moveto 0 0 lineto 0 0 lineto 0 0 lineto closepath clip stringwidth grestore}def
/fts{/ftSize exch def}def
/mkFT{dup/FontType get 0 eq{dup maxlength dict begin
{1 index/FID ne 2 index /UniqueID ne and{def}{pop pop}ifelse}forall
currentdict end
dup/FDepVector 2 copy get
[exch 6 index exch 6 index exch{mkFT 3 1 roll}forall pop pop] put dup}{/tempFT 12 dict def
tempFT begin
/FontMatrix [1 0 0 1 0 0] def
/FontType 3 def
dup/Encoding get/Encoding exch def
/proc2 2 index def
dup/ft1 exch def
/ft2 1 array def
/FontBBox [0 0 1 1] def
/BuildChar{CVDict begin
exch dup/ftdt xdf begin
wdict begin
/chr xdf/chrst wrk1 dup 0 chr put def
ft2 0 get null eq{ft1 dup length 2 add dict begin
{1 index/FID ne 2 index /UniqueID ne and{def}{pop pop}ifelse}forall
/PaintType 2 def/StrokeWidth .024 0 FontMatrix idtransform pop def
currentdict end
/q exch definefont
ft2 exch 0 exch put}if
ftdt/proc2 get exec end end end}def end tempFT}ifelse
3 index exch
definefont exch pop}def
/mb{dup dhBdh FontDirectory 1 index known
{exch pop}{dup 2 index
findfont{boldproc} exch
mkFT pop pop pop exch pop
}ifelse }def
/mo{dup dhOdh FontDirectory 1 index known
{exch pop}{dup 2 index
findfont{outproc} exch
mkFT pop pop pop exch pop
}ifelse }def
/ms{dup dhSdh FontDirectory 1 index known
{exch pop}{dup 2 index
findfont{ShadChar} exch
mkFT  pop pop pop exch pop
}ifelse }def
/outproc{ft1 setfont
gsave chrst sfWidth grestore
setcharwidth dblsh}def
/boldproc{ft1 setfont
gsave
chrst sfWidth 1 index 0 ne{exch .05 add exch}if
grestore
setcharwidth
ft1 /PaintType get 2 ne
{0 0 moveto gsave ft2 0 get setfont chrst show grestore chrst show}
{0 0 moveto gsave chrst show grestore .05 0 moveto chrst show}ifelse}def
/dblsh{currentcolor currentcolorspace 1.0 setgray
chrst 0 0 moveto show setcolorspace setcolor
ft2 0 get setfont chrst 0 0 moveto show}def
/ShadChar{
ft1 setfont
gsave
chrst sfWidth 1 index 0 ne{exch .05 add exch}if
grestore
setcharwidth
chrst .06 0 moveto show
0 .05 translate dblsh}def
/ts{show}def
/ta{/_letterSpace xdf/_spaceXtra xdf}def
/tf{/_textWidth xdf
/_numSpaces xdf
/_stringLength xdf
dup     stringwidth pop
_letterSpace _stringLength 1 sub mul add
_spaceXtra _numSpaces mul add
_textWidth exch sub /wdif xdf
_spaceXtra 0 32
wdif _stringLength div
_letterSpace add
0 6 -1 roll awidthshow}def
/pb{/_PageSave save def/showpage{}def}def
/pe{_PageSave restore}def
/pm{_pm currentmatrix pop}def
/_pm matrix def
/ps{showpage _pm setmatrix}def
level2{/ef {gsave 6 array astore concat dup execform grestore}def}
{/ef{gsave 6 array astore concat newpath dup begin Matrix concat
BBox dup dup 0 get exch 1 get moveto
dup dup 0 get exch 3 get lineto
dup dup 2 get exch 3 get lineto
dup 2 get exch 1 get lineto closepath
clip newpath PaintProc end grestore}def}ifelse
/bc{save 11 1 roll 10 dict begin /BBox 5 1 roll 4 array astore def
/Matrix 7 1 roll 6 array astore def /FormType 1 def/PaintProc{/pp get exec}def}def
/ec{pop restore}def
/printvm{1 vmreclaim vmstatus pop exch pop (                         )cvs print (\n)print flush}def
/setoverprint where {pop}{/setoverprint{pop}def}ifelse
/sstr { /$sstrs exch def /$sstr exch def /$sstry exch def /$sstrx exch def /Courier findfont $sstrs 
scalefont setfont $sstrx $sstry mt stm 1 -1 scale $sstr show rtm } def
/DSIBeginPaintProc{/pp mark{currentfile token not{}if dup/DSIEndPaintProc
        eq{pop counttomark array astore cvx bind /exec load]cvx def DSIEndPaintProc exit}
        {counttomark 300 gt{counttomark array astore cvx bind /exec load}if}ifelse}loop}def
/DSIEndPaintProc{currentdict end}def
/DSIBeginPaintSubProc {save 11 1 roll 10 dict dup /pD exch def begin 
        /BBox 5 1 roll 4 array astore def /Matrix 7 1 roll 6 array astore def 
        /FormType 1 def /PaintProc { /pp get exec } def /pp} def
/DSIEndPaintSubProc {bind def end pD} def
/iaa {/ix ix ixn add def} def
/ias2 {/igap exch def /_st0 ia ix igap add get def _st0} def
/ias {/st0 ia ix get def iaa st0} def
/i85s {0 ias2 /ASCII85Decode filter st0 readstring pop iaa} def
/irles {0 ias2 /ASCII85Decode filter /RunLengthDecode filter st0 readstring pop iaa} def
initialize
end
%%EndResource
CVDict begin 0 id 1 fd
_encodArr 0
[
39/quotesingle 96/grave
128/bullet/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE/bullet/bullet/bullet
/bullet/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron
/guilsinglright/oe/bullet/bullet/Ydieresis
/bullet/exclamdown/cent/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis
/Aring
/AE/Ccedilla/Egrave/Eacute/Egrave/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis
/aring
/ae/ccedilla/egrave/eacute/ecircumflex/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] put
_encodArr 1
[
39/quotesingle 96/grave
128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/blank/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute
/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex
/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
] put
end
%%EndProlog 
%%IncludeFont: CourierNewPSMT
CVDict begin
/___FN2 /CourierNewPSMT dup dup findfont dup /CharStrings known {begin CharStrings /Adieresis known { -1 }{-1} ifelse end} {pop -1} ifelse rf
end
0.25 0.25 translate
%%BeginSetup 
CVDict begin

0 id
1 fd
0 151 translate
300 -300 scli
%%EndSetup 
%%BeginPageSetup 
pm
%%EndPageSetup
/DeviceCMYK scs
0 0 0 1. f4
0.1250 0.1250 sp
 0 lc
 2 lj
T sa
%page rect: 160 309 501 461 
stm
0 0 0 1. f4
4.1667 4.1667 sp
11.5 lm
 0 lj
np
332.8565 43.7608 mt
207.8568 210.427 li
ds
rtm
stm
0 0 0 1. f4
np
332.8565 43.7608 mt
457.8562 210.427 li
ds
rtm
stm
0 0 0 1. f4
np
457.8562 210.427 mt
582.8559 377.0933 li
ds
rtm
stm
0 0 0 1. f4
np
582.8559 377.0933 mt
624.5225 543.7595 li
ds
rtm
stm
0 0 0 1. f4
np
457.8562 210.427 mt
332.8565 377.0933 li
ds
rtm
stm
0 0 0 1. f4
np
582.8559 377.0933 mt
457.8562 543.7595 li
ds
rtm
stm
0 0 0 1. f4
np
332.8565 377.0933 mt
291.1899 543.7595 li
ds
rtm
stm
0 0 0 1. f4
np
207.8568 210.427 mt
124.5237 543.7595 li
ds
rtm
stm
0 0 0 1. f4
np
207.8568 210.427 mt
332.8565 377.0933 li
ds
rtm
stm
0 0 0 1. f4
np
332.8565 377.0933 mt
457.8562 543.7595 li
ds
rtm
stm
0 0 0 0 f4
np
41.6666 41.6666 332.8565 43.7608 ep
de
0 0 0 1. f4
np
41.6666 41.6666 332.8565 43.7608 ep
ds
rtm
stm
stm
41.6666 fts
/___FN2 cvsf
0 0 0 1. f4
F sa
321.3537 54.1769 mt
(1)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
41.6666 41.6666 207.8568 210.427 ep
de
0 0 0 1. f4
np
41.6666 41.6666 207.8568 210.427 ep
ds
rtm
stm
stm
0 0 0 1. f4
F sa
196.354 220.8432 mt
(2)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
41.6666 41.6666 457.8562 210.427 ep
de
0 0 0 1. f4
np
41.6666 41.6666 457.8562 210.427 ep
ds
rtm
stm
stm
0 0 0 1. f4
F sa
446.3534 220.8432 mt
(2)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
41.6666 41.6666 332.8565 377.0933 ep
de
0 0 0 1. f4
np
41.6666 41.6666 332.8565 377.0933 ep
ds
rtm
stm
stm
0 0 0 1. f4
F sa
321.3537 387.5094 mt
(3)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
41.6666 41.6666 582.8559 377.0933 ep
de
0 0 0 1. f4
np
41.6666 41.6666 582.8559 377.0933 ep
ds
rtm
stm
stm
0 0 0 1. f4
F sa
571.3531 387.5094 mt
(3)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
84.9404 504.1763 168.2736 587.5094 rp
de
0 0 0 1. f4
np
84.9404 504.1763 168.2736 587.5094 rp
ds
rtm
stm
stm
0 0 0 1. f4
F sa
113.0209 554.1757 mt
(0)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
249.5234 502.093 332.8565 585.4261 rp
de
0 0 0 1. f4
np
249.5234 502.093 332.8565 585.4261 rp
ds
rtm
stm
stm
0 0 0 1. f4
F sa
279.6872 554.1757 mt
(1)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
418.273 504.1763 501.6061 587.5094 rp
de
0 0 0 1. f4
np
418.273 504.1763 501.6061 587.5094 rp
ds
rtm
stm
stm
0 0 0 1. f4
F sa
446.3534 554.1757 mt
(0)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
584.9392 504.1763 668.2724 587.5094 rp
de
0 0 0 1. f4
np
584.9392 504.1763 668.2724 587.5094 rp
ds
rtm
stm
stm
0 0 0 1. f4
F sa
613.0197 554.1757 mt
(1)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
374.5231 35.4269 mt
(\(4,3\)) [25.00 25.00 25.00 25.00 0 ] xshow
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
499.5228 202.0932 mt
(\(3,3\)) [25.00 25.00 25.00 25.00 0 ] xshow
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
166.1922 368.7595 mt
(\(1,2\)) [25.00 25.00 25.00 25.00 0 ] xshow
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
41.1925 202.0932 mt
(\(1,3\)) [25.00 25.00 25.00 25.00 0 ] xshow
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
87.0244 618.7589 mt
(\(0\)) [25.00 25.00 0 ] xshow
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
253.6906 618.7589 mt
(\(1\)) [25.00 25.00 0 ] xshow
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
420.3569 618.7589 mt
(\(0\)) [25.00 25.00 0 ] xshow
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
587.0231 618.7589 mt
(\(1\)) [25.00 25.00 0 ] xshow
T sa
rtm
rtm
stm
stm
37.4999 fts
/___FN2 cvsf
0 0 0 1. f4
F sa
239.2736 115.4268 mt
(0)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
405.9398 115.4268 mt
(1)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
530.9395 282.093 mt
(1)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
635.1059 448.7593 mt
(1)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
135.1072 282.093 mt
(0)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
364.2733 282.093 mt
(0)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
489.273 448.7593 mt
(0)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
405.9398 448.7593 mt
(0)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
280.9401 282.093 mt
(1)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
280.9401 448.7593 mt
(1)  show
T sa
rtm
rtm
stm
stm
41.6666 fts
/___FN2 cvsf
0 0 0 1. f4
F sa
624.5225 368.7595 mt
(\(1,2\)) [25.00 25.00 25.00 25.00 0 ] xshow
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
770.3554 77.0935 mt
(Key) [25.00 25.00 0 ] xshow
T sa
rtm
stm
F sa
920.3551 77.0935 mt
(Label) [25.00 25.00 25.00 25.00 0 ] xshow
T sa
rtm
stm
F sa
770.3554 121.6758 mt
(\(0\)) [25.00 25.00 0 ] xshow
T sa
rtm
stm
F sa
920.3551 121.6758 mt
(1)  show
T sa
rtm
stm
F sa
770.3554 166.258 mt
(\(1\)) [25.00 25.00 0 ] xshow
T sa
rtm
stm
F sa
920.3551 166.258 mt
(2)  show
T sa
rtm
stm
F sa
770.3554 210.8403 mt
(\(1,2\)) [25.00 25.00 25.00 25.00 0 ] xshow
T sa
rtm
stm
F sa
920.3551 210.8403 mt
(3)  show
T sa
rtm
stm
F sa
770.3554 255.4225 mt
(\(1,3\)) [25.00 25.00 25.00 25.00 0 ] xshow
T sa
rtm
stm
F sa
920.3551 255.4225 mt
(4)  show
T sa
rtm
stm
F sa
770.3554 300.0048 mt
(\(3,3\)) [25.00 25.00 25.00 25.00 0 ] xshow
T sa
rtm
stm
F sa
920.3551 300.0048 mt
(3)  show
T sa
rtm
stm
F sa
770.3554 344.5871 mt
(\(4,3\)) [25.00 25.00 25.00 25.00 0 ] xshow
T sa
rtm
stm
F sa
920.3551 344.5871 mt
(5)  show
T sa
rtm
rtm
stm
0 0 0 1. f4
np
1249.5209 43.7608 mt
1168.5316 212.5212 li
ds
rtm
stm
0 0 0 1. f4
np
1249.5209 43.7608 mt
1332.8541 377.0933 li
ds
rtm
stm
0 0 0 1. f4
np
1332.8541 377.0933 mt
1124.5212 543.7595 li
ds
rtm
stm
0 0 0 1. f4
np
1168.5316 212.5212 mt
1124.5212 543.7595 li
ds
rtm
stm
0 0 0 1. f4
np
1168.5316 212.5212 mt
1332.8541 377.0933 li
ds
rtm
stm
0 0 0 1. f4
np
1332.8541 377.0933 mt
1374.5206 543.7595 li
ds
rtm
stm
0 0 0 0 f4
np
41.6666 41.6666 1251.8647 45.855 ep
de
0 0 0 1. f4
np
41.6666 41.6666 1251.8647 45.855 ep
ds
rtm
stm
stm
0 0 0 1. f4
F sa
1240.3619 56.2711 mt
(1)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
41.6666 41.6666 1168.5316 212.5212 ep
de
0 0 0 1. f4
np
41.6666 41.6666 1168.5316 212.5212 ep
ds
rtm
stm
stm
0 0 0 1. f4
F sa
1157.0288 222.9374 mt
(2)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
41.6666 41.6666 1335.1978 379.1875 ep
de
0 0 0 1. f4
np
41.6666 41.6666 1335.1978 379.1875 ep
ds
rtm
stm
stm
0 0 0 1. f4
F sa
1323.695 389.6036 mt
(3)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
1087.2818 504.1763 1170.6149 587.5094 rp
de
0 0 0 1. f4
np
1087.2818 504.1763 1170.6149 587.5094 rp
ds
rtm
stm
stm
0 0 0 1. f4
F sa
1115.3622 554.1757 mt
(0)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
1335.1978 504.1763 1418.5309 587.5094 rp
de
0 0 0 1. f4
np
1335.1978 504.1763 1418.5309 587.5094 rp
ds
rtm
stm
stm
0 0 0 1. f4
F sa
1365.3616 556.259 mt
(1)  show
T sa
rtm
rtm
stm
stm
37.4999 fts
/___FN2 cvsf
0 0 0 1. f4
F sa
1176.7713 115.4268 mt
(0)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
1301.771 115.4268 mt
(1)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
1364.2708 448.7593 mt
(1)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
1114.2714 282.093 mt
(0)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
1218.4379 448.7593 mt
(0)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
1260.1044 282.093 mt
(1)  show
T sa
rtm
rtm
terminate

%%EndDocument
 PE 10 SS 
22628 23877 MT
(Figure 5.Reduction Algorithm Example)SH
8200 26356 MT
(Figure 5 shows an example of how the reduction algorithm works.)
39 W( Next)
326 W( to each vertex we show the key and the)38 W
7200 27733 MT
(label generated during the labeling)
55 W( process.  Observe that both vertices with index 3 have the same key, and hence)56 W
7200 29110 MT
(the right hand vertex with index 2 is redundant.)SH
11 /Times-Bold AF
7200 32727 MT
(4.3. Apply)SH
10 /Times-Roman AF
8200 34104 MT
(The procedure)148 W
/Times-Italic SF
14549 XM
(Apply)SH
/Times-Roman SF
17280 XM
(provides the basic method for creating the representation of a function according)
148 W( to the)147 W
7200 35481 MT
(operators in a Boolean expression or logic gate network.  It takes graphs representing functions)75 W
/Times-Italic SF
46651 XM
(f)SH
8 /Times-Roman AF
46929 35826 MT
(1)SH
10 SS 
47654 35481 MT
(and)SH
/Times-Italic SF
49423 XM
(f)SH
8 /Times-Roman AF
49701 35826 MT
(2)SH
10 SS 
50101 35481 MT
(, a binary)75 W
7200 36858 MT
(operator <op> \050i.e. any Boolean function of 2 arguments\051 and produces a reduced graph)
88 W( representing the function)87 W
/Times-Italic SF
7200 38235 MT
(f)SH
8 /Times-Roman AF
7478 38580 MT
(1)SH
10 SS 
8128 38235 MT
(<)SH
/Times-Italic SF
(op)SH
/Times-Roman SF
(>)SH
/Times-Italic SF
10506 XM
(f)SH
8 /Times-Roman AF
10784 38580 MT
(2)SH
10 SS 
11434 38235 MT
(defined as)SH
11200 40026 MT
([)SH
/Times-Italic SF
(f)SH
8 /Times-Roman AF
11811 40371 MT
(1)SH
10 SS 
12461 40026 MT
(<)SH
/Times-Italic SF
(op)SH
/Times-Roman SF
(>)SH
/Times-Italic SF
14839 XM
(f)SH
8 /Times-Roman AF
15117 40371 MT
(2)SH
10 SS 
15517 40026 MT
(]\050)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
16627 40371 MT
(1)SH
10 SS 
17027 40026 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 SS 
19721 40371 MT
(n)SH
10 /Times-Roman AF
20121 40026 MT
(\051 =)436 W
/Times-Italic SF
22390 XM
(f)SH
8 /Times-Roman AF
22668 40371 MT
(1)SH
10 SS 
23068 40026 MT
(\050)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
23845 40371 MT
(1)SH
10 SS 
24245 40026 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 SS 
26939 40371 MT
(n)SH
10 /Times-Roman AF
27339 40026 MT
(\051 <)436 W
/Times-Italic SF
(op)SH
/Times-Roman SF
(>)SH
/Times-Italic SF
31172 XM
(f)SH
8 /Times-Roman AF
31450 40371 MT
(2)SH
10 SS 
31850 40026 MT
(\050)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
32627 40371 MT
(1)SH
10 SS 
33027 40026 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 SS 
35721 40371 MT
(n)SH
10 /Times-Roman AF
36121 40026 MT
(\051.)SH
7200 41754 MT
(This procedure can also be used to complement a function \050compute)15 W
/Times-Italic SF
34943 XM
(f)SH
/Symbol SF
35521 XM
(\305)SH
/Times-Bold SF
36589 XM
(1)SH
/Times-Roman SF
(\051)SH
8 SS 
37422 41409 MT
(5)SH
10 SS 
38087 41754 MT
(to test)
15 W( for implication \050compare)16 W
/Times-Italic SF
51081 XM
(f)SH
8 /Times-Roman AF
51359 42099 MT
(1)SH
10 /Symbol AF
51909 41754 MT
(\327 \330)50 W
/Times-Italic SF
53322 XM
(f)SH
8 /Times-Roman AF
53600 42099 MT
(2)SH
10 SS 
7200 43131 MT
(to)SH
/Times-Bold SF
8241 XM
(0)SH
/Times-Roman SF
(\051, and a variety of other operations.  With our representation, we can implement all of the operators with a single)12 W
7200 44508 MT
(algorithm. In)
972 W( contrast, many Boolean function manipulation programs)
361 W( [6])
SH( require different)
361 W( algorithms for)362 W
7200 45885 MT
(complementing, intersecting \050<op>)
58 W( =)SH
/Symbol SF
22479 XM
(\327)SH
/Times-Roman SF
(\051, and unioning \050<op>)
58 W( = +\051)
SH( functions,)
58 W( and then implement other operators by)57 W
7200 47262 MT
(combining these operations.)SH
8200 49741 MT
(The algorithm proceeds from the roots of the two argument graphs downward, creating vertices in the)
5 W( result graph)6 W
7200 51118 MT
(at the branching points of the two arguments graphs.  First,)
46 W( let us explain the basic idea of the algorithm.  Then we)45 W
7200 52495 MT
(will describe two refinements to improve the efficiency.  The control structure of the algorithm is)
145 W( based on the)146 W
7200 53872 MT
(following recursion, derived from the Shannon expansion \050equation 1\051)SH
/Times-Italic SF
11200 56044 MT
(f)SH
8 /Times-Roman AF
11478 56389 MT
(1)SH
10 SS 
12128 56044 MT
(<)SH
/Times-Italic SF
(op)SH
/Times-Roman SF
(>)SH
/Times-Italic SF
14506 XM
(f)SH
8 /Times-Roman AF
14784 56389 MT
(2)SH
10 SS 
15870 56044 MT
(=)SH
/Times-Italic SF
17120 XM
(x)SH
/Symbol SF
17120 55663 MT
(-)SH
8 /Times-Italic AF
17669 56389 MT
(i)SH
10 /Symbol AF
17891 56044 MT
(\327)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(f)SH
8 /Times-Roman AF
18752 56389 MT
(1)SH
10 /Symbol AF
19302 56044 MT
(|)SH
8 /Times-Italic AF
19502 56389 MT
(x)SH
19857 56734 MT
(i)SH
/Times-Roman SF
20079 56389 MT
(=0)SH
10 SS 
21180 56044 MT
(<)SH
/Times-Italic SF
(op)SH
/Times-Roman SF
(>)SH
/Times-Italic SF
23558 XM
(f)SH
8 /Times-Roman AF
23836 56389 MT
(2)SH
10 /Symbol AF
24386 56044 MT
(|)SH
8 /Times-Italic AF
24586 56389 MT
(x)SH
24941 56734 MT
(i)SH
/Times-Roman SF
25163 56389 MT
(=0)SH
10 SS 
26014 56044 MT
(\051 +)436 W
/Times-Italic SF
28283 XM
(x)SH
8 SS 
28727 56389 MT
(i)SH
10 /Symbol AF
28949 56044 MT
(\327)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(f)SH
8 /Times-Roman AF
29810 56389 MT
(1)SH
10 /Symbol AF
30360 56044 MT
(|)SH
8 /Times-Italic AF
30560 56389 MT
(x)SH
30915 56734 MT
(i)SH
/Times-Roman SF
31137 56389 MT
(=1)SH
10 SS 
32238 56044 MT
(<)SH
/Times-Italic SF
(op)SH
/Times-Roman SF
(>)SH
/Times-Italic SF
34616 XM
(f)SH
8 /Times-Roman AF
34894 56389 MT
(2)SH
10 /Symbol AF
35444 56044 MT
(|)SH
8 /Times-Italic AF
35644 56389 MT
(x)SH
35999 56734 MT
(i)SH
/Times-Roman SF
36221 56389 MT
(=1)SH
10 SS 
37072 56044 MT
(\051)SH
7200 57595 MT
(To apply the operator)
11 W( to functions represented by graphs with roots)10 W
/Times-Italic SF
34503 XM
(v)SH
8 /Times-Roman AF
34947 57940 MT
(1)SH
10 SS 
35607 57595 MT
(and)SH
/Times-Italic SF
37311 XM
(v)SH
8 /Times-Roman AF
37755 57940 MT
(2)SH
10 SS 
38155 57595 MT
(, we must consider several cases.  First,)10 W
7200 58972 MT
(suppose both)161 W
/Times-Italic SF
13022 XM
(v)SH
8 /Times-Roman AF
13466 59317 MT
(1)SH
10 SS 
14277 58972 MT
(and)SH
/Times-Italic SF
16132 XM
(v)SH
8 /Times-Roman AF
16576 59317 MT
(2)SH
10 SS 
17387 58972 MT
(are terminal vertices.  Then the result graph consists of)
161 W( a terminal vertex having value)162 W
/Times-Italic SF
7200 60349 MT
(value)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
8 /Times-Roman AF
10143 60694 MT
(1)SH
10 SS 
10543 60349 MT
(\051 <)SH
/Times-Italic SF
(op)SH
/Times-Roman SF
(>)SH
/Times-Italic SF
13504 XM
(value)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
8 /Times-Roman AF
16447 60694 MT
(2)SH
10 SS 
16847 60349 MT
(\051. Otherwise,)
1360 W( suppose at least one of the two is a nonterminal vertex.  If)555 W
/Times-Italic SF
7200 61726 MT
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
8 /Times-Roman AF
10143 62071 MT
(1)SH
10 SS 
10543 61726 MT
(\051 =)SH
/Times-Italic SF
11940 XM
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
8 /Times-Roman AF
14883 62071 MT
(2)SH
10 SS 
15283 61726 MT
(\051 =)SH
/Times-Italic SF
16680 XM
(i)SH
/Times-Roman SF
(, we create a vertex)106 W
/Times-Italic SF
25484 XM
(u)SH
/Times-Roman SF
26340 XM
(having index)106 W
/Times-Italic SF
31997 XM
(i)SH
/Times-Roman SF
(, and apply the algorithm recursively on)107 W
/Times-Italic SF
49244 XM
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
8 /Times-Roman AF
51466 62071 MT
(1)SH
10 SS 
51866 61726 MT
(\051 and)107 W
/Times-Italic SF
7200 63103 MT
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
8 /Times-Roman AF
9422 63448 MT
(2)SH
10 SS 
9822 63103 MT
(\051 to generate the subgraph whose root)
30 W( becomes)29 W
/Times-Italic SF
29111 XM
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(u)SH
/Times-Roman SF
(\051, and on)29 W
/Times-Italic SF
35253 XM
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
8 /Times-Roman AF
37808 63448 MT
(1)SH
10 SS 
38208 63103 MT
(\051 and)29 W
/Times-Italic SF
40543 XM
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
8 /Times-Roman AF
43098 63448 MT
(2)SH
10 SS 
43498 63103 MT
(\051 to generate the subgraph)29 W
7200 64480 MT
(whose root becomes)112 W
/Times-Italic SF
15951 XM
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(u)SH
/Times-Roman SF
(\051. Suppose,)
474 W( on the other hand,)
112 W( that)113 W
/Times-Italic SF
33653 XM
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
8 /Times-Roman AF
36596 64825 MT
(1)SH
10 SS 
36996 64480 MT
(\051 =)SH
/Times-Italic SF
38393 XM
(i)SH
/Times-Roman SF
(, but either)113 W
/Times-Italic SF
43565 XM
(v)SH
8 /Times-Roman AF
44009 64825 MT
(2)SH
10 SS 
44772 64480 MT
(is a terminal vertex or)113 W
/Times-Italic SF
7200 65857 MT
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
8 /Times-Roman AF
10143 66202 MT
(2)SH
10 SS 
10543 65857 MT
(\051 >)SH
/Times-Italic SF
11940 XM
(i)SH
/Times-Roman SF
(, Then the function represented by the graph with root)SH
/Times-Italic SF
34075 XM
(v)SH
8 /Times-Roman AF
34519 66202 MT
(2)SH
10 SS 
35169 65857 MT
(is independent of)SH
/Times-Italic SF
42307 XM
(x)SH
8 SS 
42751 66202 MT
(i)SH
10 /Times-Roman AF
42973 65857 MT
(, i.e.)SH
/Times-Italic SF
9200 67762 MT
(f)SH
8 /Times-Roman AF
9478 68107 MT
(2)SH
10 /Symbol AF
10028 67762 MT
(|)SH
8 /Times-Italic AF
10228 68107 MT
(x)SH
10583 68452 MT
(i)SH
/Times-Roman SF
10805 68107 MT
(=0)SH
10 SS 
12342 67762 MT
(=)SH
/Times-Italic SF
13592 XM
(f)SH
8 /Times-Roman AF
13870 68107 MT
(2)SH
10 /Symbol AF
14420 67762 MT
(|)SH
8 /Times-Italic AF
14620 68107 MT
(x)SH
14975 68452 MT
(i)SH
/Times-Roman SF
15197 68107 MT
(=1)SH
10 SS 
16734 67762 MT
(=)SH
/Times-Italic SF
17984 XM
(f)SH
8 /Times-Roman AF
18262 68107 MT
(2)SH
10 SS 
18662 67762 MT
(.)SH
10800 50 7200 70352 UL
6 SS 
8000 71691 MT
(5)SH
8 SS 
8300 72000 MT
(Alternatively, a function can be complemented by simply complementing the values of the terminal vertices.)SH
ES
%%Page: 13 13

61200 79200 BS
0 SI
10 /Times-Roman AF
30100 4286 MT
(13)SH
7200 7886 MT
(Hence we create a vertex)105 W
/Times-Italic SF
18025 XM
(u)SH
/Times-Roman SF
18880 XM
(having index)105 W
/Times-Italic SF
24534 XM
(i)SH
/Times-Roman SF
(, but recursively apply the algorithm on)105 W
/Times-Italic SF
41600 XM
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
8 /Times-Roman AF
43822 8231 MT
(1)SH
10 SS 
44222 7886 MT
(\051 and)104 W
/Times-Italic SF
46707 XM
(v)SH
8 /Times-Roman AF
47151 8231 MT
(2)SH
10 SS 
47905 7886 MT
(to generate the)104 W
7200 9263 MT
(subgraph whose root becomes)25 W
/Times-Italic SF
19631 XM
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(u)SH
/Times-Roman SF
(\051, and on)25 W
/Times-Italic SF
25761 XM
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
8 /Times-Roman AF
28316 9608 MT
(1)SH
10 SS 
28716 9263 MT
(\051 and)25 W
/Times-Italic SF
31043 XM
(v)SH
8 /Times-Roman AF
31487 9608 MT
(2)SH
10 SS 
32162 9263 MT
(to generate the subgraph whose root becomes)25 W
/Times-Italic SF
50806 XM
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(u)SH
/Times-Roman SF
(\051.)SH
7200 10640 MT
(A similar situation holds when the roles of the two)
55 W( vertices in the previous case are reversed.  In general the graph)54 W
7200 12017 MT
(produced by this process will not be reduced, and we apply the reduction algorithm to it before returning.)SH
8200 14496 MT
(If we were to implement the technique described in)
16 W( the previous paragraph directly we would obtain an algorithm)17 W
7200 15873 MT
(of exponential \050in)99 W
/Times-Italic SF
14857 XM
(n)SH
/Times-Roman SF
(\051 time complexity, because every call for which one of the arguments is a nonterminal)
99 W( vertex)98 W
7200 17250 MT
(generates two recursive calls.  This complexity can be reduced by two refinements.)SH
8200 19729 MT
(First, the algorithm need not evaluate a given pair of subgraphs more than once.  Instead, we can)
25 W( maintain a table)26 W
7200 21106 MT
(containing entries of the form \050)12 W
/Times-Italic SF
(v)SH
8 /Times-Roman AF
20174 21451 MT
(1)SH
10 SS 
20574 21106 MT
(,)SH
/Times-Italic SF
(v)SH
8 /Times-Roman AF
21268 21451 MT
(2)SH
10 SS 
21668 21106 MT
(,)SH
/Times-Italic SF
(u)SH
/Times-Roman SF
(\051 indicating that the result of applying the algorithm to subgraphs with roots)12 W
/Times-Italic SF
53156 XM
(v)SH
8 /Times-Roman AF
53600 21451 MT
(1)SH
10 SS 
7200 22483 MT
(and)SH
/Times-Italic SF
8925 XM
(v)SH
8 /Times-Roman AF
9369 22828 MT
(2)SH
10 SS 
10050 22483 MT
(was a subgraph with root)31 W
/Times-Italic SF
20509 XM
(u)SH
/Times-Roman SF
(. Then)
312 W( before applying the algorithm to a pair)
31 W( of vertices, we first check whether)32 W
7200 23860 MT
(the table contains an entry for these two vertices.  If so, we can immediately)
163 W( return the result.  Otherwise, we)162 W
7200 25237 MT
(proceed as described in the previous paragraph and add a new entry to the table.  This refinement alone drops)
78 W( the)79 W
7200 26614 MT
(time complexity to O)
150 82 WX(\050)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
17379 26959 MT
(1)SH
10 /Symbol AF
17779 26614 MT
(|\327|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
19151 26959 MT
(2)SH
10 /Symbol AF
19551 26614 MT
(|)SH
/Times-Roman SF
(\051, as we will show later.  This refinement shows how we can exploit the)
82 W( sharing of)81 W
7200 27991 MT
(subgraphs in the data)
30 W( structures to gain efficiency in the algorithms.  If the two argument graphs each contain many)31 W
7200 29368 MT
(shared subgraphs, we obtain a high "hit rate")
97 W( for our table.  In practice we have found hit rates to range between)96 W
7200 30745 MT
(40% and 50%.  Note that)
96 W( with a 50% hit rate, we obtain a speed improvement far better than the factor of 2 one)97 W
7200 32122 MT
(might first expect.  Finding an entry \050)193 W
/Times-Italic SF
(v)SH
8 /Times-Roman AF
23994 32467 MT
(1)SH
10 SS 
24394 32122 MT
(,)SH
/Times-Italic SF
(v)SH
8 /Times-Roman AF
25088 32467 MT
(2)SH
10 SS 
25488 32122 MT
(,)SH
/Times-Italic SF
(u)SH
/Times-Roman SF
(\051 in the table counts)
193 W( as only one "hit", but avoids the potentially)192 W
7200 33499 MT
(numerous recursive calls required to construct the subgraph rooted by)SH
/Times-Italic SF
35361 XM
(u)SH
/Times-Roman SF
(.)SH
8200 35978 MT
(Second, suppose the algorithm is applied)
142 W( to two vertices where one, say)143 W
/Times-Italic SF
38907 XM
(v)SH
8 /Times-Roman AF
39351 36323 MT
(1)SH
10 SS 
39751 35978 MT
(, is a terminal vertex, and for this)143 W
7200 37355 MT
(particular operator,)562 W
/Times-Italic SF
16238 XM
(value)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
8 /Times-Roman AF
19181 37700 MT
(1)SH
10 SS 
19581 37355 MT
(\051 is a "controlling" value, i.e.)
562 W( either)1373 W
/Times-Italic SF
38639 XM
(value)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
8 /Times-Roman AF
41582 37700 MT
(1)SH
10 SS 
41982 37355 MT
(\051 <)SH
/Times-Italic SF
(op)SH
/Times-Roman SF
(>)SH
/Times-Italic SF
44943 XM
(a)SH
/Times-Roman SF
45693 XM
(= 1)
SH( for all)561 W
/Times-Italic SF
51606 XM
(a)SH
/Times-Roman SF
(, or)561 W
/Times-Italic SF
7200 38732 MT
(value)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
8 /Times-Roman AF
10143 39077 MT
(1)SH
10 SS 
10543 38732 MT
(\051 <)SH
/Times-Italic SF
(op)SH
/Times-Roman SF
(>)SH
/Times-Italic SF
13504 XM
(a)SH
/Times-Roman SF
14254 XM
(= 0)
SH( for all)203 W
/Times-Italic SF
19093 XM
(a)SH
/Times-Roman SF
(. For)
656 W( example, 1 is a controlling value for either argument of)204 W
8 SS 
46989 XM
(OR)SH
10 SS 
(, while 0 is a)204 W
7200 40109 MT
(controlling value for)
41 W( either argument of)40 W
8 SS 
23550 XM
(AND)SH
10 SS 
(. In)
330 W( this case, there is no need to evaluate further.  We simply create a)40 W
7200 41486 MT
(terminal vertex having the appropriate value.)
37 W( While)
326 W( this refinement does not improve the worst case complexity of)38 W
7200 42863 MT
(the algorithm, it certainly helps in many cases.  In practice we have found this case occurs around 10% of the time.)SH
8200 45342 MT
(A sketch of the code is shown in Figure)
12 W( 6.  For simplicity and to optimize the worst case performance, the table is)11 W
7200 46719 MT
(implemented as a two dimensional array indexed by the)
20 W( unique identifiers of the two vertices.  In practice, this table)21 W
7200 48096 MT
(will be very sparse, and hence it is more efficient to use a hash table.  To detect whether one)
97 W( of the two vertices)96 W
7200 49473 MT
(contains a controlling value for the operator,)
185 W( we evaluate the expression v1.value)
186 W( <op> v2.value)
SH( using a three-)186 W
7200 50850 MT
(valued algebra where X \050the value at any nonterminal vertex\051)
514 W( represents "don't care".  That is, if)513 W
/Times-Italic SF
7200 52227 MT
(b)SH
/Times-Roman SF
7950 XM
(<op> 1 =)SH
/Times-Italic SF
11892 XM
(b)SH
/Times-Roman SF
12642 XM
(<op> 0 =)SH
/Times-Italic SF
16584 XM
(a)SH
/Times-Roman SF
(, then)97 W
/Times-Italic SF
19750 XM
(b)SH
/Times-Roman SF
20500 XM
(<op> X =)SH
/Times-Italic SF
24664 XM
(a)SH
/Times-Roman SF
(, otherwise)98 W
/Times-Italic SF
29998 XM
(b)SH
/Times-Roman SF
30748 XM
(<op> X = X.)
SH( This)
446 W( evaluation technique is used in many)98 W
7200 53604 MT
(logic simulators.)
161 W( [14])
SH( Before)
572 W( the final graph is returned, we apply the procedure)161 W
/Times-Italic SF
41785 XM
(Reduce)SH
/Times-Roman SF
45138 XM
(to transform it into a)160 W
7200 54981 MT
(reduced graph and to assign unique identifiers to the vertices.)SH
8200 57460 MT
(To analyze the time complexity of this algorithm when called)
46 W( on graphs with)47 W
/Symbol SF
39882 XM
(|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
40804 57805 MT
(1)SH
10 /Symbol AF
41204 57460 MT
(|)SH
/Times-Roman SF
41701 XM
(and)SH
/Symbol SF
43442 XM
(|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
44364 57805 MT
(2)SH
10 /Symbol AF
44764 57460 MT
(|)SH
/Times-Roman SF
45261 XM
(vertices, respectively,)47 W
7200 58837 MT
(observe that the procedure)94 W
/Times-Italic SF
18406 XM
(Apply-step)SH
/Times-Roman SF
23027 XM
(only generates recursive calls the first time it is invoked)
94 W( on a given pair of)93 W
7200 60214 MT
(vertices, hence the total number of recursive calls to this procedure cannot exceed)
53 W( 2)54 W
/Symbol SF
(\327|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
42553 60559 MT
(1)SH
10 /Symbol AF
42953 60214 MT
(|\327|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
44325 60559 MT
(2)SH
10 /Symbol AF
44725 60214 MT
(|)SH
/Times-Roman SF
(. Within)
358 W( a single call,)54 W
7200 61591 MT
(all operations \050including looking for an entry in the table\051 require constant time.  Furthermore the initialization of the)SH
7200 62968 MT
(table requires at time proportional)
141 W( to its size, i.e.  O)
150 142 WX(\050)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
30602 63313 MT
(1)SH
10 /Symbol AF
31002 62968 MT
(|\327|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
32374 63313 MT
(2)SH
10 /Symbol AF
32774 62968 MT
(|)SH
/Times-Roman SF
(\051. Hence,)
534 W( the total complexity of the algorithm is)142 W
7200 64382 MT
(O)
150 MX(\050)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
9327 64727 MT
(1)SH
10 /Symbol AF
9727 64382 MT
(|\327|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
11099 64727 MT
(2)SH
10 /Symbol AF
11499 64382 MT
(|)SH
/Times-Roman SF
(\051.)SH
8 SS 
12282 64037 MT
(6)SH
10 SS 
13300 64382 MT
(In the worst case,)
59 W( the algorithm may actually require this much time, because the reduced graph for)58 W
7200 65759 MT
(the function)105 W
/Times-Italic SF
12465 XM
(f)SH
8 /Times-Roman AF
12743 66104 MT
(1)SH
10 SS 
13393 65759 MT
(<op>)SH
/Times-Italic SF
15771 XM
(f)SH
8 /Times-Roman AF
16049 66104 MT
(2)SH
10 SS 
16804 65759 MT
(can contain O)
150 105 WX(\050)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
23973 66104 MT
(1)SH
10 /Symbol AF
24373 65759 MT
(|\327|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
25745 66104 MT
(2)SH
10 /Symbol AF
26145 65759 MT
(|)SH
/Times-Roman SF
(\051 vertices.)
105 W( For)
462 W( example, choose any positive integers)106 W
/Times-Italic SF
48822 XM
(m)SH
/Times-Roman SF
49900 XM
(and)SH
/Times-Italic SF
51700 XM
(n)SH
/Times-Roman SF
52556 XM
(and)SH
7200 67136 MT
(define the functions)SH
/Times-Italic SF
15393 XM
(f)SH
8 /Times-Roman AF
15671 67481 MT
(1)SH
10 SS 
16321 67136 MT
(and)SH
/Times-Italic SF
18015 XM
(f)SH
8 /Times-Roman AF
18293 67481 MT
(2)SH
10 SS 
18943 67136 MT
(as:)SH
10800 50 7200 70352 UL
6 SS 
8000 71691 MT
(6)SH
8 /Times-Bold AF
8300 72000 MT
(Update:)SH
/Times-Roman SF
11455 XM
(See the footnote for Table 1 discussing the inaccuracy of this complexity measure.)SH
ES
%%Page: 14 14

61200 79200 BS
0 SI
10 /Times-Roman AF
30100 4286 MT
(14)SH
/Times-Italic SF
9200 7886 MT
(f)SH
8 /Times-Roman AF
9478 8231 MT
(1)SH
10 SS 
9878 7886 MT
(\050)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
10655 8231 MT
(1)SH
10 SS 
11055 7886 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
13749 8231 MT
(2)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(+2)SH
/Times-Italic SF
(m)SH
10 /Times-Roman AF
15978 7886 MT
(\051 =)436 W
/Times-Italic SF
18247 XM
(x)SH
8 /Times-Roman AF
18691 8231 MT
(1)SH
10 /Symbol AF
19091 7886 MT
(\327)SH
/Times-Italic SF
(x)SH
8 SS 
19785 8231 MT
(n)SH
/Times-Roman SF
(+)SH
/Times-Italic SF
(m)SH
/Times-Roman SF
(+1)SH
10 SS 
22315 7886 MT
(+)SH
/Symbol SF
23379 XM
(\327 \327 \327)SH
/Times-Roman SF
25129 XM
(+)SH
/Times-Italic SF
25943 XM
(x)SH
8 SS 
26387 8231 MT
(n)SH
10 /Symbol AF
26787 7886 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
27481 8231 MT
(2)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(+)SH
/Times-Italic SF
(m)SH
10 SS 
9200 9092 MT
(f)SH
8 /Times-Roman AF
9478 9437 MT
(2)SH
10 SS 
9878 9092 MT
(\050)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
10655 9437 MT
(1)SH
10 SS 
11055 9092 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
13749 9437 MT
(2)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(+2)SH
/Times-Italic SF
(m)SH
10 /Times-Roman AF
15978 9092 MT
(\051 =)436 W
/Times-Italic SF
18247 XM
(x)SH
8 SS 
18691 9437 MT
(n)SH
/Times-Roman SF
(+1)SH
10 /Symbol AF
19942 9092 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
20636 9437 MT
(2)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(+)SH
/Times-Italic SF
(m)SH
/Times-Roman SF
(+1)SH
10 SS 
23566 9092 MT
(+)SH
/Symbol SF
24630 XM
(\327 \327 \327)SH
/Times-Roman SF
26380 XM
(+)SH
/Times-Italic SF
27194 XM
(x)SH
8 SS 
27638 9437 MT
(n)SH
/Times-Roman SF
(+)SH
/Times-Italic SF
(m)SH
10 /Symbol AF
29067 9092 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
29761 9437 MT
(2)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(+2)SH
/Times-Italic SF
(m)SH
10 /Times-Roman AF
7200 10820 MT
(These functions are represented)
64 W( by graphs containing 2)63 W
8 /Times-Italic AF
29722 10475 MT
(n)SH
/Times-Roman SF
(+1)SH
10 SS 
31286 10820 MT
(and 2)63 W
8 /Times-Italic AF
33543 10475 MT
(m)SH
/Times-Roman SF
(+1)SH
10 SS 
35285 10820 MT
(vertices, respectively, as we saw in Section 3.)63 W
7200 12197 MT
(If we compute)SH
/Times-Italic SF
13226 XM
(f)SH
/Times-Roman SF
13754 XM
(=)SH
/Times-Italic SF
14568 XM
(f)SH
8 /Times-Roman AF
14846 12542 MT
(1)SH
10 SS 
15396 12197 MT
(+)SH
/Times-Italic SF
16110 XM
(f)SH
8 /Times-Roman AF
16388 12542 MT
(2)SH
10 SS 
16788 12197 MT
(, the resulting function is)SH
/Times-Italic SF
9200 13988 MT
(f)SH
/Times-Roman SF
9628 XM
(\050)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
10405 14333 MT
(1)SH
10 SS 
10805 13988 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
13499 14333 MT
(2)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(+2)SH
/Times-Italic SF
(m)SH
10 /Times-Roman AF
15728 13988 MT
(\051 =)436 W
/Times-Italic SF
17997 XM
(x)SH
8 /Times-Roman AF
18441 14333 MT
(1)SH
10 /Symbol AF
18841 13988 MT
(\327)SH
/Times-Italic SF
(x)SH
8 SS 
19535 14333 MT
(n)SH
/Times-Roman SF
(+)SH
/Times-Italic SF
(m)SH
/Times-Roman SF
(+1)SH
10 SS 
22065 13988 MT
(+)SH
/Symbol SF
23129 XM
(\327 \327 \327)SH
/Times-Roman SF
24879 XM
(+)SH
/Times-Italic SF
25693 XM
(x)SH
8 SS 
26137 14333 MT
(n)SH
/Times-Roman SF
(+)SH
/Times-Italic SF
(m)SH
10 /Symbol AF
27566 13988 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
28260 14333 MT
(2)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(+2)SH
/Times-Italic SF
(m)SH
10 /Times-Roman AF
7200 15716 MT
(which is represented by a graph with 2)238 W
8 /Times-Italic AF
24335 15371 MT
(n)SH
/Times-Roman SF
(+)SH
/Times-Italic SF
(m)SH
/Times-Roman SF
(+1)SH
10 SS 
26865 15716 MT
(= 0.5)SH
/Symbol SF
(\327|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
30101 16061 MT
(1)SH
10 /Symbol AF
30501 15716 MT
(|\327|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
31873 16061 MT
(2)SH
10 /Symbol AF
32273 15716 MT
(|)SH
/Times-Roman SF
32961 XM
(vertices. Hence)
726 W( the worst case)
238 W( efficiency of the)239 W
7200 17093 MT
(algorithm is limited by the size of the result graph, and we cannot expect)
227 W( any algorithm to achieve a better)226 W
7200 18470 MT
(performance than ours under)
181 W( these conditions.  Empirically, we have never observed this worst case occurring)182 W
7200 19847 MT
(except when the result graph is large.  We conjecture the algorithm)
46 W( could be refined to have worst case complexity)45 W
7200 21224 MT
(O)
150 MX(\050)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
9327 21569 MT
(1)SH
10 /Symbol AF
9727 21224 MT
(|)SH
/Times-Roman SF
(+)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
11413 21569 MT
(2)SH
10 /Symbol AF
11813 21224 MT
(|)SH
/Times-Roman SF
(+)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
13499 21569 MT
(3)SH
10 /Symbol AF
13899 21224 MT
(|)SH
/Times-Roman SF
(\051, where)SH
/Times-Italic SF
17625 XM
(G)SH
8 /Times-Roman AF
18347 21569 MT
(3)SH
10 SS 
18997 21224 MT
(is the resulting reduced graph.)SH
8 SS 
31078 20879 MT
(7)SH
10 SS 
9200 23015 MT
(function)SH
/Times-Italic SF
12783 XM
(Apply)SH
/Times-Roman SF
(\050v1, v2: vertex; <op>: operator\051: vertex)SH
11718 24120 MT
(var T: array[1..)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
18693 24465 MT
(1)SH
10 /Symbol AF
19093 24120 MT
(|)SH
/Times-Roman SF
(, 1..)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
21715 24465 MT
(2)SH
10 /Symbol AF
22115 24120 MT
(|)SH
/Times-Roman SF
(] of vertex;)SH
11718 26330 MT
({Recursive routine to implement)SH
/Times-Italic SF
25086 XM
(Apply)SH
/Times-Roman SF
(})SH
11718 27435 MT
(function)SH
/Times-Italic SF
15301 XM
(Apply-step)SH
/Times-Roman SF
(\050v1, v2: vertex\051: vertex;)SH
11718 28540 MT
(begin)SH
14236 29645 MT
(u := T[v1.id, v2.id];)SH
14236 30750 MT
(if u)SH
/Symbol SF
15997 XM
(\271)SH
/Times-Roman SF
16946 XM
(null then return\050u\051; {have already evaluated})SH
14236 31855 MT
(u := new vertex record; u.mark := false;)SH
14236 32960 MT
(T[v1.id, v2.id] := u; {add vertex to table})SH
14236 34065 MT
(u.value := v1.value <op> v2.value;)SH
14236 35170 MT
(if u.value)SH
/Symbol SF
18413 XM
(\271)SH
/Times-Roman SF
19362 XM
(X)SH
14236 36275 MT
(then begin {create terminal vertex})SH
16754 37380 MT
(u.index := n+1; u.low := null; u.high := null;)SH
14236 38485 MT
(end)SH
14236 39590 MT
(else begin {create nonterminal and evaluate further down})SH
16754 40695 MT
(u.index :=)SH
/Times-Italic SF
21068 XM
(Min)SH
/Times-Roman SF
(\050v1.index, v2.index\051;)SH
16754 41800 MT
(if v1.index = u.index)SH
19272 42905 MT
(then begin vlow1 := v1.low; vhigh1 := v1.high end)SH
19272 44010 MT
(else begin vlow1 := v1; vhigh1 := v1 end;)SH
16754 45115 MT
(if v2.index = u.index)SH
19272 46220 MT
(then begin vlow2 := v2.low; vhigh2 := v2.high end)SH
19272 47325 MT
(else begin vlow2 := v2; vhigh2 := v2 end;)SH
16754 48430 MT
(u.low :=)SH
/Times-Italic SF
20346 XM
(Apply-step)SH
/Times-Roman SF
(\050vlow1, vlow2\051;)SH
16754 49535 MT
(u.high :=)SH
/Times-Italic SF
20624 XM
(Apply-step)SH
/Times-Roman SF
(\050vhigh1, vhigh2\051;)SH
14236 50640 MT
(end;)SH
14236 51745 MT
(return\050u\051;)SH
11718 52850 MT
(end;)SH
9200 55060 MT
(begin {Main)
500 W( routine})SH
11718 56165 MT
(Initialize all elements of T to null;)SH
11718 57270 MT
(u :=)SH
/Times-Italic SF
13560 XM
(Apply-step)SH
/Times-Roman SF
(\050v1, v2\051;)SH
11718 58375 MT
(return\050)SH
/Times-Italic SF
(Reduce)SH
/Times-Roman SF
(\050u\051\051;)SH
9200 59480 MT
(end;)SH
23795 61090 MT
(Figure 6.Implementation of)SH
/Times-Italic SF
35072 XM
(Apply)SH
/Times-Roman SF
8200 63569 MT
(Figure 7 shows an example of how this algorithm would proceed in)
217 W( applying the "or" operation to graphs)216 W
7200 64946 MT
(representing the functions)246 W
/Symbol SF
18725 XM
(\330)SH
/Times-Roman SF
19588 XM
(\050)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
20365 65291 MT
(1)SH
10 /Symbol AF
20765 64946 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
21459 65291 MT
(3)SH
10 SS 
21859 64946 MT
(\051 and)246 W
/Times-Italic SF
24628 XM
(x)SH
8 /Times-Roman AF
25072 65291 MT
(2)SH
10 /Symbol AF
25472 64946 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
26166 65291 MT
(3)SH
10 SS 
26566 64946 MT
(. This)
744 W( figure shows the graph created by the algorithm before)247 W
7200 66323 MT
(reduction. Next)
736 W( to each vertex in the resulting graph,)
243 W( we indicate the two vertices on which the procedure)242 W
10800 50 7200 69428 UL
6 SS 
8000 70767 MT
(7)SH
8 /Times-Bold AF
8300 71076 MT
(Update:)SH
/Times-Roman SF
11273 XM
(No one)
18 W( has improved on the worst case complexity of the algorithm described here.  Disproving a conjecture such as this one would)19 W
7200 72000 MT
(be difficult, however.)SH
ES
%%Page: 15 15

61200 79200 BS
0 SI
10 /Times-Roman AF
30100 4286 MT
(15)SH
1 SS 
36020 7200 43220 PB 
%%BeginDocument: figs/fig7.eps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox:  0 0 345 361 
%%Title: (C:\\Shared Files\\Documents\\BDD Paper\\fig7.CNV) 
%%Creator: Canvas (7.0.1) 
%%CreationDate: (05/09/00 @ 03:51 PM) 
%%DocumentProcSets: Deneba_CanvasCustomColors
%%+ CVDict
%%DocumentFonts: 
%%DocumentNeededFonts: CourierNewPSMT

%%DocumentProcessColors: Cyan Magenta Yellow Black
%%EndComments
%%BeginProlog 
%%BeginResource: procset CVDict
%%Title: Deneba standard graphics
%%Version: 1.02
%%CreationDate: 10/14/99
%%Copyright: (C) 1994, 1999 Deneba Systems. All Rights Reserved
userdict /CVDict 200 dict put
CVDict begin
/invalidcolortable? true def   
/level2 /languagelevel where {pop languagelevel 2 ge}{false} ifelse def
level2 not { /xshow {
0 currentpoint 5 -1 roll {pop pop moveto dup 1 add 3 1 roll exch dup 4 1 roll exch get 0 rmoveto currentpoint} exch kshow 
pop pop pop pop} def } if
/initialize
{CVDict
{dup xcheck{bind}if pop pop}forall
currentscreen /_sp exch def /_sa exch def /_sf exch def
/DefaultScreen{_sf _sa /_sp load}def
/DefaultScreenProc{ /_sp load}def
/setstrokeadjust where{pop true}{false}ifelse
{/sa /setstrokeadjust load def
/li /lineto load def
/mt /moveto load def
/ct /curveto load def
/lh { currentpoint exch pop lineto}bind def
/lv { currentpoint pop exch lineto}bind def}
{/sa{{currentdict StrokeAdjustDict ne{StrokeAdjustDict begin}if}{ currentdict StrokeAdjustDict eq{end}if}ifelse} bind def
userdict /StrokeAdjustDict 100 dict put
StrokeAdjustDict begin
/_xl
{transform
.25 sub round .25 add exch
.25 sub round .25 add exch
itransform
}bind def
/li{ _xl lineto}bind def
/mt{ _xl moveto}bind def
/ct{ _xl curveto}bind def
/lh { dup _xl pop currentpoint exch pop lineto}bind def
/lv { dup _xl pop currentpoint pop exch lineto}bind def
/rp{_xl/cv_b xdf/cv_r xdf
_xl/cv_t xdf/cv_l xdf
cv_l cv_t moveto
cv_r cv_t lineto
cv_r cv_b lineto
cv_l cv_b lineto
closepath
}bind def
end}ifelse}def
/terminate
{userdict /StrokeAdjustDict known {currentdict StrokeAdjustDict eq{end}if}if
currentdict CVDict eq{end}if}def
/mxMax 64 def
/mxStk [mxMax {matrix} repeat]def
/mxIdx 0 def
/stm{mxStk mxIdx 0 lt {/mxIdx 0 store}if mxIdx get currentmatrix pop /mxIdx mxIdx 1 add store}def
/rtm{mxIdx 1 ge {/mxIdx mxIdx 1 sub store mxStk mxIdx get setmatrix}if }def
/scl { 72 div exch 72 div exch scale } def
/scli { 72 exch div exch 72 exch div exch scale } def
/_cvmtx matrix def
/_txtmtx matrix def
/_initmtx matrix def
/xdf{exch def}def
/min{2 copy gt{exch}if pop}def
/max{2 copy lt{exch}if pop}def
/CVvec 256 array def
/T true def
/F false def
/_id 0 def
/_encodindex 0 def
/_encodArr 3 array def
/_fd 0 def
/_textSave null def
/_letterSpace 0 def
/_spaceXtra 0 def
/_PageSave null def
/_penh 1.0 def
/_penv 1.0 def
/save0 null def
/_w 0 def
/_h 0 def
/_ds 0 def
/hct false def
/pw 0 def
/wdif 0 def
/temp 0 def
/currot 0 def
/savehandler null def
/ia 0 def
/ix 0 def
/ixn 1 def
/MultipleDataSources false def 
/debug
{dup /$eps exch not def{/savehandler errordict /handleerror get def
errordict
/handleerror{$error begin
newerror{/newerror false def
showpage
72 72 scale
/Helvetica findfont .2 scalefont setfont
.25 9.6 moveto
(Error: )show
errorname
{dup type/stringtype ne
{(converted error name will end up in this string)cvs}if
show}exec
.25 9.4 moveto
(Offending Command: )show
/command load
{dup type/stringtype ne
{(converted command name will end up in this string)cvs}if
show}exec
.25 9.2 moveto
(Stack: )show
ostack
{.25 currentpoint .2 sub exch pop moveto
dup type/stringtype ne{dup type/integertype eq
1 index type/realtype eq or
1 index type/nametype eq or
not {type}if
(converted stack will end up in this string)cvs}if
show}forall
showpage
CVDict /savehandler get exec}if
end}put}if}def
/lc{setlinecap}def
/lj{setlinejoin}def
/lm{setmiterlimit}def
/lf{setflat}def
/cp{closepath}def
/np{newpath}def
/$psz 30 array def
/$pix 0 def
/gs{gsave $psz dup $pix _penh put $pix 1 add _penv put /$pix $pix 2 add def}def
/gr{grestore/$pix $pix 2 sub def $psz dup $pix get /_penh exch def $pix 1 add get /_penv exch def}def
/li{lineto} def
/lh{currentpoint exch pop lineto}def
/lv{currentpoint pop exch lineto}def
/mt{moveto} def
/_cv_mh{currentpoint exch pop moveto}def
/_cv_mv{currentpoint pop exch moveto}def
/ct{curveto} def
/rt{4 -2 roll moveto
dup 0 exch rlineto
exch 0 rlineto
neg 0 exch rlineto
closepath}def
/_hr
{
{/@err false def currentflat dup{gsave{eoclip}stopped{grestore 2 mul dup setflat dup 200 ge{(%% Canvas:Clip failed\r)print /@err true def pop exit}if}{grestore setflat exit}ifelse}loop @err not {eoclip}if setflat}
{/@err false def currentflat dup{gsave{clip}stopped{grestore 2 mul dup setflat dup 200 ge{(%% Canvas:Clip failed\r)print /@err true def pop exit}if}{grestore setflat exit}ifelse}loop @err not {clip}if setflat}
}def
/_cs null def
/fg{setgray}def
/setcmykcolor where {pop true}{false}ifelse
{/f4{ setcmykcolor}def}{/f4{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll}repeat setrgbcolor pop}def}ifelse
/setcolorspace where {pop true}{false}ifelse
{/scs{ dup setcolorspace /_cs exch def}def/f3{ _cs setcolorspace setcolor}def
}{/f3{ setrgbcolor}def/scs{ pop}def}ifelse
/$cc 5 array def
/findcmykcustomcolor where {pop true}{false}ifelse
not {/findcmykcustomcolor{$cc astore}def}if
/setcustomcolor where {pop true}{false}ifelse
not{/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}def}if
/fc{6 1 roll findcmykcustomcolor exch setcustomcolor}def
/setseparationgray where {pop true}{false}ifelse
not{/setseparationgray {systemdict /setgray get exec} def}if
/sg{ setseparationgray}def
/sp{/_penv xdf/_penh xdf}def
/rp
{/cv_b xdf/cv_r xdf
/cv_t xdf/cv_l xdf
cv_l cv_t moveto
cv_r cv_t lineto
cv_r cv_b lineto
cv_l cv_b lineto
closepath}def
/rr{/yradius xdf
/xradius xdf
/cv_b xdf
/cv_r xdf
/cv_t xdf
/cv_l xdf
cv_l xradius add cv_t moveto
cv_r xradius sub cv_t lineto
_cvmtx currentmatrix pop
currentpoint translate
xradius yradius scale
1 0 1 1 1 arcto 4{pop}repeat
_cvmtx setmatrix
cv_r cv_b yradius sub lineto
_cvmtx currentmatrix pop
currentpoint translate
xradius yradius scale
0 1 -1 1 1 arcto 4{pop}repeat
_cvmtx setmatrix
cv_l xradius add cv_b lineto
_cvmtx currentmatrix pop
currentpoint translate
xradius yradius scale
-1 0 -1 -1 1 arcto 4{pop}repeat
_cvmtx setmatrix
cv_l cv_t yradius add lineto
_cvmtx currentmatrix pop
currentpoint translate
xradius yradius scale
0 -1 1 -1 1 arcto 4{pop}repeat
_cvmtx setmatrix
closepath}def
/ep{_cvmtx currentmatrix pop
translate
scale
1 0 moveto
0 0 1 0 360 arc
closepath
_cvmtx setmatrix}def
/wd{_cvmtx currentmatrix pop
translate
scale
0 0 moveto
0 0 1 5 -2 roll arcn
closepath
_cvmtx setmatrix}def
/as{_cvmtx currentmatrix pop
translate
scale
0 0 1 5 -2 roll arcn
_cvmtx setmatrix}def
/ds
{_penv _penh ne dup{stm _penh dup 0 le{pop 1}if _penv dup 0 le{pop 1}if scale}{_penh setlinewidth}ifelse stroke {rtm}if}def
/df{fill}def
/de{eofill}def
/_gstk 5 array def
/_gstkc 0 def
/_gst{ 9 dict begin level2{/_ccs currentcolorspace def /_cc [currentcolor] def}{/_cc [currentrgbcolor]def}ifelse {currentpoint}stopped {/_cp null def}{ 2 array astore /_cp exch def}ifelse /_cf currentfont def
/_clw currentlinewidth def /_clc currentlinecap def /_clj currentlinejoin def /_cml currentmiterlimit def currentdict end}def
/hs{newpath gsave stm}def
/hc{/_hr load exch get exec newpath}def
/he{_gstk _gstkc _gst put /_gstkc _gstkc 1 add store 
grestore rtm /_gstkc _gstkc 1 sub store _gstk _gstkc get level2{dup /_ccs get setcolorspace dup /_cc get aload pop setcolor}{dup /_cc get aload pop setrgbcolor}ifelse dup /_cp get dup null eq 
not{aload pop moveto}{pop}ifelse dup /_cf get setfont
dup/_clw get setlinewidth dup/_clc get setlinecap dup/_clj get setlinejoin dup/_cml get setmiterlimit pop}def
/id{ /_id xdf}def
/_imatrix{_w 0 0 _h _id 0 ne{neg 0 _h}{0 0}ifelse _cvmtx astore}def
% Copyright (C) 1990, 1991 by Adobe Systems Incorporated.
% All rights reserved.
level2 { save /dontloadlevel1 xdf }if
/startnoload{{/noload save def} if}def
/endnoload{{noload restore}if }def
/testsystemdict{where{systemdict eq{true}{false}ifelse}{false}ifelse}def
/ncolors 1 def
/colorimage where{pop true}{false}ifelse{/ncolors 0
statusdict begin 
/processcolors where{pop pop processcolors}{/deviceinfo where{pop deviceinfo /Colors known
{pop {deviceinfo /Colors get}}if}if}ifelse end def
ncolors 0 ne{/colorimage testsystemdict
/setcolortransfer testsystemdict
/currentcolortransfer testsystemdict
/currentcmykcolor testsystemdict
and and and not{/ncolors 0 def}if}if}if
ncolors dup 1 ne exch dup 3 ne exch 4 ne and and {/ncolors 0 def}if
ncolors 1 eq dup dup not startnoload
{/doclutimage{[{255 mul round cvi bwclut exch get 255 div} /exec load dup currenttransfer exch] 
cvx bind settransfer _w _h 8 _imatrix _ds image}def}if
not endnoload
ncolors dup 3 eq exch 4 eq or
dup dup not startnoload
{/nullproc{{}}def/concatutil{/exec load
7 -1 roll /exec load}def
/defsubclut
{1 add getinterval def}def
/spconcattransfer   
{/Dclut exch def/Cclut exch def/Bclut exch def/Aclut exch def/ncompute exch ld
currentcolortransfer
[{Aclut ncompute}concatutil] cvx
[{Bclut ncompute}concatutil] cvx
[{Cclut ncompute}concatutil] cvx
[{Dclut ncompute}concatutil] cvx
setcolortransfer}def
/setuprgbcluts
{/bit3x rgbclut length 3 sub def
/bit1x bit3x 3 idiv def/rclut rgbclut def
/gclut rclut 1 bit3x defsubclut/bclut rclut 2 bit3x defsubclut}def}if not  
endnoload ncolors 3 eq dup dup not startnoload
{/3compute{exch bit3x mul
round cvi get 255 div}def
/doclutimage{%/rgbclut xdf pop 
setuprgbcluts/3compute rclut gclut bclut dup
spconcattransfer _w _h 8 _imatrix
[/_ds load /exec load /dup load dup]cvx
nullproc nullproc true 3 colorimage}def}if not endnoload ncolors 4 eq dup dup not startnoload
{/stuffclut{cmykindex 3 -1 roll put}def
/ftoint{1 exch sub 255 mul round cvi}def
/4compute { exch bit4x mul round cvi get 255 div } def
/computecmykclut{setuprgbcluts/bit4x rgbclut length 3 idiv 4 mul 4 sub def
/cmykclut bit4x 4 add string def
/cclut cmykclut def
/mclut cclut 1 bit4x defsubclut
/yclut cclut 2 bit4x defsubclut
/kclut cclut 3 bit4x defsubclut
/cmykindex 0 def
0 1 bit1x
{dup /cmykindex exch bit1x exch sub 4 mul def
3 mul dup rclut exch get 255 div exch dup gclut exch get 255 div
exch bclut exch get 255 div
setrgbcolor currentcmykcolor
ftoint kclut stuffclut
ftoint yclut stuffclut
ftoint mclut stuffclut
ftoint cclut stuffclut
}for}def
/doclutimage{invalidcolortable?{computecmykclut}if
/4compute cclut mclut yclut kclut spconcattransfer
_w _h 8 _imatrix[/_ds load /exec load/dup load dup dup] cvx 
nullproc nullproc nullproc true 4 colorimage}def}if
not endnoload
ncolors 0 eq
dup dup not startnoload
{/colorexpand{mystringexp 0 rgbclut
3 copy
7 -1 roll
{3 mul 3 getinterval putinterval exch 3 add exch 3 copy}forall
pop pop pop pop pop}def
/createexpandstr{/mystringexp exch st0 length mul string def}def
/doclutimage{/rgbclut xdf pop 3 createexpandstr _w _h 8 _imatrix
[/_ds load /exec load /colorexpand load /exec load] cvx
false 3 colorimage}def}if not endnoload
level2 { dontloadlevel1 restore }if
level2 not{ save /dontloadlevel2 xdf }if
/rgbclut 0 def
/doclutimage{/hival 255 def 
[/Indexed /DeviceRGB hival rgbclut] setcolorspace
_imagedict dup begin 
/Width _w def 
/Height _h def  
/Decode [0 hival] def  
/ImageMatrix _imatrix def
/BitsPerComponent 8 def 
/Interpolate false def
end image}def
level2 not{ dontloadlevel2 restore }if
%%EndProcSet
/_imagedict 15 dict begin /ImageType 1 def/BitsPerComponent 8 def/Interpolate false def currentdict end def
/hascolor true def
/level2 systemdict /languagelevel known
{languagelevel 2 ge}{false}ifelse def
/foureq {4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and} def
/setupbands{gsave
/_settransfer systemdict /settransfer get def
/_currenttransfer systemdict /currenttransfer get def
/_image systemdict /image get def
/blank 0 _currenttransfer exec
1 _currenttransfer exec eq def
/negative blank{0 _currenttransfer exec 0.5 lt}
{0 _currenttransfer exec 1 _currenttransfer exec gt}ifelse def
/inverted? negative def
/_currentgray systemdict /currentgray get def
hascolor{/$b 0 def} {/$b 5 def} ifelse
/setcmykcolor where{pop 1 0 0 0 setcmykcolor _currentgray 1 exch sub
0 1 0 0 setcmykcolor _currentgray 1 exch sub
0 0 1 0 setcmykcolor _currentgray 1 exch sub
0 0 0 1 setcmykcolor _currentgray 1 exch sub
4 {4 copy} repeat
1 0 0 0 foureq{/$b 1 store}if
0 1 0 0 foureq{/$b 2 store}if
0 0 1 0 foureq{/$b 3 store}if
0 0 0 1 foureq{/$b 4 store}if
0 0 0 0 foureq{/$b 6 store}if}if
blank{/$b 6 store}if
$b 0 eq $b 5 eq or{/$dt 0 def}if/$dt -1 def grestore}def
/doimage{
level2{image}{begin
Width Height BitsPerComponent ImageMatrix
Decode length 2 eq
{/DataSource load end image}{
Decode length 6 eq
{MultipleDataSources{DataSource 0 get DataSource 1 get DataSource 2 get}{/DataSource load}ifelse
MultipleDataSources 3 end DSIColorImage}{
Decode length 8 eq{MultipleDataSources{DataSource 0 get DataSource 1 get
DataSource 2 get DataSource 3 get}{/DataSource load}ifelse
MultipleDataSources 4 end DSIColorImage}if}ifelse
}ifelse
}ifelse}def
/dt{/rgbclut xdf /bwclut xdf}def
/cl{$i setmatrix translate scale
/_w _imagedict /Width get def
/_h _imagedict /Height get def
/_ds _imagedict /DataSource get def
doclutimage} def
/cd{$i setmatrix translate scale
level2{_imagedict /ColorSpace get setcolorspace}if
/_w _imagedict /Width get def
/_h _imagedict /Height get def
/_ds _imagedict /DataSource get def
_imagedict begin
/ImageMatrix _imatrix def
currentdict end
doimage} def
/im{$i setmatrix translate scale 
level2{/DeviceGray setcolorspace 0 setgray}if
/_w _imagedict /Width get def
/_h _imagedict /Height get def
/_ds _imagedict /DataSource get def
_imagedict begin
%/Decode [0 1] def  
%/Width _w def
%/Height _h def
/ImageMatrix _imatrix def
currentdict end 
doimage }def
/colorimage where{pop/DSIColorImage {colorimage} def}{/DSIColorImage{
/$nc xdf pop /proc0 xdf 3 index 2 index mul 7 add 8 div cvi string /st1 xdf
$nc 3 eq{{proc0 dup/st0 xdf 0 exch 3 exch length 3 sub
{dup st0 exch get .3 mul 1 index 1 add st0 exch get .59 mul add 1 index 2 add st0 exch get .11 mul add
cvi exch 3 div cvi exch st1 3 1 roll put}for st1}}{{proc0 dup/st0 xdf 0 exch 4 exch length 4 sub{dup
st0 exch get .3 mul
1 index 1 add st0 exch get .59 mul add
1 index 2 add st0 exch get .11 mul add
1 index 3 add st0 exch get add dup 255.0 gt{pop 255.0}if
255.0 exch sub cvi
exch 4 div cvi exch
st1 3 1 roll put}for st1}}ifelse
image}def}ifelse
/OPIimage{image}def
/$i matrix def
/bi{scale translate $i currentmatrix pop translate scale setupbands}def
/ei{$i setmatrix}def
/ik{$i setmatrix translate scale 
/_w _imagedict /Width get def
/_h _imagedict /Height get def
/_ds _imagedict /DataSource get def
_w _h false _imatrix 5 -1 roll _ds imagemask}def
/rs{2 copy translate
3 -1 roll neg rotate
neg exch neg exch translate
}def
/cs{_cvmtx astore concat} def
/fd{/_fd xdf}def
/_fontMatrix{1 0 0 _fd 0 ne{-1 0 0}{1 0 0}ifelse _cvmtx astore}def
/rf{/_encodindex xdf
FontDirectory exch known {
findfont dup length 1 add dict begin{1 index/FID ne{def}{pop pop}ifelse}forall
dup /FontName exch def FontType 0 ne{/Encoding Encoding 256 array copy def
_encodindex 0 ge{0 _encodArr _encodindex get{dup type/nametype eq{Encoding 2 index 2 index put pop 1 add}
{exch pop}ifelse}forall pop}if}if
currentdict end
definefont pop }{pop pop}ifelse} def
/cvsf{ findfont ftSize 0 0 ftSize _fd 0 ne{-1 mul}if 0 0 _cvmtx astore 
makefont setfont}def
/mf{3 -1 roll findfont 3 1 roll exch ftSize mul exch ftSize mul 0 exch 0 exch 
_fd 0 ne{-1 mul}if 0 0 _cvmtx astore makefont setfont}def
/wrk1 ( ) def
/wdict 16 dict def
/Work75 75 string def
/Nmk{Work75 cvs dup}def
/Npt{put cvn}def
/dhOdh{Nmk 2 79 Npt}def
/dhBdh{Nmk 2 111 Npt}def
/dhSdh{Nmk 2 83 Npt}def
/sfWidth{gsave 0 0 moveto 0 0 lineto 0 0 lineto 0 0 lineto closepath clip stringwidth grestore}def
/fts{/ftSize exch def}def
/mkFT{dup/FontType get 0 eq{dup maxlength dict begin
{1 index/FID ne 2 index /UniqueID ne and{def}{pop pop}ifelse}forall
currentdict end
dup/FDepVector 2 copy get
[exch 6 index exch 6 index exch{mkFT 3 1 roll}forall pop pop] put dup}{/tempFT 12 dict def
tempFT begin
/FontMatrix [1 0 0 1 0 0] def
/FontType 3 def
dup/Encoding get/Encoding exch def
/proc2 2 index def
dup/ft1 exch def
/ft2 1 array def
/FontBBox [0 0 1 1] def
/BuildChar{CVDict begin
exch dup/ftdt xdf begin
wdict begin
/chr xdf/chrst wrk1 dup 0 chr put def
ft2 0 get null eq{ft1 dup length 2 add dict begin
{1 index/FID ne 2 index /UniqueID ne and{def}{pop pop}ifelse}forall
/PaintType 2 def/StrokeWidth .024 0 FontMatrix idtransform pop def
currentdict end
/q exch definefont
ft2 exch 0 exch put}if
ftdt/proc2 get exec end end end}def end tempFT}ifelse
3 index exch
definefont exch pop}def
/mb{dup dhBdh FontDirectory 1 index known
{exch pop}{dup 2 index
findfont{boldproc} exch
mkFT pop pop pop exch pop
}ifelse }def
/mo{dup dhOdh FontDirectory 1 index known
{exch pop}{dup 2 index
findfont{outproc} exch
mkFT pop pop pop exch pop
}ifelse }def
/ms{dup dhSdh FontDirectory 1 index known
{exch pop}{dup 2 index
findfont{ShadChar} exch
mkFT  pop pop pop exch pop
}ifelse }def
/outproc{ft1 setfont
gsave chrst sfWidth grestore
setcharwidth dblsh}def
/boldproc{ft1 setfont
gsave
chrst sfWidth 1 index 0 ne{exch .05 add exch}if
grestore
setcharwidth
ft1 /PaintType get 2 ne
{0 0 moveto gsave ft2 0 get setfont chrst show grestore chrst show}
{0 0 moveto gsave chrst show grestore .05 0 moveto chrst show}ifelse}def
/dblsh{currentcolor currentcolorspace 1.0 setgray
chrst 0 0 moveto show setcolorspace setcolor
ft2 0 get setfont chrst 0 0 moveto show}def
/ShadChar{
ft1 setfont
gsave
chrst sfWidth 1 index 0 ne{exch .05 add exch}if
grestore
setcharwidth
chrst .06 0 moveto show
0 .05 translate dblsh}def
/ts{show}def
/ta{/_letterSpace xdf/_spaceXtra xdf}def
/tf{/_textWidth xdf
/_numSpaces xdf
/_stringLength xdf
dup     stringwidth pop
_letterSpace _stringLength 1 sub mul add
_spaceXtra _numSpaces mul add
_textWidth exch sub /wdif xdf
_spaceXtra 0 32
wdif _stringLength div
_letterSpace add
0 6 -1 roll awidthshow}def
/pb{/_PageSave save def/showpage{}def}def
/pe{_PageSave restore}def
/pm{_pm currentmatrix pop}def
/_pm matrix def
/ps{showpage _pm setmatrix}def
level2{/ef {gsave 6 array astore concat dup execform grestore}def}
{/ef{gsave 6 array astore concat newpath dup begin Matrix concat
BBox dup dup 0 get exch 1 get moveto
dup dup 0 get exch 3 get lineto
dup dup 2 get exch 3 get lineto
dup 2 get exch 1 get lineto closepath
clip newpath PaintProc end grestore}def}ifelse
/bc{save 11 1 roll 10 dict begin /BBox 5 1 roll 4 array astore def
/Matrix 7 1 roll 6 array astore def /FormType 1 def/PaintProc{/pp get exec}def}def
/ec{pop restore}def
/printvm{1 vmreclaim vmstatus pop exch pop (                         )cvs print (\n)print flush}def
/setoverprint where {pop}{/setoverprint{pop}def}ifelse
/sstr { /$sstrs exch def /$sstr exch def /$sstry exch def /$sstrx exch def /Courier findfont $sstrs 
scalefont setfont $sstrx $sstry mt stm 1 -1 scale $sstr show rtm } def
/DSIBeginPaintProc{/pp mark{currentfile token not{}if dup/DSIEndPaintProc
        eq{pop counttomark array astore cvx bind /exec load]cvx def DSIEndPaintProc exit}
        {counttomark 300 gt{counttomark array astore cvx bind /exec load}if}ifelse}loop}def
/DSIEndPaintProc{currentdict end}def
/DSIBeginPaintSubProc {save 11 1 roll 10 dict dup /pD exch def begin 
        /BBox 5 1 roll 4 array astore def /Matrix 7 1 roll 6 array astore def 
        /FormType 1 def /PaintProc { /pp get exec } def /pp} def
/DSIEndPaintSubProc {bind def end pD} def
/iaa {/ix ix ixn add def} def
/ias2 {/igap exch def /_st0 ia ix igap add get def _st0} def
/ias {/st0 ia ix get def iaa st0} def
/i85s {0 ias2 /ASCII85Decode filter st0 readstring pop iaa} def
/irles {0 ias2 /ASCII85Decode filter /RunLengthDecode filter st0 readstring pop iaa} def
initialize
end
%%EndResource
CVDict begin 0 id 1 fd
_encodArr 0
[
39/quotesingle 96/grave
128/bullet/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE/bullet/bullet/bullet
/bullet/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron
/guilsinglright/oe/bullet/bullet/Ydieresis
/bullet/exclamdown/cent/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis
/Aring
/AE/Ccedilla/Egrave/Eacute/Egrave/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis
/aring
/ae/ccedilla/egrave/eacute/ecircumflex/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] put
_encodArr 1
[
39/quotesingle 96/grave
128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/blank/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute
/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex
/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
] put
end
%%EndProlog 
%%IncludeFont: CourierNewPSMT
%%IncludeFont: TimesNewRomanPS-ItalicMT
%%IncludeFont: TimesNewRomanPSMT
CVDict begin
/___FN2 /CourierNewPSMT dup dup findfont dup /CharStrings known {begin CharStrings /Adieresis known { -1 }{-1} ifelse end} {pop -1} ifelse rf
/___FN9-2 /Times-Italic dup dup findfont dup /CharStrings known {begin CharStrings /Adieresis known { 0 }{-1} ifelse end} {pop -1} ifelse rf
/___FN9 /Times-Roman dup dup findfont dup /CharStrings known {begin CharStrings /Adieresis known { 0 }{-1} ifelse end} {pop -1} ifelse rf
end
0.25 0.25 translate
%%BeginSetup 
CVDict begin

0 id
1 fd
0 361 translate
300 -300 scli
%%EndSetup 
%%BeginPageSetup 
pm
%%EndPageSetup
/DeviceCMYK scs
0 0 0 1. f4
0.1250 0.1250 sp
 0 lc
 2 lj
T sa
%page rect: 186 205 530 566 
stm
0 0 0 1. f4
4.1667 4.1667 sp
11.5 lm
 0 lj
np
356.294 897.9266 mt
231.2943 1064.5928 li
ds
rtm
stm
0 0 0 1. f4
np
356.294 897.9266 mt
481.2936 1064.5928 li
ds
rtm
stm
0 0 0 1. f4
np
481.2936 1064.5928 mt
606.2933 1231.2591 li
ds
rtm
stm
0 0 0 1. f4
np
606.2933 1231.2591 mt
647.9599 1397.9253 li
ds
rtm
stm
0 0 0 1. f4
np
481.2936 1064.5928 mt
356.294 1231.2591 li
ds
rtm
stm
0 0 0 1. f4
np
606.2933 1231.2591 mt
481.2936 1397.9253 li
ds
rtm
stm
0 0 0 1. f4
np
356.294 1231.2591 mt
314.6274 1397.9253 li
ds
rtm
stm
0 0 0 1. f4
np
356.294 1231.2591 mt
481.2936 1397.9253 li
ds
rtm
stm
0 0 0 0 f4
np
41.6666 41.6666 356.294 897.9266 ep
de
0 0 0 1. f4
np
41.6666 41.6666 356.294 897.9266 ep
ds
rtm
stm
stm
41.6666 fts
/___FN2 cvsf
0 0 0 1. f4
F sa
344.7912 908.3427 mt
(1)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
41.6666 41.6666 481.2936 1064.5928 ep
de
0 0 0 1. f4
np
41.6666 41.6666 481.2936 1064.5928 ep
ds
rtm
stm
stm
0 0 0 1. f4
F sa
469.7909 1075.009 mt
(2)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
41.6666 41.6666 356.294 1231.2591 ep
de
0 0 0 1. f4
np
41.6666 41.6666 356.294 1231.2591 ep
ds
rtm
stm
stm
0 0 0 1. f4
F sa
344.7912 1241.6752 mt
(3)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
41.6666 41.6666 606.2933 1231.2591 ep
de
0 0 0 1. f4
np
41.6666 41.6666 606.2933 1231.2591 ep
ds
rtm
stm
stm
0 0 0 1. f4
F sa
594.7906 1241.6752 mt
(3)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
275.0442 1356.2479 358.3773 1439.581 rp
de
0 0 0 1. f4
np
275.0442 1356.2479 358.3773 1439.581 rp
ds
rtm
stm
stm
0 0 0 1. f4
F sa
303.1246 1406.2473 mt
(0)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
189.6277 1022.9154 272.9608 1106.2485 rp
de
0 0 0 1. f4
np
189.6277 1022.9154 272.9608 1106.2485 rp
ds
rtm
stm
stm
0 0 0 1. f4
F sa
219.7915 1074.9981 mt
(1)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
608.3767 1358.3421 691.7098 1441.6752 rp
de
0 0 0 1. f4
np
608.3767 1358.3421 691.7098 1441.6752 rp
ds
rtm
stm
stm
0 0 0 1. f4
F sa
636.4571 1408.3415 mt
(1)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
416.4501 887.4985 mt
(a1,b1) [25.00 25.00 25.00 25.00 0 ] xshow
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
541.4498 1054.1648 mt
(a2,b1) [25.00 25.00 25.00 25.00 0 ] xshow
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
166.4526 1220.8311 mt
(a2,b3) [25.00 25.00 25.00 25.00 0 ] xshow
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
41.4529 1054.1648 mt
(a3,b1) [25.00 25.00 25.00 25.00 0 ] xshow
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
250.9566 1491.6637 mt
(a4,b3) [25.00 25.00 25.00 25.00 0 ] xshow
T sa
rtm
rtm
stm
stm
37.4999 fts
/___FN2 cvsf
0 0 0 1. f4
F sa
262.711 969.5926 mt
(0)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
429.3773 969.5926 mt
(1)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
554.377 1136.2589 mt
(1)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
658.5434 1302.9251 mt
(1)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
387.7107 1136.2589 mt
(0)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
512.7104 1302.9251 mt
(0)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
429.3773 1302.9251 mt
(0)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
304.3776 1136.2589 mt
(1)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
304.3776 1302.9251 mt
(1)  show
T sa
rtm
rtm
stm
stm
41.6666 fts
/___FN2 cvsf
0 0 0 1. f4
F sa
666.4494 1220.8311 mt
(a2,b2) [25.00 25.00 25.00 25.00 0 ] xshow
T sa
rtm
rtm
stm
0 0 0 0 f4
np
441.7104 1356.2479 525.0435 1439.581 rp
de
0 0 0 1. f4
np
441.7104 1356.2479 525.0435 1439.581 rp
ds
rtm
stm
stm
0 0 0 1. f4
F sa
469.7909 1406.2473 mt
(1)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
417.6229 1491.6637 mt
(a3,b3) [25.00 25.00 25.00 25.00 0 ] xshow
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
584.2891 1491.6637 mt
(a4,b4) [25.00 25.00 25.00 25.00 0 ] xshow
T sa
rtm
rtm
stm
stm
49.9999 fts
/___FN9 cvsf
0 0 0 1. f4
F sa
237.3589 815.8322 mt
(Evaluation Graph) [30.50 25.00 22.00 14.00 25.00 22.00 14.00 14.00 25.00 25.00 12.50 36.00 16.50 22.00 25.00 0 ] xshow
T sa
rtm
rtm
stm
0 0 0 1. f4
np
351.6065 145.8342 mt
226.6068 645.833 li
ds
rtm
stm
0 0 0 1. f4
np
351.6065 145.8342 mt
434.9396 479.1667 li
ds
rtm
stm
0 0 0 1. f4
np
434.9396 479.1667 mt
226.6068 645.833 li
ds
rtm
stm
0 0 0 1. f4
np
434.9396 479.1667 mt
476.6062 645.833 li
ds
rtm
stm
0 0 0 0 f4
np
41.6666 41.6666 353.9502 147.9284 ep
de
0 0 0 1. f4
np
41.6666 41.6666 353.9502 147.9284 ep
ds
rtm
stm
stm
41.6666 fts
/___FN2 cvsf
0 0 0 1. f4
F sa
342.4474 158.3445 mt
(1)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
41.6666 41.6666 437.2833 481.2609 ep
de
0 0 0 1. f4
np
41.6666 41.6666 437.2833 481.2609 ep
ds
rtm
stm
stm
0 0 0 1. f4
F sa
425.7806 491.677 mt
(3)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
439.3667 606.2497 522.6998 689.5829 rp
de
0 0 0 1. f4
np
439.3667 606.2497 522.6998 689.5829 rp
ds
rtm
stm
stm
0 0 0 1. f4
F sa
467.4471 656.2491 mt
(0)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
187.2839 606.2497 270.6171 689.5829 rp
de
0 0 0 1. f4
np
187.2839 606.2497 270.6171 689.5829 rp
ds
rtm
stm
stm
0 0 0 1. f4
F sa
217.4477 658.3324 mt
(1)  show
T sa
rtm
rtm
stm
stm
37.4999 fts
/___FN2 cvsf
0 0 0 1. f4
F sa
278.8568 217.5002 mt
(0)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
403.8565 217.5002 mt
(1)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
487.1896 550.8327 mt
(1)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
320.5234 550.8327 mt
(0)  show
T sa
rtm
rtm
stm
stm
41.6666 fts
/___FN2 cvsf
0 0 0 1. f4
F sa
414.1063 137.5004 mt
(a1) [25.00 0 ] xshow
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
497.4394 470.8329 mt
(a2) [25.00 0 ] xshow
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
289.1066 637.4991 mt
(a3) [25.00 0 ] xshow
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
539.106 637.4991 mt
(a4) [25.00 0 ] xshow
T sa
rtm
rtm
stm
0 0 0 1. f4
np
1143.2712 479.1667 mt
976.6049 645.833 li
ds
rtm
stm
0 0 0 1. f4
np
1020.6152 314.5946 mt
976.6049 645.833 li
ds
rtm
stm
0 0 0 1. f4
np
1020.6152 314.5946 mt
1143.2712 479.1667 li
ds
rtm
stm
0 0 0 1. f4
np
1143.2712 479.1667 mt
1226.6043 645.833 li
ds
rtm
stm
0 0 0 0 f4
np
41.6666 41.6666 1020.6152 314.5946 ep
de
0 0 0 1. f4
np
41.6666 41.6666 1020.6152 314.5946 ep
ds
rtm
stm
stm
0 0 0 1. f4
F sa
1009.1125 325.0108 mt
(2)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
41.6666 41.6666 1145.6149 481.2609 ep
de
0 0 0 1. f4
np
41.6666 41.6666 1145.6149 481.2609 ep
ds
rtm
stm
stm
0 0 0 1. f4
F sa
1134.1122 491.677 mt
(3)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
939.3654 606.2497 1022.6986 689.5829 rp
de
0 0 0 1. f4
np
939.3654 606.2497 1022.6986 689.5829 rp
ds
rtm
stm
stm
0 0 0 1. f4
F sa
967.4459 656.2491 mt
(0)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
1187.2815 606.2497 1270.6146 689.5829 rp
de
0 0 0 1. f4
np
1187.2815 606.2497 1270.6146 689.5829 rp
ds
rtm
stm
stm
0 0 0 1. f4
F sa
1217.4453 658.3324 mt
(1)  show
T sa
rtm
rtm
stm
stm
37.4999 fts
/___FN2 cvsf
0 0 0 1. f4
F sa
1195.5212 550.8327 mt
(1)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
966.3551 384.1665 mt
(0)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
1028.855 550.8327 mt
(0)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
1091.3548 384.1665 mt
(1)  show
T sa
rtm
rtm
stm
stm
41.6666 fts
/___FN2 cvsf
0 0 0 1. f4
F sa
1080.7713 304.1666 mt
(b1) [25.00 0 ] xshow
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
1205.771 470.8329 mt
(b2) [25.00 0 ] xshow
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
1289.1042 637.4991 mt
(b4) [25.00 0 ] xshow
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
1039.1048 637.4991 mt
(b3) [25.00 0 ] xshow
T sa
rtm
rtm
stm
0 0 0 1. f4
np
1103.9484 895.8324 mt
1062.2818 1062.4986 li
ds
rtm
stm
0 0 0 1. f4
np
1103.9484 895.8324 mt
1228.9481 1395.8311 li
ds
rtm
stm
0 0 0 1. f4
np
1228.9481 1395.8311 mt
1020.6152 1229.1649 li
ds
rtm
stm
0 0 0 1. f4
np
1062.2818 1062.4986 mt
1020.6152 1229.1649 li
ds
rtm
stm
0 0 0 1. f4
np
1062.2818 1062.4986 mt
1228.9481 1395.8311 li
ds
rtm
stm
0 0 0 0 f4
np
41.6666 41.6666 1106.2921 897.9266 ep
de
0 0 0 1. f4
np
41.6666 41.6666 1106.2921 897.9266 ep
ds
rtm
stm
stm
0 0 0 1. f4
F sa
1094.7894 908.3427 mt
(1)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
41.6666 41.6666 1064.6256 1064.5928 ep
de
0 0 0 1. f4
np
41.6666 41.6666 1064.6256 1064.5928 ep
ds
rtm
stm
stm
0 0 0 1. f4
F sa
1053.1228 1075.009 mt
(2)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
1189.6253 1356.2479 1272.9584 1439.581 rp
de
0 0 0 1. f4
np
1189.6253 1356.2479 1272.9584 1439.581 rp
ds
rtm
stm
stm
0 0 0 1. f4
F sa
1219.789 1408.3306 mt
(1)  show
T sa
rtm
rtm
stm
stm
37.4999 fts
/___FN2 cvsf
0 0 0 1. f4
F sa
1156.1984 967.4984 mt
(0)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
1031.1987 967.4984 mt
(1)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
947.8656 1300.8309 mt
(1)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
989.5322 1134.1646 mt
(0)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
1114.5319 1300.8309 mt
(0)  show
T sa
rtm
rtm
stm
stm
0 0 0 1. f4
F sa
1114.5319 1134.1646 mt
(1)  show
T sa
rtm
rtm
stm
0 0 0 1. f4
np
1020.6152 1229.1649 mt
978.9487 1395.8311 li
ds
rtm
stm
0 0 0 0 f4
np
41.6666 41.6666 1022.959 1231.2591 ep
de
0 0 0 1. f4
np
41.6666 41.6666 1022.959 1231.2591 ep
ds
rtm
stm
stm
41.6666 fts
/___FN2 cvsf
0 0 0 1. f4
F sa
1011.4562 1241.6752 mt
(3)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
941.7092 1356.2479 1025.0423 1439.581 rp
de
0 0 0 1. f4
np
941.7092 1356.2479 1025.0423 1439.581 rp
ds
rtm
stm
stm
0 0 0 1. f4
F sa
969.7897 1406.2473 mt
(0)  show
T sa
rtm
rtm
stm
stm
49.9999 fts
/___FN9 cvsf
0 0 0 1. f4
F sa
940.1071 815.8322 mt
(After Reduction) [36.00 16.50 14.00 22.00 16.50 12.50 33.50 22.00 25.00 25.00 22.00 14.00 14.00 25.00 0 ] xshow
T sa
rtm
rtm
stm
stm
49.9999 fts
/___FN9-2 cvsf
0 0 0 1. f4
F sa
293.2316 61.6674 mt
(x)  show
T sa
rtm
stm
41.6666 fts
/___FN9 cvsf
0 0 0 1. f4
F sa
315.2309 77.6674 mt
(1)  show
T sa
rtm
stm
49.9999 fts
/___FN9 cvsf
0 0 0 1. f4
F sa
336.0638 61.6674 mt
( )  show
T sa
rtm
stm
0 0 0 1. f4
F sa
348.5634 44.6674 mt
(.)  show
T sa
rtm
stm
0 0 0 1. f4
F sa
361.063 61.6674 mt
( )  show
T sa
rtm
stm
49.9999 fts
/___FN9-2 cvsf
0 0 0 1. f4
F sa
373.5626 61.6674 mt
(x)  show
T sa
rtm
stm
41.6666 fts
/___FN9 cvsf
0 0 0 1. f4
F sa
395.562 77.6674 mt
(3)  show
T sa
rtm
rtm
stm
0 0 0 1. f4
np
292.2256 20.8669 mt
414.1063 20.8345 li
ds
rtm
stm
stm
49.9999 fts
/___FN9-2 cvsf
0 0 0 1. f4
F sa
980.724 61.6998 mt
(x)  show
T sa
rtm
stm
41.6666 fts
/___FN9 cvsf
0 0 0 1. f4
F sa
1002.7233 77.6998 mt
(1)  show
T sa
rtm
stm
49.9999 fts
/___FN9 cvsf
0 0 0 1. f4
F sa
1023.5561 61.6998 mt
( )  show
T sa
rtm
stm
0 0 0 1. f4
F sa
1036.0557 44.6998 mt
(.)  show
T sa
rtm
stm
0 0 0 1. f4
F sa
1048.5553 61.6998 mt
( )  show
T sa
rtm
stm
49.9999 fts
/___FN9-2 cvsf
0 0 0 1. f4
F sa
1061.055 61.6998 mt
(x)  show
T sa
rtm
stm
41.6666 fts
/___FN9 cvsf
0 0 0 1. f4
F sa
1083.0543 77.6998 mt
(2)  show
T sa
rtm
rtm
stm
stm
74.9998 fts
/___FN9 cvsf
0 0 0 1. f4
F sa
668.2247 67.533 mt
(+)  show
T sa
rtm
rtm
stm
stm
49.9999 fts
/___FN9-2 cvsf
0 0 0 1. f4
F sa
1230.7293 915.832 mt
(x)  show
T sa
rtm
stm
41.6666 fts
/___FN9 cvsf
0 0 0 1. f4
F sa
1252.7287 931.832 mt
(1)  show
T sa
rtm
stm
49.9999 fts
/___FN9 cvsf
0 0 0 1. f4
F sa
1273.5615 915.832 mt
( )  show
T sa
rtm
stm
0 0 0 1. f4
F sa
1286.0611 898.832 mt
(.)  show
T sa
rtm
stm
0 0 0 1. f4
F sa
1298.5607 915.832 mt
( )  show
T sa
rtm
stm
49.9999 fts
/___FN9-2 cvsf
0 0 0 1. f4
F sa
1311.0603 915.832 mt
(x)  show
T sa
rtm
stm
41.6666 fts
/___FN9 cvsf
0 0 0 1. f4
F sa
1333.0597 931.832 mt
(2)  show
T sa
rtm
stm
49.9999 fts
/___FN9 cvsf
0 0 0 1. f4
F sa
1353.8925 915.832 mt
( )  show
T sa
rtm
stm
0 0 0 1. f4
F sa
1366.3921 898.832 mt
(.)  show
T sa
rtm
stm
0 0 0 1. f4
F sa
1378.8917 915.832 mt
( )  show
T sa
rtm
stm
49.9999 fts
/___FN9-2 cvsf
0 0 0 1. f4
F sa
1391.3913 915.832 mt
(x)  show
T sa
rtm
stm
41.6666 fts
/___FN9 cvsf
0 0 0 1. f4
F sa
1413.3907 931.832 mt
(3)  show
T sa
rtm
rtm
stm
0 0 0 1. f4
np
1309.9375 874.9991 mt
1351.604 874.9991 li
ds
rtm
stm
0 0 0 1. f4
np
1226.6043 854.1658 mt
1434.9372 854.1658 li
ds
rtm
terminate

%%EndDocument
 PE 10 SS 
25184 44830 MT
(Figure 7.Example of)SH
/Times-Italic SF
33683 XM
(Apply)SH
7200 46621 MT
(Apply-step)SH
/Times-Roman SF
11757 XM
(was invoked)
30 W( in creating this vertex.  Each of our two refinements is applied once: when the procedure is)31 W
7200 47998 MT
(invoked on vertices a3 and b1)
62 W( \050because 1 is a controlling value for this operator\051, and on the second invocation on)61 W
7200 49375 MT
(vertices a3 and b3.  For larger graphs, we would expect these refinements to be applied)
150 W( more often.  After the)151 W
7200 50752 MT
(reduction algorithm has been applied, we see that the resulting graph indeed represents the function)SH
/Symbol SF
47398 XM
(\330)SH
/Times-Roman SF
48261 XM
(\050)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
49038 51097 MT
(1)SH
10 /Symbol AF
49438 50752 MT
(\327)SH
/Times-Italic SF
(x)SH
/Symbol SF
49688 50371 MT
(-)SH
8 /Times-Roman AF
50237 51097 MT
(2)SH
10 /Symbol AF
50637 50752 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
51331 51097 MT
(3)SH
10 SS 
51731 50752 MT
(\051.)SH
11 /Times-Bold AF
7200 54369 MT
(4.4. Restriction)SH
10 /Times-Roman AF
8200 55746 MT
(The restriction algorithm transforms the graph representing a function)75 W
/Times-Italic SF
37120 XM
(f)SH
/Times-Roman SF
37723 XM
(into one representing the)
75 W( function)74 W
/Times-Italic SF
51844 XM
(f)SH
/Symbol SF
52372 XM
(|)SH
8 /Times-Italic AF
52572 56091 MT
(x)SH
52927 56436 MT
(i)SH
/Times-Roman SF
53149 56091 MT
(=)SH
/Times-Italic SF
(b)SH
10 /Times-Roman AF
7200 57297 MT
(for specified values of)191 W
/Times-Italic SF
17128 XM
(i)SH
/Times-Roman SF
17847 XM
(and)SH
/Times-Italic SF
19733 XM
(b)SH
/Times-Roman SF
(. This)
634 W( algorithm proceeds by traversing the graph in the manner shown in the)192 W
7200 58674 MT
(procedure)SH
/Times-Italic SF
11520 XM
(Traverse)SH
/Times-Roman SF
15397 XM
(looking for every pointer \050either to the root of the graph)
72 W( or from some vertex to its child\051 to a)71 W
7200 60051 MT
(vertex)SH
/Times-Italic SF
9970 XM
(v)SH
/Times-Roman SF
10685 XM
(such that)21 W
/Times-Italic SF
14561 XM
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 =)SH
/Times-Italic SF
18901 XM
(i)SH
/Times-Roman SF
(. When)
294 W( such a pointer is encountered, it is changed to point either to)22 W
/Times-Italic SF
47255 XM
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 \050for)22 W
/Times-Italic SF
51853 XM
(b)SH
/Times-Roman SF
52603 XM
(=0\051)SH
7200 61428 MT
(or to)21 W
/Times-Italic SF
9353 XM
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 \050for)21 W
/Times-Italic SF
14282 XM
(b)SH
/Times-Roman SF
15032 XM
(= 1.\051)
SH( Finally,)
292 W( the procedure)21 W
/Times-Italic SF
26588 XM
(Reduce)SH
/Times-Roman SF
29802 XM
(is called to)
21 W( reduce the graph and to assign unique identifiers)20 W
7200 62805 MT
(to the vertices.  The amount computation required for)
140 W( each vertex is constant, and hence the complexity of this)141 W
7200 64182 MT
(algorithm is O)
150 4 WX(\050)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
/Symbol SF
(|)SH
/Times-Roman SF
(\051. Note)
258 W( that this algorithm could simultaneously restrict several)
4 W( of the function arguments without)3 W
7200 65559 MT
(changing the complexity.)SH
ES
%%Page: 16 16

61200 79200 BS
0 SI
10 /Times-Roman AF
30100 4286 MT
(16)SH
11 /Times-Bold AF
7200 7937 MT
(4.5. Composition)SH
10 /Times-Roman AF
8200 9314 MT
(The composition algorithm constructs the graph for the)
153 W( function obtained by composing two functions.  This)154 W
7200 10691 MT
(algorithm allows)
159 W( us to more quickly derive the functions for a logic network or expression containing repeated)158 W
7200 12068 MT
(structures, a common occurrence in structured designs.)
95 W( Composition)
442 W( can be expressed in terms of restriction and)96 W
7200 13445 MT
(Boolean operations, according to the following expansion, derived)
86 W( directly from the Shannon expansion \050equation)85 W
7200 14822 MT
(1\051:)SH
52834 16613 MT
(\0502\051)SH
/Times-Italic SF
11200 17718 MT
(f)SH
8 /Times-Roman AF
11478 18063 MT
(1)SH
10 /Symbol AF
12028 17718 MT
(|)SH
8 /Times-Italic AF
12228 18063 MT
(x)SH
12583 18408 MT
(i)SH
/Times-Roman SF
12805 18063 MT
(=)SH
/Times-Italic SF
(f)SH
/Times-Roman SF
13478 18408 MT
(2)SH
10 SS 
14564 17718 MT
(=)SH
/Times-Italic SF
15814 XM
(f)SH
8 /Times-Roman AF
16092 18063 MT
(2)SH
10 /Symbol AF
16492 17718 MT
(\327)SH
/Times-Italic SF
(f)SH
8 /Times-Roman AF
17020 18063 MT
(1)SH
10 /Symbol AF
17570 17718 MT
(|)SH
8 /Times-Italic AF
17770 18063 MT
(x)SH
18125 18408 MT
(i)SH
/Times-Roman SF
18347 18063 MT
(=1)SH
10 SS 
19448 17718 MT
(+ \050)SH
/Symbol SF
20745 XM
(\330)SH
/Times-Italic SF
21608 XM
(f)SH
8 /Times-Roman AF
21886 18063 MT
(2)SH
10 SS 
22286 17718 MT
(\051)SH
/Symbol SF
(\327)SH
/Times-Italic SF
(f)SH
8 /Times-Roman AF
23147 18063 MT
(1)SH
10 /Symbol AF
23697 17718 MT
(|)SH
8 /Times-Italic AF
23897 18063 MT
(x)SH
24252 18408 MT
(i)SH
/Times-Roman SF
24474 18063 MT
(=0)SH
10 SS 
7200 19269 MT
(Thus, our algorithms for restriction and application are sufficient to implement composition.)
83 W( However,)
418 W( if the two)84 W
7200 20646 MT
(functions are represented by graphs)293 W
/Times-Italic SF
23132 XM
(G)SH
8 /Times-Roman AF
23854 20991 MT
(1)SH
10 SS 
24796 20646 MT
(and)SH
/Times-Italic SF
26782 XM
(G)SH
8 /Times-Roman AF
27504 20991 MT
(2)SH
10 SS 
27904 20646 MT
(, respectively, we would obtain a worst case complexity of)292 W
7200 22060 MT
(O)
150 MX(\050)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
9327 22405 MT
(1)SH
10 /Symbol AF
9727 22060 MT
(|)SH
8 /Times-Roman AF
9927 21715 MT
(2)SH
10 /Symbol AF
10327 22060 MT
(\327|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
11499 22405 MT
(2)SH
10 /Symbol AF
11899 22060 MT
(|)SH
8 /Times-Roman AF
12099 21715 MT
(2)SH
10 SS 
12499 22060 MT
(\051. We)
386 W( can improve this complexity to O)
150 68 WX(\050)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
30585 22405 MT
(1)SH
10 /Symbol AF
30985 22060 MT
(|)SH
8 /Times-Roman AF
31185 21715 MT
(2)SH
10 /Symbol AF
31585 22060 MT
(\327|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
32757 22405 MT
(2)SH
10 /Symbol AF
33157 22060 MT
(|)SH
/Times-Roman SF
(\051 by observing)
68 W( that equation 2 can be expressed in)69 W
7200 23437 MT
(terms of a ternary Boolean operation)SH
/Times-Italic SF
22141 XM
(ITE)SH
/Times-Roman SF
23891 XM
(\050short for if-then-else\051)SH
/Times-Italic SF
9200 25342 MT
(ITE)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(a)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
11933 XM
(b)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
12833 XM
(c)SH
/Times-Roman SF
(\051 =)436 W
/Times-Italic SF
15546 XM
(a)SH
/Symbol SF
(\327)SH
/Times-Italic SF
(b)SH
/Times-Roman SF
17046 XM
(+\050)SH
/Symbol SF
18093 XM
(\330)SH
/Times-Italic SF
18956 XM
(a)SH
/Times-Roman SF
(\051)SH
/Symbol SF
(\327)SH
/Times-Italic SF
(c)SH
/Times-Roman SF
7200 26976 MT
(This operation can be applied to the three functions)39 W
/Times-Italic SF
28353 XM
(f)SH
8 /Times-Roman AF
28631 27321 MT
(2)SH
10 SS 
29031 26976 MT
(,)SH
/Times-Italic SF
29570 XM
(f)SH
8 /Times-Roman AF
29848 27321 MT
(1)SH
10 /Symbol AF
30398 26976 MT
(|)SH
8 /Times-Italic AF
30598 27321 MT
(x)SH
30953 27666 MT
(i)SH
/Times-Roman SF
31175 27321 MT
(=1)SH
10 SS 
32026 26976 MT
(, and)39 W
/Times-Italic SF
34298 XM
(f)SH
8 /Times-Roman AF
34576 27321 MT
(1)SH
10 /Symbol AF
35126 26976 MT
(|)SH
8 /Times-Italic AF
35326 27321 MT
(x)SH
35681 27666 MT
(i)SH
/Times-Roman SF
35903 27321 MT
(=0)SH
10 SS 
37043 26976 MT
(by an extension of the)38 W
/Times-Italic SF
46315 XM
(Apply)SH
/Times-Roman SF
48936 XM
(procedure to)38 W
7200 28527 MT
(ternary operations.  The procedure)23 W
/Times-Italic SF
21366 XM
(Compose)SH
/Times-Roman SF
25361 XM
(shown in Figure 8 utilizes this technique to compose two)
23 W( functions.  In)24 W
7200 29904 MT
(this code the recursive routine)35 W
/Times-Italic SF
19678 XM
(Compose-step)SH
/Times-Roman SF
25629 XM
(both applies the operation)35 W
/Times-Italic SF
36379 XM
(ITE)SH
/Times-Roman SF
38164 XM
(and computes the restrictions of)35 W
/Times-Italic SF
51365 XM
(f)SH
8 /Times-Roman AF
51643 30249 MT
(1)SH
10 SS 
52327 29904 MT
(as it)34 W
7200 31281 MT
(traverses the graphs.)SH
8200 33760 MT
(It is unclear whether the efficiency of this algorithm truly has a quadratic dependence on the size)
155 W( of its first)156 W
7200 35137 MT
(argument, or whether this indicates a weakness in our performance analysis.  We have found no cases)
110 W( for which)109 W
7200 36514 MT
(composition requires time greater than O)
150 0 WX(\050)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
25019 36859 MT
(1)SH
10 /Symbol AF
25419 36514 MT
(|\327|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
26791 36859 MT
(2)SH
10 /Symbol AF
27191 36514 MT
(|)SH
/Times-Roman SF
(\051.)SH
8 SS 
27974 36169 MT
(8)SH
10 SS 
8200 38993 MT
(In many instances, two functions can)
163 W( be composed in a simpler and more efficient way by a more syntactic)164 W
7200 40370 MT
(technique.)SH
8 SS 
11338 40025 MT
(9)SH
10 SS 
12256 40370 MT
(That is suppose functions)9 W
/Times-Italic SF
22736 XM
(f)SH
8 /Times-Roman AF
23014 40715 MT
(1)SH
10 SS 
23673 40370 MT
(and)SH
/Times-Italic SF
25376 XM
(f)SH
8 /Times-Roman AF
25654 40715 MT
(2)SH
10 SS 
26313 40370 MT
(are represented by)
9 W( graphs)8 W
/Times-Italic SF
36843 XM
(G)SH
8 /Times-Roman AF
37565 40715 MT
(1)SH
10 SS 
38223 40370 MT
(and)SH
/Times-Italic SF
39925 XM
(G)SH
8 /Times-Roman AF
40647 40715 MT
(2)SH
10 SS 
41047 40370 MT
(, respectively.  We can compose)8 W
7200 41747 MT
(the functions by replacing each)
107 W( vertex)108 W
/Times-Italic SF
23340 XM
(v)SH
/Times-Roman SF
24142 XM
(in graph)108 W
/Times-Italic SF
27913 XM
(G)SH
8 /Times-Roman AF
28635 42092 MT
(1)SH
10 SS 
29393 41747 MT
(having index)108 W
/Times-Italic SF
35053 XM
(i)SH
/Times-Roman SF
35689 XM
(by a copy of)108 W
/Times-Italic SF
41342 XM
(G)SH
8 /Times-Roman AF
42064 42092 MT
(2)SH
10 SS 
42464 41747 MT
(, replacing each branch to a)108 W
7200 43124 MT
(terminal vertex in)9 W
/Times-Italic SF
14587 XM
(G)SH
8 /Times-Roman AF
15309 43469 MT
(2)SH
10 SS 
15967 43124 MT
(by a branch to)8 W
/Times-Italic SF
21942 XM
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 or)8 W
/Times-Italic SF
25846 XM
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051 depending on the value of the terminal vertex.  We can do this)8 W
7200 44501 MT
(however, only if the)
2 W( resulting graph would not violate our index ordering restriction.  That is, there can be no indices)3 W
/Times-Italic SF
7200 45878 MT
(j)SH
/Symbol SF
7778 XM
(\316)SH
/Times-Italic SF
8791 XM
(I)SH
8 SS 
9124 46223 MT
(f)SH
/Times-Roman SF
9346 46568 MT
(1)SH
10 SS 
9746 45878 MT
(,)SH
/Times-Italic SF
10315 XM
(k)SH
/Symbol SF
11059 XM
(\316)SH
/Times-Italic SF
12072 XM
(I)SH
8 SS 
12405 46223 MT
(f)SH
/Times-Roman SF
12627 46568 MT
(2)SH
10 SS 
13027 45878 MT
(, such)
69 W( that)68 W
/Times-Italic SF
17565 XM
(i)SH
/Times-Roman SF
17993 XM
(<)SH
/Times-Italic SF
18707 XM
(j)SH
/Symbol SF
19135 XM
(\243)SH
/Times-Italic SF
19834 XM
(k)SH
/Times-Roman SF
20596 XM
(or)SH
/Times-Italic SF
21747 XM
(i)SH
/Times-Roman SF
22175 XM
(>)SH
/Times-Italic SF
22889 XM
(j)SH
/Symbol SF
23317 XM
(\263)SH
/Times-Italic SF
24016 XM
(k)SH
/Times-Roman SF
(. Assuming)
386 W( both)68 W
/Times-Italic SF
31816 XM
(G)SH
8 /Times-Roman AF
32538 46223 MT
(1)SH
10 SS 
33256 45878 MT
(and)SH
/Times-Italic SF
35018 XM
(G)SH
8 /Times-Roman AF
35740 46223 MT
(2)SH
10 SS 
36458 45878 MT
(are reduced, the graph resulting from these)68 W
7200 47429 MT
(replacements is also reduced, and we can even avoid applying the reduction algorithm.)
13 W( While)
277 W( this technique applies)14 W
7200 48806 MT
(only under restricted conditions, we have found it a worthwhile optimization.)SH
11 /Times-Bold AF
7200 52423 MT
(4.6. Satisfy)SH
10 /Times-Roman AF
8200 53800 MT
(There are many questions)
187 W( one could ask about the satisfying set)186 W
/Times-Italic SF
35995 XM
(S)SH
8 SS 
36495 54145 MT
(f)SH
10 /Times-Roman AF
37303 53800 MT
(for a function, including the number of)186 W
7200 55177 MT
(elements, a listing of the elements, or perhaps just a single element.)
42 W( As)
335 W( can be seen from Table 1, these operations)43 W
7200 56554 MT
(are performed by algorithms of widely varying complexity.  A single element can be found in time proportional to)3 W
/Times-Italic SF
53250 XM
(n)SH
/Times-Roman SF
(,)SH
7200 57931 MT
(the number of function arguments, assuming the graph is reduced.  Considering that the value of)
27 W( an element in)28 W
/Times-Italic SF
52183 XM
(S)SH
8 SS 
52683 58276 MT
(f)SH
10 /Times-Roman AF
53333 57931 MT
(is)SH
7200 59308 MT
(specified by a)
18 W( bit sequence of length)17 W
/Times-Italic SF
22179 XM
(n)SH
/Times-Roman SF
(, this algorithm is optimal.  We can list all elements of)17 W
/Times-Italic SF
44827 XM
(S)SH
8 SS 
45327 59653 MT
(f)SH
10 /Times-Roman AF
45966 59308 MT
(in time proportional)17 W
7200 60685 MT
(to)SH
/Times-Italic SF
8239 XM
(n)SH
/Times-Roman SF
9000 XM
(times the)
11 W( number of elements, which again is optimal.  However, this is generally not a wise thing to do---many)12 W
7200 62062 MT
(functions that are represented by small graphs have very large satisfying sets.  For example, the)
187 W( function)186 W
/Times-Bold SF
52397 XM
(1)SH
/Times-Roman SF
53333 XM
(is)SH
7200 63439 MT
(represented by a graph with one vertex, yet)
31 W( all 2)32 W
8 /Times-Italic AF
26754 63094 MT
(n)SH
10 /Times-Roman AF
27436 63439 MT
(possible combinations of argument values are in its satisfying set.)32 W
10800 50 7200 66366 UL
6 SS 
8000 67705 MT
(8)SH
8 /Times-Bold AF
8300 68014 MT
(Update:)SH
/Times-Roman SF
11401 XM
(Jain)SH
/Times-Italic SF
13035 XM
(et al.)146 W
/Times-Roman SF
15126 XM
(\050J. Jain,)146 W
/Times-Italic SF
18083 XM
(et al.)146 W
/Times-Roman SF
(, "Analysis of Composition Complexity)
146 W( and How to Obtain Smaller Canonical Graphs",)147 W
/Times-Italic SF
49965 XM
(37th Design)147 W
7200 69083 MT
(Automation Conference)44 W
/Times-Roman SF
(, 2000, pp. 681-686.\051  have shown an example for which the resulting graph is of size O)
150 44 WX(\050)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
/Times-Roman SF
44864 69428 MT
(1)SH
/Symbol SF
45264 69083 MT
(|)SH
/Times-Roman SF
45424 68738 MT
(2)SH
/Symbol SF
45824 69083 MT
(\327|)SH
/Times-Italic SF
(G)SH
/Times-Roman SF
46762 69428 MT
(2)SH
/Symbol SF
47162 69083 MT
(|)SH
/Times-Roman SF
(\051. In)
287 W( the worst case,)43 W
7200 70152 MT
(the algorithm)SH
/Times-Italic SF
11686 XM
(does)SH
/Times-Roman SF
13352 XM
(have a quadratic dependence on the size of its first argument.)SH
6 SS 
8000 71691 MT
(9)SH
8 /Times-Bold AF
8300 72000 MT
(Update:)SH
/Times-Roman SF
11255 XM
(Elena Dubrova \050private correspondence, Feb., 2000\051 pointed out that this approach can yield a non-reduced graph.)SH
ES
%%Page: 17 17

61200 79200 BS
0 SI
10 /Times-Roman AF
30100 4286 MT
(17)SH
9200 7886 MT
(function)SH
/Times-Italic SF
12783 XM
(Compose)SH
/Times-Roman SF
(\050v1, v2: vertex; i:integer\051: vertex)SH
11718 8991 MT
(var T: array[1..)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
18693 9336 MT
(1)SH
10 /Symbol AF
19093 8991 MT
(|)SH
/Times-Roman SF
(, 1..)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
21715 9336 MT
(1)SH
10 /Symbol AF
22115 8991 MT
(|)SH
/Times-Roman SF
(, 1..)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
8 /Times-Roman AF
24737 9336 MT
(2)SH
10 /Symbol AF
25137 8991 MT
(|)SH
/Times-Roman SF
(] of vertex;)SH
11718 11201 MT
({Recursive routine to implement)SH
/Times-Italic SF
25086 XM
(Compose)SH
/Times-Roman SF
(})SH
11718 12306 MT
(function)SH
/Times-Italic SF
15301 XM
(Compose-step)SH
/Times-Roman SF
(\050vlow1, vhigh1, v2: vertex\051: vertex;)SH
11718 13411 MT
(begin)SH
14236 14516 MT
({Perform restrictions})SH
14236 15621 MT
(if vlow1.index = i then vlow1 := vlow1.low;)SH
14236 16726 MT
(if vhigh1.index = i then vhigh1 := vhigh1.high;)SH
14236 17831 MT
({Apply operation)SH
/Times-Italic SF
21493 XM
(ITE)SH
/Times-Roman SF
23143 XM
(})SH
14236 18936 MT
(u := T[vlow1.id, vhigh1.id, v2.id];)SH
14236 20041 MT
(if u)SH
/Symbol SF
15997 XM
(\271)SH
/Times-Roman SF
16946 XM
(null then return\050u\051; {have already evaluated})SH
14236 21146 MT
(u := new vertex record; u.mark := false;)SH
14236 22251 MT
(T[vlow1.id, vhigh1.id, v2.id] := u; {add vertex to table})SH
14236 23356 MT
(u.value := \050)SH
/Symbol SF
18977 XM
(\330)SH
/Times-Roman SF
20090 XM
(v2.value)SH
/Symbol SF
23756 XM
(\327)SH
/Times-Roman SF
24256 XM
(vlow1.value\051 + \050v2.value)SH
/Symbol SF
34568 XM
(\327)SH
/Times-Roman SF
35068 XM
(vhigh1.value\051;)SH
14236 24461 MT
(if u.value)SH
/Symbol SF
18413 XM
(\271)SH
/Times-Roman SF
19362 XM
(X)SH
14236 25566 MT
(then begin {create terminal vertex})SH
16754 26671 MT
(u.index := n+1; u.low := null; u.high := null;)SH
14236 27776 MT
(end)SH
14236 28881 MT
(else begin {create nonterminal and evaluate further down})SH
16754 29986 MT
(u.index :=)SH
/Times-Italic SF
21068 XM
(Min)SH
/Times-Roman SF
(\050vlow1.index, vhigh1.index, v2.index\051;)SH
16754 31091 MT
(if vlow1.index = u.index)SH
19272 32196 MT
(then begin vll1 := vlow1.low; vlh1 := vlow1.high end)SH
19272 33301 MT
(else begin vll1 := vlow1; vlh1 := vlow1 end;)SH
16754 34406 MT
(if vhigh1.index = u.index)SH
19272 35511 MT
(then begin vhl1 := vhigh1.low; vhh1 := vhigh1.high end)SH
19272 36616 MT
(else begin vhl1 := vhigh1; vhh1 := vhigh1 end;)SH
16754 37721 MT
(if v2.index = u.index)SH
19272 38826 MT
(then begin vlow2 := v2.low; vhigh2 := v2.high end)SH
19272 39931 MT
(else begin vlow2 := v2; vhigh2 := v2 end;)SH
16754 41036 MT
(u.low :=)SH
/Times-Italic SF
20346 XM
(Compose-step)SH
/Times-Roman SF
(\050vll1, vhl1, vlow2\051;)SH
16754 42141 MT
(u.high :=)SH
/Times-Italic SF
20624 XM
(Compose-step)SH
/Times-Roman SF
(\050vlh1, vhh1, vhigh2\051;)SH
14236 43246 MT
(end;)SH
14236 44351 MT
(return\050u\051;)SH
11718 45456 MT
(end;)SH
9200 47666 MT
(begin {Main)
500 W( routine})SH
11718 48771 MT
(Initialize all elements of T to null;)SH
11718 49876 MT
(u :=)SH
/Times-Italic SF
13560 XM
(Compose-step)SH
/Times-Roman SF
(\050v1, v1, v2\051;)SH
11718 50981 MT
(return\050)SH
/Times-Italic SF
(Reduce)SH
/Times-Roman SF
(\050u\051\051;)SH
9200 52086 MT
(end;)SH
23100 53696 MT
(Figure 8.Implementation of)SH
/Times-Italic SF
34377 XM
(Compose)SH
/Times-Roman SF
7200 55487 MT
(Hence, care)
1 W( must be exercised in invoking this algorithm.  If we wish to find an element of the satisfying set obeying)SH
7200 56864 MT
(some property, it can be very inefficient to enumerate all elements of the satisfying)
22 W( set and then pick out an element)23 W
7200 58241 MT
(with the desired characteristics.)
81 W( Instead,)
410 W( we should specify this property in terms of a Boolean function, compute)80 W
7200 59618 MT
(the Boolean product of this function and the original function,)
86 W( and then use the procedure)87 W
/Times-Italic SF
44546 XM
(Satisfy-one)SH
/Times-Roman SF
49327 XM
(to select an)87 W
7200 60995 MT
(element. Finally,)
388 W( we can compute the size of the satisfying set by an algorithm of time)
69 W( proportional to the size of)68 W
7200 62372 MT
(the graph \050assuming integer operations of sufficient precision)
69 W( can be performed in constant time.\051  In general, it is)70 W
7200 63749 MT
(much faster to apply this algorithm than to enumerate all elements of the satisfying set and count them.)SH
8200 66228 MT
(The procedure)11 W
/Times-Italic SF
14275 XM
(Satisfy-one)SH
/Times-Roman SF
18980 XM
(shown in Figure 9 is called with the root of the graph)
11 W( and an array x initialized to some)10 W
7200 67605 MT
(arbitrary pattern of 0's and 1's.  It returns the value false)
35 W( if the function is unsatisfiable \050)36 W
/Times-Italic SF
(S)SH
8 SS 
43627 67950 MT
(f)SH
10 /Times-Roman AF
44249 67605 MT
(=)SH
/Symbol SF
45063 XM
(\306)SH
/Times-Roman SF
(\051, and the value true)36 W
7200 68982 MT
(if it is.  In the latter case, the entries)
5 W( in the array are set to a set of values denoting some element in the satisfying set.)4 W
7200 70359 MT
(This procedure utilizes)
68 W( a classic depth-first search with backtracking scheme to find a terminal vertex in the graph)69 W
7200 71736 MT
(having value 1.  This procedure will work on any function graph.)
43 W( However,)
335 W( when called on an unreduced function)42 W
ES
%%Page: 18 18

61200 79200 BS
0 SI
10 /Times-Roman AF
30100 4286 MT
(18)SH
7200 7886 MT
(graph, this could require time exponential in)31 W
/Times-Italic SF
25415 XM
(n)SH
/Times-Roman SF
26196 XM
(\050consider a complete binary tree where only the final terminal)
31 W( vertex)32 W
7200 9263 MT
(in the search has value 1\051.  For a reduced graph, however, we can assume the following property:)SH
/Times-Bold SF
10200 11507 MT
(Lemma 3:)8 W
/Times-Roman SF
14826 XM
(Every nonterminal vertex in a reduced function graph has a terminal vertex with value 1 as)
8 W( a)7 W
9200 12612 MT
(descendant.)SH
7200 14132 MT
(The procedure will only backtrack at some vertex when)
2 W( the first child it tries is a terminal vertex with value 0, and in)3 W
7200 15509 MT
(this case it is guaranteed to succeed for the second child.  Thus, the complexity of the algorithm is O)
150 0 WX(\050)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(\051.)SH
9200 17300 MT
(function)SH
/Times-Italic SF
12783 XM
(Satisfy-one)SH
/Times-Roman SF
(\050v: vertex; var x: array[1..n] of integer\051: boolean)SH
9200 18405 MT
(begin)SH
11718 19510 MT
(if v.value = 0 then return\050false\051; {failure})SH
11718 20615 MT
(if v.value = 1 then return\050true\051; {success})SH
11718 21720 MT
(x[i] := 0;)SH
11718 22825 MT
(if)SH
/Times-Italic SF
12579 XM
(Satisfy-one)SH
/Times-Roman SF
(\050v.low, x\051 then return\050true\051;)SH
11718 23930 MT
(x[i] := 1;)SH
11718 25035 MT
(return\050Satisfy-one\050v.high, x\051\051)SH
9200 26140 MT
(end;)SH
22739 27750 MT
(Figure 9.Implementation of)SH
/Times-Italic SF
34016 XM
(Satisfy-one)SH
/Times-Roman SF
8200 30229 MT
(To enumerate)
7 W( all elements of the satisfying set, we can perform an exhaustive search of the graph, printing out the)6 W
7200 31606 MT
(element corresponding to the current path every time we reach a terminal vertex with value 1.  The procedure)167 W
/Times-Italic SF
7200 32983 MT
(Satisfy-all)SH
/Times-Roman SF
11688 XM
(shown in Figure 10)
182 W( implements this method.  This procedure has three arguments: the index of the)181 W
7200 34360 MT
(current function argument in the enumeration, the root vertex of the subgraph being searched, and an array)259 W
7200 35737 MT
(describing the state of the search.  It)
22 W( is called at the top level with index 1, the root vertex of the graph, and an array)21 W
7200 37114 MT
(with arbitrary)
106 W( initialization.  The effect of the procedure when invoked with index)107 W
/Times-Italic SF
41639 XM
(i)SH
/Times-Roman SF
(, vertex)107 W
/Times-Italic SF
45380 XM
(v)SH
/Times-Roman SF
(, and with the array)107 W
7200 38491 MT
(having its first)SH
/Times-Italic SF
13228 XM
(i)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1 elements equal to)SH
/Times-Italic SF
22054 XM
(b)SH
8 /Times-Roman AF
22554 38836 MT
(1)SH
10 SS 
22954 38491 MT
(, . . . ,)SH
/Times-Italic SF
(b)SH
8 SS 
25704 38836 MT
(i)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 SS 
27015 38491 MT
(is to enumerate all elements in the set)SH
9200 40396 MT
({\050)SH
/Times-Italic SF
(b)SH
8 /Times-Roman AF
10513 40741 MT
(1)SH
10 SS 
10913 40396 MT
(, . . . ,)SH
/Times-Italic SF
(b)SH
8 SS 
13663 40741 MT
(i)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 SS 
14724 40396 MT
(,)SH
/Times-Italic SF
(x)SH
8 SS 
15418 40741 MT
(i)SH
10 /Times-Roman AF
15640 40396 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 SS 
18334 40741 MT
(n)SH
10 /Times-Roman AF
18734 40396 MT
(\051)SH
/Symbol SF
19217 XM
(|)SH
/Times-Italic SF
19567 XM
(f)SH
8 SS 
19845 40741 MT
(v)SH
10 /Times-Roman AF
20200 40396 MT
(\050)SH
/Times-Italic SF
(b)SH
8 /Times-Roman AF
21033 40741 MT
(1)SH
10 SS 
21433 40396 MT
(, . . . ,)SH
/Times-Italic SF
(b)SH
8 SS 
24183 40741 MT
(i)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 SS 
25244 40396 MT
(,)SH
/Times-Italic SF
(x)SH
8 SS 
25938 40741 MT
(i)SH
10 /Times-Roman AF
26160 40396 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 SS 
28854 40741 MT
(n)SH
10 /Times-Roman AF
29254 40396 MT
(\051 = 1}.)SH
8200 42875 MT
(As with the previous algorithm, this procedure will work for any function)
216 W( graph, but it could require time)215 W
7200 44252 MT
(exponential in)50 W
/Times-Italic SF
13244 XM
(n)SH
/Times-Roman SF
14044 XM
(for an unreduced graph regardless of the size of the satisfying set \050consider a complete binary tree)50 W
7200 45629 MT
(with all terminal vertices having value 0.\051)
1 W( For)
250 W( a reduced graph, however, we are guaranteed that the search will only)SH
7200 47006 MT
(fail when the procedure is called on a terminal vertex with value 0, and in this case the recursive call to the other)81 W
7200 48383 MT
(child will succeed.)
40 W( Hence)
329 W( at least half of the recursive calls to)39 W
/Times-Italic SF
32926 XM
(Satisfy-all)SH
/Times-Roman SF
37271 XM
(generate at least one new argument value)39 W
7200 49760 MT
(to some element in the satisfying set, and the overall complexity is O)
150 0 WX(\050)SH
/Times-Italic SF
(n)SH
/Symbol SF
(\327|)SH
/Times-Italic SF
(S)SH
8 SS 
36770 50105 MT
(f)SH
10 /Symbol AF
37142 49760 MT
(|)SH
/Times-Roman SF
(\051.)SH
8200 52239 MT
(Finally, to)
49 W( compute the size of the satisfying set, we assign a value)50 W
/Symbol SF
35763 XM
(a)SH
8 /Times-Italic AF
36394 52584 MT
(v)SH
10 /Times-Roman AF
37049 52239 MT
(to each vertex)50 W
/Times-Italic SF
43058 XM
(v)SH
/Times-Roman SF
43802 XM
(in the graph according to)50 W
7200 53616 MT
(the following recursive formula:)SH
9200 54955 MT
(1.)SH
10200 XM
(If)SH
/Times-Italic SF
11116 XM
(v)SH
/Times-Roman SF
11810 XM
(is a terminal vertex:)SH
/Symbol SF
20031 XM
(a)SH
8 /Times-Italic AF
20662 55300 MT
(v)SH
10 /Times-Roman AF
21267 54955 MT
(=)SH
/Times-Italic SF
22081 XM
(value)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051)SH
9200 56713 MT
(2.)SH
10200 XM
(If)SH
/Times-Italic SF
11116 XM
(v)SH
/Times-Roman SF
11810 XM
(is a nonterminal vertex)SH
8 SS 
21003 56368 MT
(10)SH
10 SS 
21803 56713 MT
(:)SH
/Symbol SF
12200 58712 MT
(a)SH
8 /Times-Italic AF
12831 59057 MT
(v)SH
10 /Times-Roman AF
13872 58712 MT
(=)SH
/Symbol SF
15122 XM
(a)SH
8 /Times-Italic AF
15753 59057 MT
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051)SH
10 /Symbol AF
17796 58712 MT
(\327)SH
/Times-Roman SF
(2)SH
8 /Times-Italic AF
18546 58367 MT
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051\051)SH
/Symbol SF
(-)SH
/Times-Italic SF
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051)SH
10 SS 
26161 58712 MT
(+)SH
/Symbol SF
26975 XM
(a)SH
8 /Times-Italic AF
27606 59057 MT
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051)SH
10 /Symbol AF
29915 58712 MT
(\327)SH
/Times-Roman SF
(2)SH
8 /Times-Italic AF
30665 58367 MT
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051\051)SH
/Symbol SF
(-)SH
/Times-Italic SF
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051)SH
10 SS 
9200 60470 MT
(3.)SH
10200 XM
(where a terminal vertex has index)SH
/Times-Italic SF
23974 XM
(n)SH
/Times-Roman SF
(+1.)SH
8200 62949 MT
(This computation can)
189 W( be performed by a procedure that traverses the graph in the manner of the procedure)190 W
/Times-Italic SF
7200 64326 MT
(Traverse)SH
/Times-Roman SF
(. The)
476 W( formula is applied only once for each vertex in the)
113 W( graph, and hence the total time complexity is)112 W
10800 50 7200 67610 UL
6 SS 
8000 68949 MT
(10)SH
8 /Times-Bold AF
8600 69258 MT
(Update:)SH
/Times-Roman SF
11865 XM
(Adnan Darwiche of UCLA \050private correspondence, 2001\051 observed that the formula given in the paper)
55 W( is incorrect.  Here is the)54 W
7200 70182 MT
(correct one:)SH
/Symbol SF
8800 72000 MT
(a)SH
/Times-Italic SF
9305 72345 MT
(v)SH
/Times-Roman SF
10209 72000 MT
(=)SH
/Symbol SF
11209 XM
(a)SH
/Times-Italic SF
11714 72345 MT
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051)SH
/Symbol SF
13757 72000 MT
(\327)SH
/Times-Roman SF
(2)SH
/Times-Italic SF
14357 71655 MT
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(low)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051\051)SH
/Symbol SF
(-)SH
/Times-Italic SF
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
22761 72000 MT
(+)SH
/Symbol SF
23412 XM
(a)SH
/Times-Italic SF
23917 72345 MT
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051)SH
/Symbol SF
26226 72000 MT
(\327)SH
/Times-Roman SF
(2)SH
/Times-Italic SF
26826 71655 MT
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(high)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051\051)SH
/Symbol SF
(-)SH
/Times-Italic SF
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
ES
%%Page: 19 19

61200 79200 BS
0 SI
10 /Times-Roman AF
30100 4286 MT
(19)SH
9200 7886 MT
(procedure)SH
/Times-Italic SF
13448 XM
(Satisfy-all)SH
/Times-Roman SF
(\050i: integer; v: vertex; x: array[1..n] of integer\051:)SH
9200 8991 MT
(begin)SH
11718 10096 MT
(if v.value = 0 then return; {failure})SH
11718 11201 MT
(if i = n+1 and v.value = 1)SH
11718 12306 MT
(then begin {success})SH
14236 13411 MT
(Print element x[1],...,x[n];)SH
14236 14516 MT
(return;)SH
11718 15621 MT
(end;)SH
11718 16726 MT
(if v.index > i)SH
11718 17831 MT
(then begin {function independent of)SH
/Times-Italic SF
26446 XM
(x)SH
8 SS 
26890 18176 MT
(i)SH
10 /Times-Roman AF
27112 17831 MT
(})SH
14236 19037 MT
(x[i] := 0;)SH
/Times-Italic SF
18050 XM
(Satisfy-all)SH
/Times-Roman SF
(\050i+1, v, x\051;)SH
14236 20142 MT
(x[i] := 1;)SH
/Times-Italic SF
18050 XM
(Satisfy-all)SH
/Times-Roman SF
(\050i+1, v, x\051;)SH
11718 21247 MT
(end)SH
11718 22352 MT
(else begin {function depends on)SH
/Times-Italic SF
24835 XM
(x)SH
8 SS 
25279 22697 MT
(i)SH
10 /Times-Roman AF
25501 22352 MT
(})SH
14236 23558 MT
(x[i] := 0;)SH
/Times-Italic SF
18050 XM
(Satisfy-all)SH
/Times-Roman SF
(\050i+1, v.low, x\051;)SH
14236 24663 MT
(x[i] := 1;)SH
/Times-Italic SF
18050 XM
(Satisfy-all)SH
/Times-Roman SF
(\050i+1, v.high, x\051;)SH
11718 25768 MT
(end;)SH
9200 26873 MT
(end;)SH
22683 28483 MT
(Figure 10.Implementation of)SH
/Times-Italic SF
34460 XM
(Satisfy-all)SH
/Times-Roman SF
7200 30388 MT
(O)
150 MX(\050)SH
/Symbol SF
(|)SH
/Times-Italic SF
(G)SH
/Symbol SF
(|)SH
/Times-Roman SF
(\051 Once we have computed these values for a graph with root)SH
/Times-Italic SF
33854 XM
(v)SH
/Times-Roman SF
(, we compute the size of the satisfying set as)SH
/Symbol SF
9200 32387 MT
(|)SH
/Times-Italic SF
(S)SH
8 SS 
9900 32732 MT
(f)SH
10 /Symbol AF
10272 32387 MT
(|)SH
/Times-Roman SF
11158 XM
(=)SH
/Symbol SF
12408 XM
(a)SH
8 /Times-Italic AF
13039 32732 MT
(v)SH
10 /Symbol AF
13394 32387 MT
(\327)SH
/Times-Roman SF
(2)SH
8 /Times-Italic AF
14144 32042 MT
(index)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
(\051)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 SS 
17602 32387 MT
(.)SH
12 /Times-Bold AF
7200 36071 MT
(5. Experimental Results)SH
10 /Times-Roman AF
8200 37448 MT
(As with all other known algorithms for solving NP-hard problems, our algorithms have)
24 W( a worst-case performance)25 W
7200 38825 MT
(that is unacceptable for all but the smallest problems.  We hope that our approach will be practical for)
42 W( a reasonable)41 W
7200 40202 MT
(class of applications, but this can only be demonstrated experimentally.  We have)
29 W( already shown that the size of the)30 W
7200 41579 MT
(graph representing a function can depend heavily)
41 W( on the ordering of the input variables, and that our algorithms are)40 W
7200 42956 MT
(quite efficient as)
52 W( long as the functions are represented by graphs of reasonable size.  Hence, the major questions to)53 W
7200 44333 MT
(be answered by our)
69 W( experimental investigation are:  how can an appropriate input ordering be chosen, and given a)68 W
7200 45710 MT
(good ordering how large are the graphs encountered in typical applications.)SH
8200 48189 MT
(We have implemented the algorithms described in this paper and have applied)
65 W( them to problems in logic design)66 W
7200 49566 MT
(verification, test)
29 W( pattern generation, and combinatorics.  On the whole, our experience has been quite favorable.  By)28 W
7200 50943 MT
(analyzing the problem domain, we can generally develop strategies for choosing a good ordering of)
158 W( the inputs.)159 W
7200 52320 MT
(Furthermore, it is not necessary to find)181 W
/Times-Italic SF
24243 XM
(the)SH
/Times-Roman SF
25896 XM
(optimal ordering.)
181 W( Many)
611 W( orderings will produce acceptable results.)180 W
7200 53697 MT
(Functions rarely require graphs of size exponential in the number of inputs, as long as)
54 W( a reasonable ordering of the)55 W
7200 55074 MT
(inputs has been chosen.  In addition, the algorithms)
84 W( are quite fast, remaining practical for graphs with as many as)83 W
7200 56451 MT
(20,000 vertices.)SH
8200 58930 MT
(For this paper,)
100 W( we consider the problem of verifying that the implementation of a logic function \050in terms of a)101 W
7200 60307 MT
(combinational logic gate network\051 satisfies its specification)
25 W( \050in terms of Boolean expressions.\051  As examples we use)24 W
7200 61684 MT
(a family of Arithmetic Logic Unit \050ALU\051 designs constructed)
70 W( from 74181 and 74182 TTL integrated circuits)
71 W( [15].)SH
7200 63061 MT
(The '181 implements a 4 bit ALU slice, while the '182 implements a lookahead carry generator.  These chips)
10 W( can be)9 W
7200 64438 MT
(combined to create an ALU with any word size that is a)
85 W( multiple of 4 bits.  An ALU with an)86 W
/Times-Italic SF
46157 XM
(n)SH
/Times-Roman SF
46993 XM
(bit word size has)86 W
7200 65815 MT
(6+2)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
9566 XM
(inputs: 5)
354 W( control inputs labeled)52 W
/Times-Italic SF
22767 XM
(m)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
24128 66160 MT
(0)SH
10 SS 
24528 65815 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
25167 66160 MT
(1)SH
10 SS 
25567 65815 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
26206 66160 MT
(2)SH
10 SS 
26606 65815 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
27245 66160 MT
(3)SH
10 SS 
27947 65815 MT
(to select the)
52 W( ALU function, a carry input labeled)51 W
/Times-Italic SF
48015 XM
(cin)SH
/Times-Roman SF
(, and 2 data)51 W
7200 67192 MT
(words of)130 W
/Times-Italic SF
11237 XM
(n)SH
/Times-Roman SF
12117 XM
(bits each, labeled)130 W
/Times-Italic SF
19672 XM
(a)SH
8 /Times-Roman AF
20172 67537 MT
(0)SH
10 SS 
20572 67192 MT
(, . . . ,)SH
/Times-Italic SF
(a)SH
8 SS 
23322 67537 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 SS 
24941 67192 MT
(and)SH
/Times-Italic SF
26765 XM
(b)SH
8 /Times-Roman AF
27265 67537 MT
(0)SH
10 SS 
27665 67192 MT
(, . . . ,)SH
/Times-Italic SF
(b)SH
8 SS 
30415 67537 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 SS 
31654 67192 MT
(. It)
510 W( produces)130 W
/Times-Italic SF
37645 XM
(n)SH
/Times-Roman SF
(+2 outputs:)130 W
/Times-Italic SF
43192 XM
(n)SH
/Times-Roman SF
44072 XM
(function outputs labeled)131 W
/Times-Italic SF
7200 68569 MT
(f)SH
8 /Times-Roman AF
7478 68914 MT
(0)SH
10 SS 
7878 68569 MT
(, . . . ,)SH
/Times-Italic SF
(f)SH
8 SS 
10406 68914 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 SS 
11645 68569 MT
(, a carry output labeled)163 W
/Times-Italic SF
21901 XM
(cout)SH
/Times-Roman SF
(, and a comparison output labeled)162 W
/Times-Italic SF
38343 XM
(A)SH
/Times-Roman SF
(=)SH
/Times-Italic SF
(B)SH
/Times-Roman SF
40541 XM
(\050the logical)162 W
8 SS 
45642 XM
(AND)SH
10 SS 
47788 XM
(of the function)162 W
7200 69946 MT
(outputs.\051)SH
ES
%%Page: 20 20

61200 79200 BS
0 SI
10 /Times-Roman AF
30100 4286 MT
(20)SH
/Times-Bold SF
9644 7886 MT
(Word Size)SH
20018 XM
(Gates)SH
28795 XM
(Patterns)SH
37057 XM
(CPU Minutes)SH
/Times-Italic SF
46885 XM
(A)SH
/Times-Roman SF
(=)SH
/Times-Italic SF
(B)SH
/Times-Bold SF
48921 XM
(Graph)SH
/Times-Roman SF
11630 10135 MT
(4)SH
20740 XM
(52)SH
28850 XM
(1.6)SH
/Symbol SF
30250 XM
(\264)SH
/Times-Roman SF
30949 XM
(10)SH
8 SS 
31949 9790 MT
(4)SH
10 SS 
39335 10135 MT
(1.1)SH
48570 XM
(197)SH
11630 11512 MT
(8)SH
20490 XM
(123)SH
28850 XM
(4.2)SH
/Symbol SF
30250 XM
(\264)SH
/Times-Roman SF
30949 XM
(10)SH
8 SS 
31949 11167 MT
(6)SH
10 SS 
39335 11512 MT
(2.3)SH
48570 XM
(377)SH
11380 12889 MT
(16)SH
20490 XM
(227)SH
28650 XM
(2.7)SH
/Symbol SF
30050 XM
(\264)SH
/Times-Roman SF
30749 XM
(10)SH
8 SS 
31749 12544 MT
(11)SH
10 SS 
39335 12889 MT
(6.3)SH
48570 XM
(737)SH
11380 14266 MT
(32)SH
20490 XM
(473)SH
28650 XM
(1.2)SH
/Symbol SF
30050 XM
(\264)SH
/Times-Roman SF
30749 XM
(10)SH
8 SS 
31749 13921 MT
(21)SH
10 SS 
39085 14266 MT
(22.8)SH
48320 XM
(1457)SH
11380 15643 MT
(64)SH
20490 XM
(927)SH
28650 XM
(2.2)SH
/Symbol SF
30050 XM
(\264)SH
/Times-Roman SF
30749 XM
(10)SH
8 SS 
31749 15298 MT
(40)SH
10 SS 
39085 15643 MT
(95.8)SH
48320 XM
(2897)SH
23296 17253 MT
(Table 2.ALU Verification Examples)SH
8200 19732 MT
(For our experiments, we derived the functions for)
194 W( the two chips from their gate-level descriptions and then)195 W
7200 21109 MT
(composed these functions to form the different ALU's according to the chip-level interconnections)
130 W( in the circuit)129 W
7200 22486 MT
(manual. We)
594 W( then compared these circuit functions to functions derived)
172 W( from Boolean expressions obtained by)173 W
7200 23863 MT
(encoding the behavioral)
15 W( specification in the circuit manual.  We succeeded in verifying ALU's with word sizes of 4,)14 W
7200 25240 MT
(8, 16, 32, and 64 bits.  The performance of our program for this task is summarized Table 2.  These data were)134 W
7200 26617 MT
(measured with the best ordering we were able to find, which happened to be the first one we tried:)
4 W( first)
256 W( the 5 control)3 W
7200 27994 MT
(inputs, then the carry input, and then)
35 W( an interleaving of the two data words from the least significant to the most. In)36 W
7200 29371 MT
(this table, the number of gates is defined as the number of)
68 W( logic gates in the schematic diagrams for the two chips)67 W
7200 30748 MT
(times the number of each chip used.)
109 W( The)
470 W( number of patterns equals the number of different input combinations.)110 W
7200 32125 MT
(CPU time is expressed in minutes as measured on a Digital Equipment Corporation VAX 11/780 \050a 1)
245 W( MIP)244 W
7200 33502 MT
(machine.\051 The)
296 W( times given are for complete verification, i.e.)
23 W( to construct the functions from both the circuit and the)24 W
7200 34879 MT
(behavioral descriptions and to establish their equivalence.  The final column shows the size)
19 W( of the reduced graph for)18 W
7200 36256 MT
(the)SH
/Times-Italic SF
8672 XM
(A)SH
/Times-Roman SF
(=)SH
/Times-Italic SF
(B)SH
/Times-Roman SF
10708 XM
(output. In)
250 W( all cases, this was the largest graph generated.)SH
8200 38735 MT
(As can be seen, the time required to verify these circuits is quite reasonable,)
38 W( in part because the basic procedures)39 W
7200 40112 MT
(are fast.  Amortizing the time used for memory management, for the user interface, and for reducing the)
113 W( graphs,)112 W
7200 41489 MT
(each call to the evaluation routines)71 W
/Times-Italic SF
21790 XM
(Apply-step)SH
/Times-Roman SF
26388 XM
(and)SH
/Times-Italic SF
28153 XM
(Compose-step)SH
/Times-Roman SF
34140 XM
(requires around 3 milliseconds.)
71 W( For)
394 W( example, in)72 W
7200 42866 MT
(verifying the 64)
52 W( bit ALU, these two procedures were called over 1.6)51 W
/Symbol SF
35212 XM
(\264)SH
/Times-Roman SF
35911 XM
(10)SH
8 SS 
36911 42521 MT
(6)SH
10 SS 
37612 42866 MT
(times. The)
352 W( total verification time grows)51 W
7200 44243 MT
(as the square of the word size.  This is as good as can)
83 W( be expected: both the number of gates and the sizes of the)84 W
7200 45620 MT
(graphs being operated on grow linearly with the word size, and)
119 W( the total execution time grows as the product of)118 W
7200 46997 MT
(these two factors.  This quadratic growth is far superior)
191 W( to the exponential growth that would be required for)192 W
7200 48374 MT
(exhaustive analysis.)
1 W( For)
250 W( example, suppose that at the time the universe first formed \050about 20 billion years ago [16]\051)SH
7200 49751 MT
(we started analyzing the 32 bit ALU exhaustively at)
30 W( a rate of one pattern every microsecond.  By now we would be)31 W
7200 51128 MT
(about half way through!  For the 64 bit ALU, the advantage over exhaustive analysis is even greater.)SH
8200 53607 MT
(These ALU circuits provide an interesting test case for evaluating different input)
310 W( orderings, because the)309 W
7200 54984 MT
(successive bits of the function output word are)
55 W( functions of increasingly more variables.  Figure 11 shows how the)56 W
7200 56361 MT
(sizes of these graphs)
213 W( depend on the ordering of circuit inputs.  The best case was obtained for the ordering:)212 W
/Times-Italic SF
7200 57738 MT
(m)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
8561 58083 MT
(0)SH
10 SS 
8961 57738 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
9600 58083 MT
(1)SH
10 SS 
10000 57738 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
10639 58083 MT
(2)SH
10 SS 
11039 57738 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
11678 58083 MT
(3)SH
10 SS 
12078 57738 MT
(,)SH
/Times-Italic SF
(cin)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(a)SH
8 /Times-Roman AF
14300 58083 MT
(0)SH
10 SS 
14700 57738 MT
(,)SH
/Times-Italic SF
(b)SH
8 /Times-Roman AF
15450 58083 MT
(0)SH
10 SS 
15850 57738 MT
(, . . . ,)SH
/Times-Italic SF
(a)SH
8 SS 
18600 58083 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 /Times-Italic AF
19839 57738 MT
(b)SH
8 SS 
20339 58083 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 SS 
21578 57738 MT
(. This)
290 W( ordering is also what one)
20 W( would choose for a bit-serial implementation of)21 W
7200 59115 MT
(the ALU: first read)
11 W( in the bits describing the function to be computed, and then read in the successive bits of the two)10 W
7200 60492 MT
(data words starting with the least significant bits.  Hence, our)
114 W( bit-serial computer analogy presented in Section 3)115 W
7200 61869 MT
(guides us to the best solution.  The next best case)
891 W( tested occurred with the ordering:)890 W
/Times-Italic SF
7200 63246 MT
(m)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
8561 63591 MT
(0)SH
10 SS 
8961 63246 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
9600 63591 MT
(1)SH
10 SS 
10000 63246 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
10639 63591 MT
(2)SH
10 SS 
11039 63246 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
11678 63591 MT
(3)SH
10 SS 
12078 63246 MT
(,)SH
/Times-Italic SF
(cin)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(a)SH
8 SS 
14300 63591 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 SS 
15539 63246 MT
(,)SH
/Times-Italic SF
(b)SH
8 SS 
16289 63591 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 SS 
17528 63246 MT
(, . . . ,)SH
/Times-Italic SF
(a)SH
8 /Times-Roman AF
20278 63591 MT
(0)SH
10 /Times-Italic AF
20678 63246 MT
(b)SH
8 /Times-Roman AF
21178 63591 MT
(0)SH
10 SS 
21578 63246 MT
(, i.e. the same as before)
87 W( but with the data ordered with the most significant bit)88 W
7200 64623 MT
(first. This)
562 W( ordering represents an alternative but often)
156 W( successful strategy: order the bits in decreasing order of)155 W
7200 66000 MT
(importance. The)302 W
/Times-Italic SF
14332 XM
(i)SH
/Times-Roman SF
14760 XM
(th bit of the output)
26 W( word depends more strongly on the)27 W
/Times-Italic SF
37135 XM
(i)SH
/Times-Roman SF
37563 XM
(th bits of the input words than any lower)27 W
7200 67377 MT
(order bits.  As can be seen, this strategy also works quite well.  The next case shown)
103 W( is for an ordering with the)102 W
7200 68754 MT
(control inputs last:)65 W
/Times-Italic SF
15405 XM
(cin)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(a)SH
8 /Times-Roman AF
17377 69099 MT
(0)SH
10 SS 
17777 68754 MT
(,)SH
/Times-Italic SF
(b)SH
8 /Times-Roman AF
18527 69099 MT
(0)SH
10 SS 
18927 68754 MT
(, . . . ,)SH
/Times-Italic SF
(a)SH
8 SS 
21677 69099 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 /Times-Italic AF
22916 68754 MT
(b)SH
8 SS 
23416 69099 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 SS 
24655 68754 MT
(,)SH
/Times-Italic SF
(m)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
26266 69099 MT
(0)SH
10 SS 
26666 68754 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
27305 69099 MT
(1)SH
10 SS 
27705 68754 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
28344 69099 MT
(2)SH
10 SS 
28744 68754 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
29383 69099 MT
(3)SH
10 SS 
29783 68754 MT
(. This)
380 W( ordering)
65 W( could be expected to produce a rather poor)66 W
7200 70131 MT
(result, since)
78 W( the outputs depend strongly on the control inputs.  However, the complexity of the graphs still grows)77 W
7200 71508 MT
(linearly, due to the fact that the number of control inputs is a constant.  To explain this linear growth in)
24 W( terms of the)25 W
ES
%%Page: 21 21

61200 79200 BS
0 SI
10 /Times-Roman AF
30100 4286 MT
(21)SH
1 SS 
25444 7200 32644 PB 
%%BeginDocument: figs/alu.eps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox:  0 0 401 256 
%%Title: (F:\\txt\\papers\\tc86\\figs\\alu.CNV) 
%%Creator: Canvas (7.0.1) 
%%CreationDate: (05/08/00 @ 04:42 PM) 
%%DocumentProcSets: Deneba_CanvasCustomColors
%%+ CVDict
%%DocumentFonts: 
%%DocumentNeededFonts: Arial-BoldMT
%%+ ArialMT

%%DocumentProcessColors: Cyan Magenta Yellow Black
%%EndComments
%%BeginProlog 
%%BeginResource: procset CVDict
%%Title: Deneba standard graphics
%%Version: 1.02
%%CreationDate: 10/14/99
%%Copyright: (C) 1994, 1999 Deneba Systems. All Rights Reserved
userdict /CVDict 200 dict put
CVDict begin
/invalidcolortable? true def   
/level2 /languagelevel where {pop languagelevel 2 ge}{false} ifelse def
level2 not { /xshow {
0 currentpoint 5 -1 roll {pop pop moveto dup 1 add 3 1 roll exch dup 4 1 roll exch get 0 rmoveto currentpoint} exch kshow 
pop pop pop pop} def } if
/initialize
{CVDict
{dup xcheck{bind}if pop pop}forall
currentscreen /_sp exch def /_sa exch def /_sf exch def
/DefaultScreen{_sf _sa /_sp load}def
/DefaultScreenProc{ /_sp load}def
/setstrokeadjust where{pop true}{false}ifelse
{/sa /setstrokeadjust load def
/li /lineto load def
/mt /moveto load def
/ct /curveto load def
/lh { currentpoint exch pop lineto}bind def
/lv { currentpoint pop exch lineto}bind def}
{/sa{{currentdict StrokeAdjustDict ne{StrokeAdjustDict begin}if}{ currentdict StrokeAdjustDict eq{end}if}ifelse} bind def
userdict /StrokeAdjustDict 100 dict put
StrokeAdjustDict begin
/_xl
{transform
.25 sub round .25 add exch
.25 sub round .25 add exch
itransform
}bind def
/li{ _xl lineto}bind def
/mt{ _xl moveto}bind def
/ct{ _xl curveto}bind def
/lh { dup _xl pop currentpoint exch pop lineto}bind def
/lv { dup _xl pop currentpoint pop exch lineto}bind def
/rp{_xl/cv_b xdf/cv_r xdf
_xl/cv_t xdf/cv_l xdf
cv_l cv_t moveto
cv_r cv_t lineto
cv_r cv_b lineto
cv_l cv_b lineto
closepath
}bind def
end}ifelse}def
/terminate
{userdict /StrokeAdjustDict known {currentdict StrokeAdjustDict eq{end}if}if
currentdict CVDict eq{end}if}def
/mxMax 64 def
/mxStk [mxMax {matrix} repeat]def
/mxIdx 0 def
/stm{mxStk mxIdx 0 lt {/mxIdx 0 store}if mxIdx get currentmatrix pop /mxIdx mxIdx 1 add store}def
/rtm{mxIdx 1 ge {/mxIdx mxIdx 1 sub store mxStk mxIdx get setmatrix}if }def
/scl { 72 div exch 72 div exch scale } def
/scli { 72 exch div exch 72 exch div exch scale } def
/_cvmtx matrix def
/_txtmtx matrix def
/_initmtx matrix def
/xdf{exch def}def
/min{2 copy gt{exch}if pop}def
/max{2 copy lt{exch}if pop}def
/CVvec 256 array def
/T true def
/F false def
/_id 0 def
/_encodindex 0 def
/_encodArr 3 array def
/_fd 0 def
/_textSave null def
/_letterSpace 0 def
/_spaceXtra 0 def
/_PageSave null def
/_penh 1.0 def
/_penv 1.0 def
/save0 null def
/_w 0 def
/_h 0 def
/_ds 0 def
/hct false def
/pw 0 def
/wdif 0 def
/temp 0 def
/currot 0 def
/savehandler null def
/ia 0 def
/ix 0 def
/ixn 1 def
/MultipleDataSources false def 
/debug
{dup /$eps exch not def{/savehandler errordict /handleerror get def
errordict
/handleerror{$error begin
newerror{/newerror false def
showpage
72 72 scale
/Helvetica findfont .2 scalefont setfont
.25 9.6 moveto
(Error: )show
errorname
{dup type/stringtype ne
{(converted error name will end up in this string)cvs}if
show}exec
.25 9.4 moveto
(Offending Command: )show
/command load
{dup type/stringtype ne
{(converted command name will end up in this string)cvs}if
show}exec
.25 9.2 moveto
(Stack: )show
ostack
{.25 currentpoint .2 sub exch pop moveto
dup type/stringtype ne{dup type/integertype eq
1 index type/realtype eq or
1 index type/nametype eq or
not {type}if
(converted stack will end up in this string)cvs}if
show}forall
showpage
CVDict /savehandler get exec}if
end}put}if}def
/lc{setlinecap}def
/lj{setlinejoin}def
/lm{setmiterlimit}def
/lf{setflat}def
/cp{closepath}def
/np{newpath}def
/$psz 30 array def
/$pix 0 def
/gs{gsave $psz dup $pix _penh put $pix 1 add _penv put /$pix $pix 2 add def}def
/gr{grestore/$pix $pix 2 sub def $psz dup $pix get /_penh exch def $pix 1 add get /_penv exch def}def
/li{lineto} def
/lh{currentpoint exch pop lineto}def
/lv{currentpoint pop exch lineto}def
/mt{moveto} def
/_cv_mh{currentpoint exch pop moveto}def
/_cv_mv{currentpoint pop exch moveto}def
/ct{curveto} def
/rt{4 -2 roll moveto
dup 0 exch rlineto
exch 0 rlineto
neg 0 exch rlineto
closepath}def
/_hr
{
{/@err false def currentflat dup{gsave{eoclip}stopped{grestore 2 mul dup setflat dup 200 ge{(%% Canvas:Clip failed\r)print /@err true def pop exit}if}{grestore setflat exit}ifelse}loop @err not {eoclip}if setflat}
{/@err false def currentflat dup{gsave{clip}stopped{grestore 2 mul dup setflat dup 200 ge{(%% Canvas:Clip failed\r)print /@err true def pop exit}if}{grestore setflat exit}ifelse}loop @err not {clip}if setflat}
}def
/_cs null def
/fg{setgray}def
/setcmykcolor where {pop true}{false}ifelse
{/f4{ setcmykcolor}def}{/f4{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll}repeat setrgbcolor pop}def}ifelse
/setcolorspace where {pop true}{false}ifelse
{/scs{ dup setcolorspace /_cs exch def}def/f3{ _cs setcolorspace setcolor}def
}{/f3{ setrgbcolor}def/scs{ pop}def}ifelse
/$cc 5 array def
/findcmykcustomcolor where {pop true}{false}ifelse
not {/findcmykcustomcolor{$cc astore}def}if
/setcustomcolor where {pop true}{false}ifelse
not{/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}def}if
/fc{6 1 roll findcmykcustomcolor exch setcustomcolor}def
/setseparationgray where {pop true}{false}ifelse
not{/setseparationgray {systemdict /setgray get exec} def}if
/sg{ setseparationgray}def
/sp{/_penv xdf/_penh xdf}def
/rp
{/cv_b xdf/cv_r xdf
/cv_t xdf/cv_l xdf
cv_l cv_t moveto
cv_r cv_t lineto
cv_r cv_b lineto
cv_l cv_b lineto
closepath}def
/rr{/yradius xdf
/xradius xdf
/cv_b xdf
/cv_r xdf
/cv_t xdf
/cv_l xdf
cv_l xradius add cv_t moveto
cv_r xradius sub cv_t lineto
_cvmtx currentmatrix pop
currentpoint translate
xradius yradius scale
1 0 1 1 1 arcto 4{pop}repeat
_cvmtx setmatrix
cv_r cv_b yradius sub lineto
_cvmtx currentmatrix pop
currentpoint translate
xradius yradius scale
0 1 -1 1 1 arcto 4{pop}repeat
_cvmtx setmatrix
cv_l xradius add cv_b lineto
_cvmtx currentmatrix pop
currentpoint translate
xradius yradius scale
-1 0 -1 -1 1 arcto 4{pop}repeat
_cvmtx setmatrix
cv_l cv_t yradius add lineto
_cvmtx currentmatrix pop
currentpoint translate
xradius yradius scale
0 -1 1 -1 1 arcto 4{pop}repeat
_cvmtx setmatrix
closepath}def
/ep{_cvmtx currentmatrix pop
translate
scale
1 0 moveto
0 0 1 0 360 arc
closepath
_cvmtx setmatrix}def
/wd{_cvmtx currentmatrix pop
translate
scale
0 0 moveto
0 0 1 5 -2 roll arcn
closepath
_cvmtx setmatrix}def
/as{_cvmtx currentmatrix pop
translate
scale
0 0 1 5 -2 roll arcn
_cvmtx setmatrix}def
/ds
{_penv _penh ne dup{stm _penh dup 0 le{pop 1}if _penv dup 0 le{pop 1}if scale}{_penh setlinewidth}ifelse stroke {rtm}if}def
/df{fill}def
/de{eofill}def
/_gstk 5 array def
/_gstkc 0 def
/_gst{ 9 dict begin level2{/_ccs currentcolorspace def /_cc [currentcolor] def}{/_cc [currentrgbcolor]def}ifelse {currentpoint}stopped {/_cp null def}{ 2 array astore /_cp exch def}ifelse /_cf currentfont def
/_clw currentlinewidth def /_clc currentlinecap def /_clj currentlinejoin def /_cml currentmiterlimit def currentdict end}def
/hs{newpath gsave stm}def
/hc{/_hr load exch get exec newpath}def
/he{_gstk _gstkc _gst put /_gstkc _gstkc 1 add store 
grestore rtm /_gstkc _gstkc 1 sub store _gstk _gstkc get level2{dup /_ccs get setcolorspace dup /_cc get aload pop setcolor}{dup /_cc get aload pop setrgbcolor}ifelse dup /_cp get dup null eq 
not{aload pop moveto}{pop}ifelse dup /_cf get setfont
dup/_clw get setlinewidth dup/_clc get setlinecap dup/_clj get setlinejoin dup/_cml get setmiterlimit pop}def
/id{ /_id xdf}def
/_imatrix{_w 0 0 _h _id 0 ne{neg 0 _h}{0 0}ifelse _cvmtx astore}def
% Copyright (C) 1990, 1991 by Adobe Systems Incorporated.
% All rights reserved.
level2 { save /dontloadlevel1 xdf }if
/startnoload{{/noload save def} if}def
/endnoload{{noload restore}if }def
/testsystemdict{where{systemdict eq{true}{false}ifelse}{false}ifelse}def
/ncolors 1 def
/colorimage where{pop true}{false}ifelse{/ncolors 0
statusdict begin 
/processcolors where{pop pop processcolors}{/deviceinfo where{pop deviceinfo /Colors known
{pop {deviceinfo /Colors get}}if}if}ifelse end def
ncolors 0 ne{/colorimage testsystemdict
/setcolortransfer testsystemdict
/currentcolortransfer testsystemdict
/currentcmykcolor testsystemdict
and and and not{/ncolors 0 def}if}if}if
ncolors dup 1 ne exch dup 3 ne exch 4 ne and and {/ncolors 0 def}if
ncolors 1 eq dup dup not startnoload
{/doclutimage{[{255 mul round cvi bwclut exch get 255 div} /exec load dup currenttransfer exch] 
cvx bind settransfer _w _h 8 _imatrix _ds image}def}if
not endnoload
ncolors dup 3 eq exch 4 eq or
dup dup not startnoload
{/nullproc{{}}def/concatutil{/exec load
7 -1 roll /exec load}def
/defsubclut
{1 add getinterval def}def
/spconcattransfer   
{/Dclut exch def/Cclut exch def/Bclut exch def/Aclut exch def/ncompute exch ld
currentcolortransfer
[{Aclut ncompute}concatutil] cvx
[{Bclut ncompute}concatutil] cvx
[{Cclut ncompute}concatutil] cvx
[{Dclut ncompute}concatutil] cvx
setcolortransfer}def
/setuprgbcluts
{/bit3x rgbclut length 3 sub def
/bit1x bit3x 3 idiv def/rclut rgbclut def
/gclut rclut 1 bit3x defsubclut/bclut rclut 2 bit3x defsubclut}def}if not  
endnoload ncolors 3 eq dup dup not startnoload
{/3compute{exch bit3x mul
round cvi get 255 div}def
/doclutimage{%/rgbclut xdf pop 
setuprgbcluts/3compute rclut gclut bclut dup
spconcattransfer _w _h 8 _imatrix
[/_ds load /exec load /dup load dup]cvx
nullproc nullproc true 3 colorimage}def}if not endnoload ncolors 4 eq dup dup not startnoload
{/stuffclut{cmykindex 3 -1 roll put}def
/ftoint{1 exch sub 255 mul round cvi}def
/4compute { exch bit4x mul round cvi get 255 div } def
/computecmykclut{setuprgbcluts/bit4x rgbclut length 3 idiv 4 mul 4 sub def
/cmykclut bit4x 4 add string def
/cclut cmykclut def
/mclut cclut 1 bit4x defsubclut
/yclut cclut 2 bit4x defsubclut
/kclut cclut 3 bit4x defsubclut
/cmykindex 0 def
0 1 bit1x
{dup /cmykindex exch bit1x exch sub 4 mul def
3 mul dup rclut exch get 255 div exch dup gclut exch get 255 div
exch bclut exch get 255 div
setrgbcolor currentcmykcolor
ftoint kclut stuffclut
ftoint yclut stuffclut
ftoint mclut stuffclut
ftoint cclut stuffclut
}for}def
/doclutimage{invalidcolortable?{computecmykclut}if
/4compute cclut mclut yclut kclut spconcattransfer
_w _h 8 _imatrix[/_ds load /exec load/dup load dup dup] cvx 
nullproc nullproc nullproc true 4 colorimage}def}if
not endnoload
ncolors 0 eq
dup dup not startnoload
{/colorexpand{mystringexp 0 rgbclut
3 copy
7 -1 roll
{3 mul 3 getinterval putinterval exch 3 add exch 3 copy}forall
pop pop pop pop pop}def
/createexpandstr{/mystringexp exch st0 length mul string def}def
/doclutimage{/rgbclut xdf pop 3 createexpandstr _w _h 8 _imatrix
[/_ds load /exec load /colorexpand load /exec load] cvx
false 3 colorimage}def}if not endnoload
level2 { dontloadlevel1 restore }if
level2 not{ save /dontloadlevel2 xdf }if
/rgbclut 0 def
/doclutimage{/hival 255 def 
[/Indexed /DeviceRGB hival rgbclut] setcolorspace
_imagedict dup begin 
/Width _w def 
/Height _h def  
/Decode [0 hival] def  
/ImageMatrix _imatrix def
/BitsPerComponent 8 def 
/Interpolate false def
end image}def
level2 not{ dontloadlevel2 restore }if
%%EndProcSet
/_imagedict 15 dict begin /ImageType 1 def/BitsPerComponent 8 def/Interpolate false def currentdict end def
/hascolor true def
/level2 systemdict /languagelevel known
{languagelevel 2 ge}{false}ifelse def
/foureq {4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and} def
/setupbands{gsave
/_settransfer systemdict /settransfer get def
/_currenttransfer systemdict /currenttransfer get def
/_image systemdict /image get def
/blank 0 _currenttransfer exec
1 _currenttransfer exec eq def
/negative blank{0 _currenttransfer exec 0.5 lt}
{0 _currenttransfer exec 1 _currenttransfer exec gt}ifelse def
/inverted? negative def
/_currentgray systemdict /currentgray get def
hascolor{/$b 0 def} {/$b 5 def} ifelse
/setcmykcolor where{pop 1 0 0 0 setcmykcolor _currentgray 1 exch sub
0 1 0 0 setcmykcolor _currentgray 1 exch sub
0 0 1 0 setcmykcolor _currentgray 1 exch sub
0 0 0 1 setcmykcolor _currentgray 1 exch sub
4 {4 copy} repeat
1 0 0 0 foureq{/$b 1 store}if
0 1 0 0 foureq{/$b 2 store}if
0 0 1 0 foureq{/$b 3 store}if
0 0 0 1 foureq{/$b 4 store}if
0 0 0 0 foureq{/$b 6 store}if}if
blank{/$b 6 store}if
$b 0 eq $b 5 eq or{/$dt 0 def}if/$dt -1 def grestore}def
/doimage{
level2{image}{begin
Width Height BitsPerComponent ImageMatrix
Decode length 2 eq
{/DataSource load end image}{
Decode length 6 eq
{MultipleDataSources{DataSource 0 get DataSource 1 get DataSource 2 get}{/DataSource load}ifelse
MultipleDataSources 3 end DSIColorImage}{
Decode length 8 eq{MultipleDataSources{DataSource 0 get DataSource 1 get
DataSource 2 get DataSource 3 get}{/DataSource load}ifelse
MultipleDataSources 4 end DSIColorImage}if}ifelse
}ifelse
}ifelse}def
/dt{/rgbclut xdf /bwclut xdf}def
/cl{$i setmatrix translate scale
/_w _imagedict /Width get def
/_h _imagedict /Height get def
/_ds _imagedict /DataSource get def
doclutimage} def
/cd{$i setmatrix translate scale
level2{_imagedict /ColorSpace get setcolorspace}if
/_w _imagedict /Width get def
/_h _imagedict /Height get def
/_ds _imagedict /DataSource get def
_imagedict begin
/ImageMatrix _imatrix def
currentdict end
doimage} def
/im{$i setmatrix translate scale 
level2{/DeviceGray setcolorspace 0 setgray}if
/_w _imagedict /Width get def
/_h _imagedict /Height get def
/_ds _imagedict /DataSource get def
_imagedict begin
%/Decode [0 1] def  
%/Width _w def
%/Height _h def
/ImageMatrix _imatrix def
currentdict end 
doimage }def
/colorimage where{pop/DSIColorImage {colorimage} def}{/DSIColorImage{
/$nc xdf pop /proc0 xdf 3 index 2 index mul 7 add 8 div cvi string /st1 xdf
$nc 3 eq{{proc0 dup/st0 xdf 0 exch 3 exch length 3 sub
{dup st0 exch get .3 mul 1 index 1 add st0 exch get .59 mul add 1 index 2 add st0 exch get .11 mul add
cvi exch 3 div cvi exch st1 3 1 roll put}for st1}}{{proc0 dup/st0 xdf 0 exch 4 exch length 4 sub{dup
st0 exch get .3 mul
1 index 1 add st0 exch get .59 mul add
1 index 2 add st0 exch get .11 mul add
1 index 3 add st0 exch get add dup 255.0 gt{pop 255.0}if
255.0 exch sub cvi
exch 4 div cvi exch
st1 3 1 roll put}for st1}}ifelse
image}def}ifelse
/OPIimage{image}def
/$i matrix def
/bi{scale translate $i currentmatrix pop translate scale setupbands}def
/ei{$i setmatrix}def
/ik{$i setmatrix translate scale 
/_w _imagedict /Width get def
/_h _imagedict /Height get def
/_ds _imagedict /DataSource get def
_w _h false _imatrix 5 -1 roll _ds imagemask}def
/rs{2 copy translate
3 -1 roll neg rotate
neg exch neg exch translate
}def
/cs{_cvmtx astore concat} def
/fd{/_fd xdf}def
/_fontMatrix{1 0 0 _fd 0 ne{-1 0 0}{1 0 0}ifelse _cvmtx astore}def
/rf{/_encodindex xdf
FontDirectory exch known {
findfont dup length 1 add dict begin{1 index/FID ne{def}{pop pop}ifelse}forall
dup /FontName exch def FontType 0 ne{/Encoding Encoding 256 array copy def
_encodindex 0 ge{0 _encodArr _encodindex get{dup type/nametype eq{Encoding 2 index 2 index put pop 1 add}
{exch pop}ifelse}forall pop}if}if
currentdict end
definefont pop }{pop pop}ifelse} def
/cvsf{ findfont ftSize 0 0 ftSize _fd 0 ne{-1 mul}if 0 0 _cvmtx astore 
makefont setfont}def
/mf{3 -1 roll findfont 3 1 roll exch ftSize mul exch ftSize mul 0 exch 0 exch 
_fd 0 ne{-1 mul}if 0 0 _cvmtx astore makefont setfont}def
/wrk1 ( ) def
/wdict 16 dict def
/Work75 75 string def
/Nmk{Work75 cvs dup}def
/Npt{put cvn}def
/dhOdh{Nmk 2 79 Npt}def
/dhBdh{Nmk 2 111 Npt}def
/dhSdh{Nmk 2 83 Npt}def
/sfWidth{gsave 0 0 moveto 0 0 lineto 0 0 lineto 0 0 lineto closepath clip stringwidth grestore}def
/fts{/ftSize exch def}def
/mkFT{dup/FontType get 0 eq{dup maxlength dict begin
{1 index/FID ne 2 index /UniqueID ne and{def}{pop pop}ifelse}forall
currentdict end
dup/FDepVector 2 copy get
[exch 6 index exch 6 index exch{mkFT 3 1 roll}forall pop pop] put dup}{/tempFT 12 dict def
tempFT begin
/FontMatrix [1 0 0 1 0 0] def
/FontType 3 def
dup/Encoding get/Encoding exch def
/proc2 2 index def
dup/ft1 exch def
/ft2 1 array def
/FontBBox [0 0 1 1] def
/BuildChar{CVDict begin
exch dup/ftdt xdf begin
wdict begin
/chr xdf/chrst wrk1 dup 0 chr put def
ft2 0 get null eq{ft1 dup length 2 add dict begin
{1 index/FID ne 2 index /UniqueID ne and{def}{pop pop}ifelse}forall
/PaintType 2 def/StrokeWidth .024 0 FontMatrix idtransform pop def
currentdict end
/q exch definefont
ft2 exch 0 exch put}if
ftdt/proc2 get exec end end end}def end tempFT}ifelse
3 index exch
definefont exch pop}def
/mb{dup dhBdh FontDirectory 1 index known
{exch pop}{dup 2 index
findfont{boldproc} exch
mkFT pop pop pop exch pop
}ifelse }def
/mo{dup dhOdh FontDirectory 1 index known
{exch pop}{dup 2 index
findfont{outproc} exch
mkFT pop pop pop exch pop
}ifelse }def
/ms{dup dhSdh FontDirectory 1 index known
{exch pop}{dup 2 index
findfont{ShadChar} exch
mkFT  pop pop pop exch pop
}ifelse }def
/outproc{ft1 setfont
gsave chrst sfWidth grestore
setcharwidth dblsh}def
/boldproc{ft1 setfont
gsave
chrst sfWidth 1 index 0 ne{exch .05 add exch}if
grestore
setcharwidth
ft1 /PaintType get 2 ne
{0 0 moveto gsave ft2 0 get setfont chrst show grestore chrst show}
{0 0 moveto gsave chrst show grestore .05 0 moveto chrst show}ifelse}def
/dblsh{currentcolor currentcolorspace 1.0 setgray
chrst 0 0 moveto show setcolorspace setcolor
ft2 0 get setfont chrst 0 0 moveto show}def
/ShadChar{
ft1 setfont
gsave
chrst sfWidth 1 index 0 ne{exch .05 add exch}if
grestore
setcharwidth
chrst .06 0 moveto show
0 .05 translate dblsh}def
/ts{show}def
/ta{/_letterSpace xdf/_spaceXtra xdf}def
/tf{/_textWidth xdf
/_numSpaces xdf
/_stringLength xdf
dup     stringwidth pop
_letterSpace _stringLength 1 sub mul add
_spaceXtra _numSpaces mul add
_textWidth exch sub /wdif xdf
_spaceXtra 0 32
wdif _stringLength div
_letterSpace add
0 6 -1 roll awidthshow}def
/pb{/_PageSave save def/showpage{}def}def
/pe{_PageSave restore}def
/pm{_pm currentmatrix pop}def
/_pm matrix def
/ps{showpage _pm setmatrix}def
level2{/ef {gsave 6 array astore concat dup execform grestore}def}
{/ef{gsave 6 array astore concat newpath dup begin Matrix concat
BBox dup dup 0 get exch 1 get moveto
dup dup 0 get exch 3 get lineto
dup dup 2 get exch 3 get lineto
dup 2 get exch 1 get lineto closepath
clip newpath PaintProc end grestore}def}ifelse
/bc{save 11 1 roll 10 dict begin /BBox 5 1 roll 4 array astore def
/Matrix 7 1 roll 6 array astore def /FormType 1 def/PaintProc{/pp get exec}def}def
/ec{pop restore}def
/printvm{1 vmreclaim vmstatus pop exch pop (                         )cvs print (\n)print flush}def
/setoverprint where {pop}{/setoverprint{pop}def}ifelse
/sstr { /$sstrs exch def /$sstr exch def /$sstry exch def /$sstrx exch def /Courier findfont $sstrs 
scalefont setfont $sstrx $sstry mt stm 1 -1 scale $sstr show rtm } def
/DSIBeginPaintProc{/pp mark{currentfile token not{}if dup/DSIEndPaintProc
        eq{pop counttomark array astore cvx bind /exec load]cvx def DSIEndPaintProc exit}
        {counttomark 300 gt{counttomark array astore cvx bind /exec load}if}ifelse}loop}def
/DSIEndPaintProc{currentdict end}def
/DSIBeginPaintSubProc {save 11 1 roll 10 dict dup /pD exch def begin 
        /BBox 5 1 roll 4 array astore def /Matrix 7 1 roll 6 array astore def 
        /FormType 1 def /PaintProc { /pp get exec } def /pp} def
/DSIEndPaintSubProc {bind def end pD} def
/iaa {/ix ix ixn add def} def
/ias2 {/igap exch def /_st0 ia ix igap add get def _st0} def
/ias {/st0 ia ix get def iaa st0} def
/i85s {0 ias2 /ASCII85Decode filter st0 readstring pop iaa} def
/irles {0 ias2 /ASCII85Decode filter /RunLengthDecode filter st0 readstring pop iaa} def
initialize
end
%%EndResource
CVDict begin 0 id 1 fd
_encodArr 0
[
39/quotesingle 96/grave
128/bullet/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE/bullet/bullet/bullet
/bullet/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron
/guilsinglright/oe/bullet/bullet/Ydieresis
/bullet/exclamdown/cent/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis
/Aring
/AE/Ccedilla/Egrave/Eacute/Egrave/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis
/aring
/ae/ccedilla/egrave/eacute/ecircumflex/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] put
_encodArr 1
[
39/quotesingle 96/grave
128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/blank/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute
/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex
/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
] put
end
%%EndProlog 
%%IncludeFont: Arial-BoldMT
%%IncludeFont: ArialMT
CVDict begin
/___FN1-1 /Arial-BoldMT dup dup findfont dup /CharStrings known {begin CharStrings /Adieresis known { -1 }{-1} ifelse end} {pop -1} ifelse rf
/___FN1 /ArialMT dup dup findfont dup /CharStrings known {begin CharStrings /Adieresis known { -1 }{-1} ifelse end} {pop -1} ifelse rf
end
0.25 0.25 translate
%%BeginSetup 
CVDict begin

0 id
1 fd
0 256 translate
300 -300 scli
%%EndSetup 
%%BeginPageSetup 
pm
%%EndPageSetup
/DeviceCMYK scs
0 0 0 1. f4
0.1250 0.1250 sp
 0 lc
 2 lj
T sa
%page rect: 33 364 434 620 
stm
0 0 0 0 f4
np
2.0833 2.0833 1669.8148 1063.2174 rp
de
0.668 0.582 0.6641 0.5117 f4
4.1667 4.1667 sp
np
2.0833 2.0833 1669.8148 1063.2174 rp
ds
rtm
stm
0 0 0 0 f4
np
219.7414 63.1958 mt
1481.5699 63.1958 li
1481.5699 885.4357 li
219.7414 885.4357 li
219.7414 63.1958 li
219.7414 63.1958 li
cp
de
rtm
stm
0.668 0.582 0.6641 0.5117 f4
2.9413 2.9413 sp
np
219.7414 782.6558 mt
1481.5699 782.6558 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
219.7414 679.8757 mt
1481.5699 679.8757 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
219.7414 577.0958 mt
1481.5699 577.0958 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
219.7414 474.3158 mt
1481.5699 474.3158 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
219.7414 371.5358 mt
1481.5699 371.5358 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
219.7414 268.7558 mt
1481.5699 268.7558 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
219.7414 165.9758 mt
1481.5699 165.9758 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
219.7414 63.1958 mt
1481.5699 63.1958 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
219.7414 63.1958 mt
1481.5699 63.1958 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
1481.5699 63.1958 mt
1481.5699 885.4357 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
1481.5699 885.4357 mt
219.7414 885.4357 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
219.7414 885.4357 mt
219.7414 63.1958 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
219.7414 63.1958 mt
219.7414 885.4357 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
207.9761 885.4357 mt
219.7414 885.4357 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
207.9761 782.6558 mt
219.7414 782.6558 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
207.9761 679.8757 mt
219.7414 679.8757 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
207.9761 577.0958 mt
219.7414 577.0958 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
207.9761 474.3158 mt
219.7414 474.3158 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
207.9761 371.5358 mt
219.7414 371.5358 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
207.9761 268.7558 mt
219.7414 268.7558 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
207.9761 165.9758 mt
219.7414 165.9758 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
207.9761 63.1958 mt
219.7414 63.1958 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
219.7414 885.4357 mt
1481.5699 885.4357 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
219.7414 896.5471 mt
219.7414 885.4357 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
399.1623 896.5471 mt
399.1623 885.4357 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
581.5244 896.5471 mt
581.5244 885.4357 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
760.9452 896.5471 mt
760.9452 885.4357 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
940.3661 896.5471 mt
940.3661 885.4357 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
1119.787 896.5471 mt
1119.787 885.4357 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
1302.1491 896.5471 mt
1302.1491 885.4357 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
1481.5699 896.5471 mt
1481.5699 885.4357 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
219.7414 860.4352 mt
399.1623 846.546 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
399.1623 846.546 mt
581.5244 832.6569 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
581.5244 832.6569 mt
760.9452 818.7676 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
760.9452 818.7676 mt
940.3661 802.1006 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
940.3661 802.1006 mt
1119.787 788.2114 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
1119.787 788.2114 mt
1302.1491 774.3223 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
1302.1491 774.3223 mt
1481.5699 757.6552 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
219.7414 860.4352 mt
399.1623 838.2125 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
399.1623 838.2125 mt
581.5244 815.9898 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
581.5244 815.9898 mt
760.9452 790.9893 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
760.9452 790.9893 mt
940.3661 765.9888 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
940.3661 765.9888 mt
1119.787 740.9882 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
1119.787 740.9882 mt
1302.1491 715.9877 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
1302.1491 715.9877 mt
1481.5699 690.9871 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
219.7414 877.1022 mt
399.1623 860.4352 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
399.1623 860.4352 mt
581.5244 804.8785 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
581.5244 804.8785 mt
760.9452 710.432 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
760.9452 710.432 mt
940.3661 610.4298 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
940.3661 610.4298 mt
1119.787 557.6509 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
1119.787 557.6509 mt
1302.1491 504.872 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
1302.1491 504.872 mt
1481.5699 452.0931 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
219.7414 860.4352 mt
399.1623 846.546 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
399.1623 846.546 mt
581.5244 818.7676 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
581.5244 818.7676 mt
760.9452 765.9888 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
760.9452 765.9888 mt
940.3661 665.9866 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
940.3661 665.9866 mt
1119.787 465.9823 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
1119.787 465.9823 mt
1302.1491 74.3071 li
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
1302.1491 74.3072 mt
1304.3292 60.255 li
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
219.7414 852.1017 mt
228.5654 860.4352 li
219.7414 868.7687 li
210.9174 860.4352 li
219.7414 852.1017 li
219.7414 852.1017 li
cp
de
0.668 0.582 0.6641 0.5117 f4
4.1667 4.1667 sp
np
219.7414 852.1017 mt
228.5654 860.4352 li
219.7414 868.7687 li
210.9174 860.4352 li
219.7414 852.1017 li
219.7414 852.1017 li
cp
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
399.1623 838.2125 mt
407.9862 846.546 li
399.1623 854.8796 li
390.3383 846.546 li
399.1623 838.2125 li
399.1623 838.2125 li
cp
de
0.668 0.582 0.6641 0.5117 f4
np
399.1623 838.2125 mt
407.9862 846.546 li
399.1623 854.8796 li
390.3383 846.546 li
399.1623 838.2125 li
399.1623 838.2125 li
cp
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
581.5244 824.3234 mt
590.3484 832.6569 li
581.5244 840.9904 li
572.7004 832.6569 li
581.5244 824.3234 li
581.5244 824.3234 li
cp
de
0.668 0.582 0.6641 0.5117 f4
np
581.5244 824.3234 mt
590.3484 832.6569 li
581.5244 840.9904 li
572.7004 832.6569 li
581.5244 824.3234 li
581.5244 824.3234 li
cp
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
760.9452 810.4341 mt
769.7693 818.7676 li
760.9452 827.1012 li
752.1213 818.7676 li
760.9452 810.4341 li
760.9452 810.4341 li
cp
de
0.668 0.582 0.6641 0.5117 f4
np
760.9452 810.4341 mt
769.7693 818.7676 li
760.9452 827.1012 li
752.1213 818.7676 li
760.9452 810.4341 li
760.9452 810.4341 li
cp
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
940.3661 793.7671 mt
949.19 802.1006 li
940.3661 810.4341 li
931.5422 802.1006 li
940.3661 793.7671 li
940.3661 793.7671 li
cp
de
0.668 0.582 0.6641 0.5117 f4
np
940.3661 793.7671 mt
949.19 802.1006 li
940.3661 810.4341 li
931.5422 802.1006 li
940.3661 793.7671 li
940.3661 793.7671 li
cp
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
1119.787 779.8779 mt
1128.6109 788.2114 li
1119.787 796.5449 li
1110.963 788.2114 li
1119.787 779.8779 li
1119.787 779.8779 li
cp
de
0.668 0.582 0.6641 0.5117 f4
np
1119.787 779.8779 mt
1128.6109 788.2114 li
1119.787 796.5449 li
1110.963 788.2114 li
1119.787 779.8779 li
1119.787 779.8779 li
cp
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
1302.1491 765.9888 mt
1310.9731 774.3223 li
1302.1491 782.6558 li
1293.3251 774.3223 li
1302.1491 765.9888 li
1302.1491 765.9888 li
cp
de
0.668 0.582 0.6641 0.5117 f4
np
1302.1491 765.9888 mt
1310.9731 774.3223 li
1302.1491 782.6558 li
1293.3251 774.3223 li
1302.1491 765.9888 li
1302.1491 765.9888 li
cp
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
1481.5699 749.3217 mt
1490.3939 757.6552 li
1481.5699 765.9888 li
1472.746 757.6552 li
1481.5699 749.3217 li
1481.5699 749.3217 li
cp
de
0.668 0.582 0.6641 0.5117 f4
np
1481.5699 749.3217 mt
1490.3939 757.6552 li
1481.5699 765.9888 li
1472.746 757.6552 li
1481.5699 749.3217 li
1481.5699 749.3217 li
cp
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
207.9761 849.3239 222.6827 863.2131 rp
de
0.668 0.582 0.6641 0.5117 f4
np
207.9761 849.3239 222.6827 863.2131 rp
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
387.3969 827.1012 402.1036 840.9904 rp
de
0.668 0.582 0.6641 0.5117 f4
np
387.3969 827.1012 402.1036 840.9904 rp
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
569.7591 804.8785 584.4658 818.7676 rp
de
0.668 0.582 0.6641 0.5117 f4
np
569.7591 804.8785 584.4658 818.7676 rp
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
749.18 779.8779 763.8866 793.7671 rp
de
0.668 0.582 0.6641 0.5117 f4
np
749.18 779.8779 763.8866 793.7671 rp
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
928.6008 754.8774 943.3074 768.7666 rp
de
0.668 0.582 0.6641 0.5117 f4
np
928.6008 754.8774 943.3074 768.7666 rp
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
1108.0216 729.8768 1122.7283 743.766 rp
de
0.668 0.582 0.6641 0.5117 f4
np
1108.0216 729.8768 1122.7283 743.766 rp
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
1290.3838 704.8763 1305.0905 718.7655 rp
de
0.668 0.582 0.6641 0.5117 f4
np
1290.3838 704.8763 1305.0905 718.7655 rp
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
1469.8047 679.8757 1484.5112 693.765 rp
de
0.668 0.582 0.6641 0.5117 f4
np
1469.8047 679.8757 1484.5112 693.765 rp
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
219.7414 868.7687 mt
228.5654 885.4357 li
210.9174 885.4357 li
219.7414 868.7687 li
219.7414 868.7687 li
cp
de
0.668 0.582 0.6641 0.5117 f4
np
219.7414 868.7687 mt
228.5654 885.4357 li
210.9174 885.4357 li
219.7414 868.7687 li
219.7414 868.7687 li
cp
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
399.1623 852.1017 mt
407.9862 868.7687 li
390.3383 868.7687 li
399.1623 852.1017 li
399.1623 852.1017 li
cp
de
0.668 0.582 0.6641 0.5117 f4
np
399.1623 852.1017 mt
407.9862 868.7687 li
390.3383 868.7687 li
399.1623 852.1017 li
399.1623 852.1017 li
cp
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
581.5244 796.5449 mt
590.3484 813.212 li
572.7004 813.212 li
581.5244 796.5449 li
581.5244 796.5449 li
cp
de
0.668 0.582 0.6641 0.5117 f4
np
581.5244 796.5449 mt
590.3484 813.212 li
572.7004 813.212 li
581.5244 796.5449 li
581.5244 796.5449 li
cp
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
760.9452 702.0985 mt
769.7693 718.7655 li
752.1213 718.7655 li
760.9452 702.0985 li
760.9452 702.0985 li
cp
de
0.668 0.582 0.6641 0.5117 f4
np
760.9452 702.0985 mt
769.7693 718.7655 li
752.1213 718.7655 li
760.9452 702.0985 li
760.9452 702.0985 li
cp
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
940.3661 602.0963 mt
949.19 618.7634 li
931.5422 618.7634 li
940.3661 602.0963 li
940.3661 602.0963 li
cp
de
0.668 0.582 0.6641 0.5117 f4
np
940.3661 602.0963 mt
949.19 618.7634 li
931.5422 618.7634 li
940.3661 602.0963 li
940.3661 602.0963 li
cp
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
1119.787 549.3174 mt
1128.6109 565.9844 li
1110.963 565.9844 li
1119.787 549.3174 li
1119.787 549.3174 li
cp
de
0.668 0.582 0.6641 0.5117 f4
np
1119.787 549.3174 mt
1128.6109 565.9844 li
1110.963 565.9844 li
1119.787 549.3174 li
1119.787 549.3174 li
cp
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
1302.1491 496.5385 mt
1310.9731 513.2055 li
1293.3251 513.2055 li
1302.1491 496.5385 li
1302.1491 496.5385 li
cp
de
0.668 0.582 0.6641 0.5117 f4
np
1302.1491 496.5385 mt
1310.9731 513.2055 li
1293.3251 513.2055 li
1302.1491 496.5385 li
1302.1491 496.5385 li
cp
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
1481.5699 443.7595 mt
1490.3939 460.4266 li
1472.746 460.4266 li
1481.5699 443.7595 li
1481.5699 443.7595 li
cp
de
0.668 0.582 0.6641 0.5117 f4
np
1481.5699 443.7595 mt
1490.3939 460.4266 li
1472.746 460.4266 li
1481.5699 443.7595 li
1481.5699 443.7595 li
cp
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
7.3533 6.9446 215.3294 856.2685 ep
de
0.668 0.582 0.6641 0.5117 f4
np
7.3533 6.9446 215.3294 856.2685 ep
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
7.3533 6.9446 394.7503 842.3793 ep
de
0.668 0.582 0.6641 0.5117 f4
np
7.3533 6.9446 394.7503 842.3793 ep
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
7.3533 6.9446 577.1124 814.6009 ep
de
0.668 0.582 0.6641 0.5117 f4
np
7.3533 6.9446 577.1124 814.6009 ep
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
7.3533 6.9446 756.5333 761.822 ep
de
0.668 0.582 0.6641 0.5117 f4
np
7.3533 6.9446 756.5333 761.822 ep
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
7.3533 6.9446 935.9541 661.8198 ep
de
0.668 0.582 0.6641 0.5117 f4
np
7.3533 6.9446 935.9541 661.8198 ep
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
7.3533 6.9446 1115.375 461.8155 ep
de
0.668 0.582 0.6641 0.5117 f4
np
7.3533 6.9446 1115.375 461.8155 ep
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
7.3533 6.9446 1297.7371 70.1404 ep
de
0.668 0.582 0.6641 0.5117 f4
np
7.3533 6.9446 1297.7371 70.1404 ep
ds
rtm
stm
stm
37.4999 fts
/___FN1 cvsf
0.668 0.582 0.6641 0.5117 f4
F sa
170.7389 895.5747 mt
(0)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
129.5603 792.7947 mt
(2)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
150.1496 792.7947 mt
(5)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
170.7389 792.7947 mt
(0)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
129.5603 690.0148 mt
(5)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
150.1496 690.0148 mt
(0)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
170.7389 690.0148 mt
(0)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
129.5603 587.2347 mt
(7)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
150.1496 587.2347 mt
(5)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
170.7389 587.2347 mt
(0)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
108.9711 484.4548 mt
(1)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
129.5603 484.4548 mt
(0)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
150.1496 484.4548 mt
(0)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
170.7389 484.4548 mt
(0)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
108.9711 381.6747 mt
(1)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
129.5603 381.6747 mt
(2)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
150.1496 381.6747 mt
(5)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
170.7389 381.6747 mt
(0)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
108.9711 278.8948 mt
(1)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
129.5603 278.8948 mt
(5)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
150.1496 278.8948 mt
(0)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
170.7389 278.8948 mt
(0)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
108.9711 176.1147 mt
(1)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
129.5603 176.1147 mt
(7)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
150.1496 176.1147 mt
(5)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
170.7389 176.1147 mt
(0)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
108.9711 73.3348 mt
(2)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
129.5603 73.3348 mt
(0)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
150.1496 73.3348 mt
(0)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
170.7389 73.3348 mt
(0)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
211.9174 948.3537 mt
(0)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
391.3383 948.3537 mt
(1)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
573.7004 948.3537 mt
(2)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
753.1213 948.3537 mt
(3)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
932.5422 948.3537 mt
(4)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
1111.963 948.3537 mt
(5)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
1294.3251 948.3537 mt
(6)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
1473.746 948.3537 mt
(7)  show
T sa
rtm
rtm
stm
stm
37.4999 fts
/___FN1-1 cvsf
0.668 0.582 0.6641 0.5117 f4
F sa
744.2973 1013.3689 mt
(B)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
770.7692 1013.3689 mt
(i)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
782.5345 1013.3689 mt
(t)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
794.2997 1013.3689 mt
( )  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
806.065 1013.3689 mt
(P)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
832.5369 1013.3689 mt
(o)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
856.0675 1013.3689 mt
(s)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
873.7153 1013.3689 mt
(i)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
885.4806 1013.3689 mt
(t)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
897.2459 1013.3689 mt
(i)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
909.0111 1013.3689 mt
(o)  show
T sa
rtm
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
932.5417 1013.3689 mt
(n)  show
T sa
rtm
rtm
stm
0 0 0 0 f4
np
1525.6899 354.8687 1658.0495 588.2071 rp
de
0.668 0.582 0.6641 0.5117 f4
np
1525.6899 354.8687 1658.0495 588.2071 rp
ds
rtm
stm
0.668 0.582 0.6641 0.5117 f4
2.9413 2.9413 sp
np
1543.3378 390.9807 mt
1622.7536 390.9807 li
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
1581.575 382.6472 mt
1590.399 390.9807 li
1581.575 399.3142 li
1572.751 390.9807 li
1581.575 382.6472 li
1581.575 382.6472 li
cp
de
0.668 0.582 0.6641 0.5117 f4
4.1667 4.1667 sp
np
1581.575 382.6472 mt
1590.399 390.9807 li
1581.575 399.3142 li
1572.751 390.9807 li
1581.575 382.6472 li
1581.575 382.6472 li
cp
ds
rtm
stm
stm
37.4999 fts
/___FN1 cvsf
0.668 0.582 0.6641 0.5117 f4
F sa
1632.5775 398.3418 mt
(1)  show
T sa
rtm
rtm
stm
0.668 0.582 0.6641 0.5117 f4
2.9413 2.9413 sp
np
1543.3378 449.3152 mt
1622.7536 449.3152 li
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
1569.8097 438.2039 1584.5163 452.0931 rp
de
0.668 0.582 0.6641 0.5117 f4
4.1667 4.1667 sp
np
1569.8097 438.2039 1584.5163 452.0931 rp
ds
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
1632.5775 456.6764 mt
(2)  show
T sa
rtm
rtm
stm
0.668 0.582 0.6641 0.5117 f4
2.9413 2.9413 sp
np
1543.3378 507.6498 mt
1622.7536 507.6498 li
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
1581.575 499.3163 mt
1590.399 515.9833 li
1572.751 515.9833 li
1581.575 499.3163 li
1581.575 499.3163 li
cp
de
0.668 0.582 0.6641 0.5117 f4
4.1667 4.1667 sp
np
1581.575 499.3163 mt
1590.399 515.9833 li
1572.751 515.9833 li
1581.575 499.3163 li
1581.575 499.3163 li
cp
ds
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
1632.5775 515.011 mt
(3)  show
T sa
rtm
rtm
stm
0.668 0.582 0.6641 0.5117 f4
2.9413 2.9413 sp
np
1543.3378 565.9844 mt
1622.7536 565.9844 li
ds
rtm
stm
0.5273 0.4492 0.5117 0.2383 f4
np
7.3533 6.9446 1577.163 561.8177 ep
de
0.668 0.582 0.6641 0.5117 f4
4.1667 4.1667 sp
np
7.3533 6.9446 1577.163 561.8177 ep
ds
rtm
stm
stm
0.668 0.582 0.6641 0.5117 f4
F sa
1632.5775 573.3456 mt
(4)  show
T sa
rtm
rtm
stm
0.668 0.582 0.6641 0.5117 f4
np
2.0833 2.0833 1669.8148 1063.2174 rp
ds
rtm
stm
stm
0.0000 -1.0000 1.0000 0.0000 608.6591 66.6708 cs
0 0 0 1. f4
F sa
-474.9156 -533.0771 mt
(Vertices) [22.87 21.00 12.37 10.50 8.25 18.75 21.00 0 ] xshow
T sa
rtm
rtm
terminate

%%EndDocument
 PE 10 SS 
7200 34021 MT
(Input Orderings:)SH
8136 35398 MT
(1:)SH
/Times-Italic SF
9164 XM
(m)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
10525 35743 MT
(0)SH
10 SS 
10925 35398 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
11564 35743 MT
(1)SH
10 SS 
11964 35398 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
12603 35743 MT
(2)SH
10 SS 
13003 35398 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
13642 35743 MT
(3)SH
10 SS 
14042 35398 MT
(,)SH
/Times-Italic SF
(cin)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(a)SH
8 /Times-Roman AF
16264 35743 MT
(0)SH
10 SS 
16664 35398 MT
(,)SH
/Times-Italic SF
(b)SH
8 /Times-Roman AF
17414 35743 MT
(0)SH
10 SS 
17814 35398 MT
(, . . . ,)SH
/Times-Italic SF
(a)SH
8 SS 
20564 35743 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 /Times-Italic AF
21803 35398 MT
(b)SH
8 SS 
22303 35743 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 SS 
30600 35398 MT
(2:)SH
/Times-Italic SF
31628 XM
(m)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
32989 35743 MT
(0)SH
10 SS 
33389 35398 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
34028 35743 MT
(1)SH
10 SS 
34428 35398 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
35067 35743 MT
(2)SH
10 SS 
35467 35398 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
36106 35743 MT
(3)SH
10 SS 
36506 35398 MT
(,)SH
/Times-Italic SF
(cin)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(a)SH
8 SS 
38728 35743 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 SS 
39967 35398 MT
(,)SH
/Times-Italic SF
(b)SH
8 SS 
40717 35743 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 SS 
41956 35398 MT
(, . . . ,)SH
/Times-Italic SF
(a)SH
8 /Times-Roman AF
44706 35743 MT
(0)SH
10 /Times-Italic AF
45106 35398 MT
(b)SH
8 /Times-Roman AF
45606 35743 MT
(0)SH
10 SS 
8136 36775 MT
(3:)SH
/Times-Italic SF
9164 XM
(cin)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(a)SH
8 /Times-Roman AF
11136 37120 MT
(0)SH
10 SS 
11536 36775 MT
(,)SH
/Times-Italic SF
(b)SH
8 /Times-Roman AF
12286 37120 MT
(0)SH
10 SS 
12686 36775 MT
(, . . . ,)SH
/Times-Italic SF
(a)SH
8 SS 
15436 37120 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 /Times-Italic AF
16675 36775 MT
(b)SH
8 SS 
17175 37120 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 SS 
18414 36775 MT
(,)SH
/Times-Italic SF
(m)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
20025 37120 MT
(0)SH
10 SS 
20425 36775 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
21064 37120 MT
(1)SH
10 SS 
21464 36775 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
22103 37120 MT
(2)SH
10 SS 
22503 36775 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
23142 37120 MT
(3)SH
10 SS 
30600 36775 MT
(4:)SH
/Times-Italic SF
31628 XM
(m)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
32989 37120 MT
(0)SH
10 SS 
33389 36775 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
34028 37120 MT
(1)SH
10 SS 
34428 36775 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
35067 37120 MT
(2)SH
10 SS 
35467 36775 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
36106 37120 MT
(3)SH
10 SS 
36506 36775 MT
(,)SH
/Times-Italic SF
(cin)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(a)SH
8 /Times-Roman AF
38728 37120 MT
(0)SH
10 SS 
39128 36775 MT
(, . . . ,)SH
/Times-Italic SF
(a)SH
8 SS 
41878 37120 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 /Times-Italic AF
43117 36775 MT
(b)SH
8 /Times-Roman AF
43617 37120 MT
(0)SH
10 SS 
44017 36775 MT
(, . . . ,)SH
/Times-Italic SF
(b)SH
8 SS 
46767 37120 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 SS 
17477 39762 MT
(Figure 11.ALU Output Graph Sizes for Different Input Orderings)SH
7200 41553 MT
(bit-serial processor analogy, we could implement the ALU with the control inputs read last)
126 W( by computing all 32)125 W
7200 42930 MT
(possible ALU functions and)
24 W( then selecting the appropriate result once the desired function is known.  The final case)25 W
7200 44307 MT
(shows what happens if a poor ordering is)
31 W( chosen, in this case the ordering)30 W
/Times-Italic SF
37372 XM
(m)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
38733 44652 MT
(0)SH
10 SS 
39133 44307 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
39772 44652 MT
(1)SH
10 SS 
40172 44307 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
40811 44652 MT
(2)SH
10 SS 
41211 44307 MT
(,)SH
/Times-Italic SF
(s)SH
8 /Times-Roman AF
41850 44652 MT
(3)SH
10 SS 
42250 44307 MT
(,)SH
/Times-Italic SF
(cin)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(a)SH
8 /Times-Roman AF
44472 44652 MT
(0)SH
10 SS 
44872 44307 MT
(, . . . ,)SH
/Times-Italic SF
(a)SH
8 SS 
47622 44652 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 /Times-Italic AF
48861 44307 MT
(b)SH
8 /Times-Roman AF
49361 44652 MT
(0)SH
10 SS 
49761 44307 MT
(, . . . ,)SH
/Times-Italic SF
(b)SH
8 SS 
52511 44652 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 SS 
53750 44307 MT
(.)SH
7200 45684 MT
(This ordering requires the program to represent functions similar to)
72 W( the function)73 W
/Times-Italic SF
40340 XM
(x)SH
8 /Times-Roman AF
40784 46029 MT
(1)SH
10 /Symbol AF
41184 45684 MT
(\327)SH
/Times-Italic SF
(x)SH
8 SS 
41878 46029 MT
(n)SH
/Times-Roman SF
(+1)SH
10 SS 
43379 45684 MT
(+)SH
/Symbol SF
44443 XM
(\327 \327 \327)SH
/Times-Roman SF
46193 XM
(+)SH
/Times-Italic SF
47007 XM
(x)SH
8 SS 
47451 46029 MT
(n)SH
10 /Symbol AF
47851 45684 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
48545 46029 MT
(2)SH
/Times-Italic SF
(n)SH
10 /Times-Roman AF
49668 45684 MT
(considered)SH
7200 47061 MT
(in Section 3, with the same exponential growth characteristics.)SH
8200 49540 MT
(These experimental results indicate that our representation works quite well for functions representing addition)107 W
7200 50917 MT
(and logical operations on words of data, as)
51 W( long as we choose an ordering in which the successive bits of the input)52 W
7200 52294 MT
(words are interleaved.  Our)
152 W( representation seems especially efficient when compared to other representations of)151 W
7200 53671 MT
(Boolean functions.  For example, a truth table representation would be totally)
3 W( impractical for ALU's with word sizes)4 W
7200 55048 MT
(greater than 8 bits.  A reduced sum-of-products representation of the most)
106 W( significant bit in the sum of two)105 W
/Times-Italic SF
52089 XM
(n)SH
/Times-Roman SF
52944 XM
(bit)SH
7200 56425 MT
(numbers requires about 2)188 W
8 /Times-Italic AF
17901 56080 MT
(n)SH
/Times-Roman SF
(+2)SH
10 SS 
19590 56425 MT
(product terms, and hence a reduced sum-of-products representation of this circuit)189 W
7200 57802 MT
(would be equally impractical.)SH
12 /Times-Bold AF
7200 61486 MT
(6. Conclusion)SH
10 /Times-Roman AF
8200 62863 MT
(We have shown that by taking a well-known graphical representation of Boolean functions)
204 W( and imposing a)203 W
7200 64240 MT
(restriction on the vertex labels, the minimum size)
270 W( graph representing a function becomes a canonical form.)271 W
7200 65617 MT
(Furthermore, given any graph representing a function, we)
112 W( can reduce it to a canonical form graph in linear time.)111 W
7200 66994 MT
(Thus our reduction algorithm not only)
7 W( minimizes the amount of storage required to represent a function and the time)8 W
7200 68371 MT
(required to perform symbolic operations on the function, it also makes such tasks as testing for equivalence,)224 W
7200 69748 MT
(satisfiability, or tautology very simple.  We have found this property valuable in many applications.)SH
ES
%%Page: 22 22

61200 79200 BS
0 SI
10 /Times-Roman AF
30100 4286 MT
(22)SH
8200 7886 MT
(We have presented a set of algorithms for performing a variety of)
13 W( operations on Boolean functions represented by)14 W
7200 9263 MT
(our data structure.  Each of these algorithms)
98 W( obeys an important closure property---if the argument graphs satisfy)97 W
7200 10640 MT
(our ordering restrictions, so does the result graph.  By combining concepts from Boolean algebra with)
92 W( techniques)93 W
7200 12017 MT
(from graph algorithms, we achieve a high degree of efficiency.  That is, the performance is limited)
6 W( more by the sizes)5 W
7200 13394 MT
(of the data structures rather than by the algorithms that operate on them.)SH
8200 15873 MT
(Akers [17])
SH( has devised a variety of coding techniques to reduce the size of the binary)
264 W( decision diagrams)265 W
7200 17250 MT
(representing the output functions of a system.  For example, he can represent the functions for all 8 outputs)
71 W( of the)70 W
7200 18627 MT
(74181 ALU slice by a total of 35 vertices, whereas our representation requires 918.  Several of these techniques)116 W
7200 20004 MT
(could be applied to our representation without)
48 W( violating the properties required by our algorithms.  We will discuss)47 W
7200 21381 MT
(two such refinements briefly.)SH
8200 23860 MT
(Most digital systems contain multiple outputs.)
64 W( In)
380 W( our current implementation we represent each output function)65 W
7200 25237 MT
(by a separate graph, even though these function may be closely)
216 W( related and therefore have graphs containing)215 W
7200 26614 MT
(isomorphic subgraphs.  Alternatively,)
107 W( we could represent a set of functions by a single graph with multiple roots)108 W
7200 27991 MT
(\050one for each function.\051)167 W
8 SS 
17142 27646 MT
(11)SH
10 SS 
18776 27991 MT
(Our reduction algorithm could be applied to such graphs to eliminate)
167 W( any duplicate)168 W
7200 29368 MT
(subgraphs and)
268 W( to guarantee that the subgraph consisting of a root and all of its descendants is a canonical)267 W
7200 30745 MT
(representation of the corresponding)
25 W( function.  For example, we could represent the)26 W
/Times-Italic SF
40835 XM
(n)SH
/Times-Roman SF
(+1 functions for the addition of)26 W
7200 32122 MT
(two)SH
/Times-Italic SF
8983 XM
(n)SH
/Times-Roman SF
(-bit numbers by a single graph containing 9)33 W
/Times-Italic SF
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1 vertices \050assuming the inputs are ordered most significant bits)33 W
7200 33499 MT
(first\051, whereas representing them by separate)
89 W( graphs requires a total of 3)90 W
/Times-Italic SF
(n)SH
8 /Times-Roman AF
37566 33154 MT
(2)SH
10 SS 
37966 33499 MT
(+6)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(+2 vertices.  Taking this idea to an)90 W
7200 34876 MT
(extreme, we could manage our entire set of graphs as a single shared data structure, using an extension)
167 W( of the)166 W
7200 36253 MT
(reduction algorithm to merge a newly created)
20 W( graph into this structure.  With such a structure, we could enhance the)21 W
7200 37630 MT
(performance of)
56 W( the)55 W
/Times-Italic SF
15224 XM
(Apply)SH
/Times-Roman SF
17862 XM
(procedure by maintaining a table containing entries of the form \050)55 W
/Times-Italic SF
(v)SH
8 /Times-Roman AF
44740 37975 MT
(1)SH
10 SS 
45140 37630 MT
(,)SH
/Times-Italic SF
(v)SH
8 /Times-Roman AF
45834 37975 MT
(2)SH
10 SS 
46234 37630 MT
(,<)SH
/Times-Italic SF
(op)SH
/Times-Roman SF
(>,)SH
/Times-Italic SF
(u)SH
/Times-Roman SF
(\051 indicating)55 W
7200 39007 MT
(that the result of applying operation <)72 W
/Times-Italic SF
(op)SH
/Times-Roman SF
(> to graphs with roots)72 W
/Times-Italic SF
33146 XM
(v)SH
8 /Times-Roman AF
33590 39352 MT
(1)SH
10 SS 
34312 39007 MT
(and)SH
/Times-Italic SF
36078 XM
(v)SH
8 /Times-Roman AF
36522 39352 MT
(2)SH
10 SS 
37245 39007 MT
(was a graph with root)73 W
/Times-Italic SF
46525 XM
(u)SH
/Times-Roman SF
(. In)
396 W( this way we)73 W
7200 40384 MT
(would exploit the information generated by previous invocations of)136 W
/Times-Italic SF
35671 XM
(Apply)SH
/Times-Roman SF
38390 XM
(as well as by the current one.)
136 W( These)520 W
7200 41761 MT
(savings in overall storage)
129 W( requirements and algorithm efficiencies would be offset somewhat by a more difficult)130 W
7200 43138 MT
(memory management problem, however.)SH
8200 45617 MT
(Akers also saves storage by representing functions in decomposed form.  That)
79 W( is, we can represent the function)78 W
/Times-Italic SF
7200 46994 MT
(f)SH
/Symbol SF
7728 XM
(|)SH
8 /Times-Italic AF
7928 47339 MT
(x)SH
8283 47684 MT
(i)SH
/Times-Roman SF
8505 47339 MT
(=)SH
/Times-Italic SF
(g)SH
10 /Times-Roman AF
9759 46994 MT
(in terms of)153 W
/Times-Italic SF
14801 XM
(f)SH
/Times-Roman SF
15482 XM
(and)SH
/Times-Italic SF
17329 XM
(g)SH
/Times-Roman SF
18232 XM
(\050which may themselves)
153 W( be represented in decomposed form\051.  Unfortunately, a given)154 W
7200 48545 MT
(function can be decomposed in many different ways,)
61 W( and hence this technique would not lead to a canonical form.)60 W
7200 49922 MT
(However, as noted on page 16 there are certain instances in)
220 W( which functions)221 W
/Times-Italic SF
40722 XM
(f)SH
/Times-Roman SF
41621 XM
(and)SH
/Times-Italic SF
43536 XM
(g)SH
/Times-Roman SF
44507 XM
(can be composed in a)221 W
7200 51299 MT
(straightforward way by simply replacing each vertex representing the composition variable)63 W
/Times-Italic SF
44580 XM
(x)SH
8 SS 
45024 51644 MT
(i)SH
10 /Times-Roman AF
45559 51299 MT
(with the graph for)62 W
/Times-Italic SF
53250 XM
(g)SH
/Times-Roman SF
(.)SH
7200 52676 MT
(For such decompositions, functions)
277 W( could be stored in decomposed form and expanded into canonical form)278 W
7200 54053 MT
(dynamically as operations are performed on)
112 W( them.  In some instances, the storage savings could be considerable.)111 W
7200 55430 MT
(For example the graph for the function)SH
/Times-Italic SF
9200 57221 MT
(x)SH
8 /Times-Roman AF
9644 57566 MT
(1)SH
10 /Symbol AF
10044 57221 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
10738 57566 MT
(2)SH
/Times-Italic SF
(n)SH
10 /Times-Roman AF
11788 57221 MT
(+)SH
/Times-Italic SF
12602 XM
(x)SH
8 /Times-Roman AF
13046 57566 MT
(2)SH
10 /Symbol AF
13446 57221 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
14140 57566 MT
(2)SH
/Times-Italic SF
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 SS 
16029 57221 MT
(+ .)
250 W( . .  +)SH
/Times-Italic SF
19657 XM
(x)SH
8 SS 
20101 57566 MT
(n)SH
10 /Symbol AF
20501 57221 MT
(\327)SH
/Times-Italic SF
(x)SH
8 SS 
21195 57566 MT
(n)SH
/Times-Roman SF
(+1)SH
10 SS 
7200 58949 MT
(requires a total of 2)SH
8 /Times-Italic AF
14976 58604 MT
(n)SH
/Times-Roman SF
(+1)SH
10 SS 
16477 58949 MT
(vertices. This)
250 W( function can be decomposed as a series of functions where)SH
/Times-Italic SF
46081 XM
(f)SH
8 SS 
46359 59294 MT
(n)SH
10 /Times-Roman AF
47009 58949 MT
(=)SH
/Times-Italic SF
47823 XM
(x)SH
8 SS 
48267 59294 MT
(n)SH
10 /Symbol AF
48667 58949 MT
(\327)SH
/Times-Italic SF
(x)SH
8 SS 
49361 59294 MT
(n)SH
/Times-Roman SF
(+1)SH
10 SS 
50612 58949 MT
(,)SH
/Times-Italic SF
9200 60854 MT
(f)SH
8 SS 
9478 61199 MT
(i)SH
10 /Times-Roman AF
10386 60854 MT
(= \050)436 W
/Times-Italic SF
(x)SH
8 SS 
12413 61199 MT
(i)SH
10 /Symbol AF
12635 60854 MT
(\327)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
13329 61199 MT
(2)SH
/Times-Italic SF
(n)SH
/Symbol SF
(-)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(+1)SH
10 SS 
15891 60854 MT
(+)SH
/Times-Italic SF
16705 XM
(x)SH
8 SS 
17149 61199 MT
(i)SH
/Times-Roman SF
(+1)SH
10 SS 
18222 60854 MT
(\051)SH
/Symbol SF
18705 XM
(|)SH
8 /Times-Italic AF
18905 61199 MT
(x)SH
19260 61544 MT
(i)SH
/Times-Roman SF
(+1)SH
20333 61199 MT
(=)SH
/Times-Italic SF
(f)SH
21006 61544 MT
(i)SH
/Times-Roman SF
(+1)SH
10 SS 
7200 62519 MT
(for)SH
/Times-Italic SF
8624 XM
(n)SH
/Times-Roman SF
9274 XM
(>)SH
/Times-Italic SF
9988 XM
(i)SH
/Symbol SF
10416 XM
(\263)SH
/Times-Roman SF
11115 XM
(1, and)8 W
/Times-Italic SF
13825 XM
(f)SH
8 /Times-Roman AF
14103 62864 MT
(1)SH
10 SS 
14761 62519 MT
(equals the desired function.  Each of these)
8 W( functions can be represented by graphs with 6 vertices.)9 W
7200 63896 MT
(It is unclear, however,)
42 W( how often such decompositions occur, how easy they are to find, and how they would affect)41 W
7200 65273 MT
(the efficiency of the algorithms.)SH
10800 50 7200 69428 UL
6 SS 
8000 70767 MT
(11)SH
8 /Times-Bold AF
8600 71076 MT
(Update:)SH
/Times-Roman SF
11584 XM
(This idea was subsequently termed a "Shared BDD" \050S. Minato, N. Ishiura, and)
29 W( S. Yajima, "Shared Binary Decision Diagram with)28 W
7200 72000 MT
(Attributed Edges,")SH
/Times-Italic SF
13368 XM
(27th Design Automation Conference)SH
/Times-Roman SF
(, 1990, pp. 52-57.\051  It has now become the most common implementation method.)SH
ES
%%Page: 23 23

61200 79200 BS
0 SI
10 /Times-Roman AF
30100 4286 MT
(23)SH
12 /Times-Bold AF
7200 8004 MT
(Appendix: The Complexity of Integer Multiplication)SH
10 /Times-Roman AF
8200 9381 MT
(In this appendix, we prove that the functions representing the outputs of an integer multiplier provide a difficult)67 W
7200 10758 MT
(case for our representation, i.e. the graph sizes grow exponentially in the word size regardless of the ordering of the)31 W
7200 12135 MT
(input variables.  Given that there are \0502)18 W
/Times-Italic SF
(n)SH
/Times-Roman SF
(\051! possible orderings of the input variables, we could not hope)
18 W( to derive this)19 W
7200 13512 MT
(result experimentally, and hence we must provide a detailed proof.)SH
8200 15991 MT
(Our proof is based on)
102 W( principles similar to those used in proving area-time lower bounds on multiplier circuits)101 W
7450 17368 MT
([18, 19].)
SH( However,)
394 W( we must show not just that a large amount of information must)
72 W( be transferred from the set of)73 W
7200 18745 MT
(inputs to the set of outputs in performing multiplication, but that certain individual outputs require high)
31 W( information)30 W
7200 20122 MT
(transfer.)SH
8200 22601 MT
(Consider a multiplier with inputs)9 W
/Times-Italic SF
21718 XM
(a)SH
8 /Times-Roman AF
22218 22946 MT
(1)SH
10 SS 
22618 22601 MT
(, . . . ,)SH
/Times-Italic SF
(a)SH
8 SS 
25368 22946 MT
(n)SH
10 /Times-Roman AF
26027 22601 MT
(and)SH
/Times-Italic SF
27730 XM
(b)SH
8 /Times-Roman AF
28230 22946 MT
(1)SH
10 SS 
28630 22601 MT
(, . . . ,)SH
/Times-Italic SF
(b)SH
8 SS 
31380 22946 MT
(n)SH
10 /Times-Roman AF
32039 22601 MT
(corresponding to the binary encoding)
9 W( of integers)10 W
/Times-Italic SF
51796 XM
(a)SH
/Times-Roman SF
52556 XM
(and)SH
/Times-Italic SF
7200 23978 MT
(b)SH
/Times-Roman SF
7972 XM
(with)SH
/Times-Italic SF
10022 XM
(a)SH
8 /Times-Roman AF
10522 24323 MT
(1)SH
10 SS 
11194 23978 MT
(and)SH
/Times-Italic SF
12910 XM
(b)SH
8 /Times-Roman AF
13410 24323 MT
(1)SH
10 SS 
14082 23978 MT
(being the least)
22 W( significant bits.  This circuit has 2)21 W
/Times-Italic SF
(n)SH
/Times-Roman SF
34654 XM
(outputs corresponding to the binary encoding of)21 W
7200 25355 MT
(the product)356 W
/Times-Italic SF
12689 XM
(a)SH
/Symbol SF
13339 XM
(\327)SH
/Times-Italic SF
(b)SH
/Times-Roman SF
(, described by functions)356 W
/Times-Italic SF
25317 XM
(mul)SH
8 SS 
26817 25700 MT
(i)SH
10 /Times-Roman AF
27189 25355 MT
(\050)SH
/Times-Italic SF
(a)SH
8 /Times-Roman AF
28022 25700 MT
(1)SH
10 SS 
28422 25355 MT
(, . . . ,)SH
/Times-Italic SF
(a)SH
8 SS 
31172 25700 MT
(n)SH
10 /Times-Roman AF
31572 25355 MT
(,)SH
/Times-Italic SF
(b)SH
8 /Times-Roman AF
32322 25700 MT
(1)SH
10 SS 
32722 25355 MT
(, . . . ,)SH
/Times-Italic SF
(b)SH
8 SS 
35472 25700 MT
(n)SH
10 /Times-Roman AF
35872 25355 MT
(\051 for)
356 W( 1)357 W
/Symbol SF
39234 XM
(\243)SH
/Times-Italic SF
39933 XM
(i)SH
/Symbol SF
40361 XM
(\243)SH
/Times-Roman SF
41060 XM
(2)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(. For)
964 W( a permutation)357 W
/Symbol SF
52011 XM
(p)SH
/Times-Roman SF
53167 XM
(of)SH
7200 26732 MT
({1, . . . ,2)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(}, let)SH
/Times-Italic SF
13660 XM
(G)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(,)SH
/Symbol SF
(p)SH
/Times-Roman SF
(\051 be a graph which for inputs)SH
/Times-Italic SF
27595 XM
(x)SH
8 /Times-Roman AF
28039 27077 MT
(1)SH
10 SS 
28439 26732 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
31133 27077 MT
(2)SH
/Times-Italic SF
(n)SH
10 /Times-Roman AF
32183 26732 MT
(denotes the function)SH
/Times-Italic SF
40543 XM
(mul)SH
8 SS 
42043 27077 MT
(i)SH
10 /Times-Roman AF
42415 26732 MT
(\050)SH
/Times-Italic SF
(x)SH
8 /Symbol AF
43192 27077 MT
(p)SH
/Times-Roman SF
(\0501\051)SH
10 SS 
44563 26732 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 /Symbol AF
47257 27077 MT
(p)SH
/Times-Roman SF
(\0502)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(\051)SH
10 SS 
49028 26732 MT
(\051)SH
/Times-Bold SF
10200 29184 MT
(Theorem 2:)SH
/Times-Roman SF
15421 XM
(For any)SH
/Symbol SF
18754 XM
(p)SH
/Times-Roman SF
19553 XM
(there exists an)SH
/Times-Italic SF
25524 XM
(i)SH
/Times-Roman SF
(, 1)SH
/Symbol SF
26952 XM
(\243)SH
/Times-Italic SF
27651 XM
(i)SH
/Symbol SF
28079 XM
(\243)SH
/Times-Roman SF
28778 XM
(2)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
30028 XM
(such that)SH
/Times-Italic SF
33861 XM
(G)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(,)SH
/Symbol SF
(p)SH
/Times-Roman SF
(\051 contains at least 2)SH
8 /Times-Italic AF
43714 28839 MT
(n)SH
/Times-Roman SF
(/8)SH
10 SS 
44986 29184 MT
(vertices.)SH
/Times-Italic SF
8200 31663 MT
(Proof)SH
/Times-Roman SF
10741 XM
(: Informally,)
276 W( our proof proceeds as follows.  If one input \050the "control"\051 to a multiplier is a power)
13 W( of 2 then)12 W
7200 33040 MT
(the circuit acts as a shifter, transferring the bits of the other input \050the "data"\051 to)
75 W( the output with some offset.  For)76 W
7200 34417 MT
(example, if)SH
/Times-Italic SF
11949 XM
(b)SH
/Times-Roman SF
12699 XM
(= 2)SH
8 /Times-Italic AF
14013 34072 MT
(j)SH
10 /Times-Roman AF
14235 34417 MT
(, then)SH
9200 37026 MT
([)SH
/Times-Italic SF
(a)SH
/Symbol SF
(\327)SH
/Times-Italic SF
(b)SH
/Times-Roman SF
(])SH
8 /Times-Italic AF
11116 37371 MT
(i)SH
10 /Times-Roman AF
12024 37026 MT
(=)SH
24 /Symbol AF
13274 37442 MT
({)SH
10 /Times-Italic AF
14426 36735 MT
(a)SH
8 SS 
14926 37080 MT
(i)SH
/Symbol SF
(-)SH
/Times-Italic SF
(j)SH
10 SS 
16495 36735 MT
(j)SH
/Times-Roman SF
16923 XM
(<)SH
/Times-Italic SF
17637 XM
(i)SH
/Symbol SF
18065 XM
(\243)SH
/Times-Italic SF
18764 XM
(j)SH
/Times-Roman SF
(+)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
14426 37941 MT
(0 else)1319 W
7200 39461 MT
(Graph)SH
/Times-Italic SF
10018 XM
(G)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(,)SH
/Symbol SF
(p)SH
/Times-Roman SF
(\051 must contain enough vertices to encode all values of)69 W
/Times-Italic SF
34613 XM
(a)SH
8 SS 
35113 39806 MT
(i)SH
/Symbol SF
(-)SH
/Times-Italic SF
(j)SH
10 /Times-Roman AF
36314 39461 MT
(for which)68 W
/Times-Italic SF
40560 XM
(a)SH
8 SS 
41060 39806 MT
(i)SH
/Symbol SF
(-)SH
/Times-Italic SF
(j)SH
10 /Times-Roman AF
42261 39461 MT
(occurs in the first half of the)68 W
7200 40838 MT
(input sequence while)8 W
/Times-Italic SF
15917 XM
(b)SH
8 SS 
16417 41183 MT
(j)SH
10 /Times-Roman AF
16897 40838 MT
(occurs in the second.  Furthermore,)
8 W( we can show that for any ordering of input variables, we)9 W
7200 42215 MT
(can choose which input \050)78 W
/Times-Italic SF
(a)SH
/Times-Roman SF
18338 XM
(or)SH
/Times-Italic SF
19499 XM
(b)SH
/Times-Roman SF
(\051 is control and which is data such that for some output)78 W
/Times-Italic SF
43155 XM
(i)SH
/Times-Roman SF
(, this undesirable)
78 W( splitting)77 W
7200 43592 MT
(occurs for at least)SH
/Times-Italic SF
14531 XM
(n)SH
/Times-Roman SF
(/8 values of)SH
/Times-Italic SF
19947 XM
(j)SH
/Times-Roman SF
(.)SH
8200 46071 MT
(More formally, for permutation)SH
/Symbol SF
21059 XM
(p)SH
/Times-Roman SF
21858 XM
(let)SH
/Times-Italic SF
9200 47976 MT
(t)SH
/Times-Roman SF
10164 XM
(=)SH
/Symbol SF
11414 XM
(|)SH
/Times-Roman SF
11764 XM
({)SH
/Times-Italic SF
12394 XM
(j)SH
/Symbol SF
12822 XM
(|)SH
/Times-Roman SF
13172 XM
(1)SH
/Symbol SF
13822 XM
(\243)SH
/Times-Italic SF
14521 XM
(j)SH
/Symbol SF
14949 XM
(\243)SH
/Times-Italic SF
15648 XM
(n)SH
/Times-Roman SF
(,)SH
/Symbol SF
16648 XM
(p)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
17958 XM
(\051)SH
/Symbol SF
18441 XM
(\243)SH
/Times-Italic SF
19140 XM
(n)SH
/Times-Roman SF
19790 XM
(})SH
/Symbol SF
20420 XM
(|)SH
/Times-Roman SF
(,)SH
7200 49610 MT
(i.e. the number of bits)
37 W( of argument)38 W
/Times-Italic SF
21599 XM
(a)SH
/Times-Roman SF
22387 XM
(occurring in the first half of the input sequence.  If)38 W
/Times-Italic SF
43245 XM
(t)SH
/Symbol SF
43823 XM
(\263)SH
/Times-Italic SF
44672 XM
(n)SH
/Times-Roman SF
(/2 define sets)38 W
/Times-Italic SF
50813 XM
(F)SH
/Times-Roman SF
51712 XM
(and)SH
/Times-Italic SF
53444 XM
(L)SH
/Times-Roman SF
7200 50987 MT
(as)SH
/Times-Italic SF
9200 52892 MT
(F)SH
/Times-Roman SF
10497 XM
(= {)436 W
/Symbol SF
12377 XM
(p)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
13687 XM
(\051)SH
/Symbol SF
14170 XM
(|)SH
/Times-Roman SF
14520 XM
(1)SH
/Symbol SF
15170 XM
(\243)SH
/Times-Italic SF
15869 XM
(j)SH
/Symbol SF
16297 XM
(\243)SH
/Times-Italic SF
16996 XM
(n)SH
/Times-Roman SF
(,)SH
/Symbol SF
17996 XM
(p)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
19306 XM
(\051)SH
/Symbol SF
19789 XM
(\243)SH
/Times-Italic SF
20488 XM
(n)SH
/Times-Roman SF
21138 XM
(})SH
/Times-Italic SF
9200 55102 MT
(L)SH
/Times-Roman SF
10442 XM
(= {)436 W
/Symbol SF
12322 XM
(p)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
13632 XM
(\051)SH
/Symbol SF
14115 XM
(|)SH
/Times-Italic SF
14465 XM
(n)SH
/Times-Roman SF
(+1)SH
/Symbol SF
16179 XM
(\243)SH
/Times-Italic SF
16878 XM
(j)SH
/Symbol SF
17306 XM
(\243)SH
/Times-Roman SF
18005 XM
(2)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(,)SH
/Symbol SF
19505 XM
(p)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
20815 XM
(\051)
150 MX(>)SH
/Times-Italic SF
22012 XM
(n)SH
/Times-Roman SF
22662 XM
(})SH
7200 56622 MT
(That is,)166 W
/Times-Italic SF
10782 XM
(F)SH
/Times-Roman SF
11809 XM
(represents those the indices of)
166 W( argument)165 W
/Times-Italic SF
29133 XM
(a)SH
/Times-Roman SF
30048 XM
(occurring in the first half of the input sequence, while)165 W
/Times-Italic SF
53444 XM
(L)SH
/Times-Roman SF
7200 57999 MT
(represents those indices of)SH
/Times-Italic SF
18031 XM
(b)SH
/Times-Roman SF
18781 XM
(\050with)SH
/Times-Italic SF
21142 XM
(n)SH
/Times-Roman SF
21892 XM
(added to them\051 occurring in the second half.  If)SH
/Times-Italic SF
40971 XM
(t)SH
/Times-Roman SF
41549 XM
(<)SH
/Times-Italic SF
42413 XM
(n)SH
/Times-Roman SF
(/2 then define)SH
/Times-Italic SF
48662 XM
(F)SH
/Times-Roman SF
49523 XM
(and)SH
/Times-Italic SF
51217 XM
(L)SH
/Times-Roman SF
52023 XM
(as)SH
/Times-Italic SF
9200 59904 MT
(F)SH
/Times-Roman SF
10497 XM
(= {)436 W
/Symbol SF
12377 XM
(p)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
13687 XM
(\051)SH
/Symbol SF
14170 XM
(|)SH
/Times-Roman SF
14520 XM
(1)SH
/Symbol SF
15170 XM
(\243)SH
/Times-Italic SF
15869 XM
(j)SH
/Symbol SF
16297 XM
(\243)SH
/Times-Italic SF
16996 XM
(n)SH
/Times-Roman SF
(,)SH
/Symbol SF
17996 XM
(p)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
19306 XM
(\051)
150 MX(>)SH
/Times-Italic SF
20503 XM
(n)SH
/Times-Roman SF
21153 XM
(})SH
/Times-Italic SF
9200 62114 MT
(L)SH
/Times-Roman SF
10442 XM
(= {)436 W
/Symbol SF
12322 XM
(p)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
13632 XM
(\051)SH
/Symbol SF
14115 XM
(|)SH
/Times-Italic SF
14465 XM
(n)SH
/Times-Roman SF
(+1)SH
/Symbol SF
16179 XM
(\243)SH
/Times-Italic SF
16878 XM
(j)SH
/Symbol SF
17306 XM
(\243)SH
/Times-Roman SF
18005 XM
(2)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(,)SH
/Symbol SF
19505 XM
(p)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
20815 XM
(\051)SH
/Symbol SF
21298 XM
(\243)SH
/Times-Italic SF
21997 XM
(n)SH
/Times-Roman SF
22647 XM
(})SH
7200 63634 MT
(That is,)86 W
/Times-Italic SF
10622 XM
(F)SH
/Times-Roman SF
11569 XM
(represents those indices of)86 W
/Times-Italic SF
22744 XM
(b)SH
/Times-Roman SF
23580 XM
(\050with)SH
/Times-Italic SF
26027 XM
(n)SH
/Times-Roman SF
26863 XM
(added to them\051 occurring in the first half while)86 W
/Times-Italic SF
46606 XM
(L)SH
/Times-Roman SF
47498 XM
(represents those)87 W
7200 65011 MT
(indices of)18 W
/Times-Italic SF
11402 XM
(a)SH
/Times-Roman SF
12170 XM
(occurring in the second.  In either case the sets)18 W
/Times-Italic SF
31262 XM
(F)SH
/Times-Roman SF
32141 XM
(and)SH
/Times-Italic SF
33853 XM
(L)SH
/Times-Roman SF
34677 XM
(will each contain at least)18 W
/Times-Italic SF
44904 XM
(n)SH
/Times-Roman SF
(/2 elements.)
18 W( We)
284 W( will)17 W
7200 66388 MT
(consider the elements of)58 W
/Times-Italic SF
17430 XM
(F)SH
/Times-Roman SF
18349 XM
(to be data inputs and those of)58 W
/Times-Italic SF
30726 XM
(L)SH
/Times-Roman SF
31590 XM
(to be control.  Since multiplication is)
58 W( commutative, we)59 W
7200 67765 MT
(are free to choose which argument is considered the control input and which is considered the data in our proof.)SH
8200 70244 MT
(For 1)SH
/Symbol SF
10489 XM
(\243)SH
/Times-Italic SF
11188 XM
(i)SH
/Symbol SF
11616 XM
(\243)SH
/Times-Roman SF
12315 XM
(2)SH
/Times-Italic SF
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1 define the set)SH
/Times-Italic SF
20196 XM
(F)SH
8 SS 
20807 70589 MT
(i)SH
10 /Times-Roman AF
21279 70244 MT
(as)SH
ES
%%Page: 24 24

61200 79200 BS
0 SI
10 /Times-Roman AF
30100 4286 MT
(24)SH
/Times-Italic SF
9200 8000 MT
(F)SH
8 SS 
9811 8345 MT
(i)SH
10 /Times-Roman AF
10719 8000 MT
(= {)436 W
/Times-Italic SF
12599 XM
(j)SH
/Symbol SF
13177 XM
(|)SH
/Times-Italic SF
13627 XM
(j)SH
/Symbol SF
14205 XM
(\316)SH
/Times-Italic SF
15218 XM
(F)SH
/Times-Roman SF
(,)SH
/Symbol SF
16579 XM
($)SH
/Times-Italic SF
(k)SH
/Symbol SF
17872 XM
(\316)SH
/Times-Italic SF
18885 XM
(L)SH
/Times-Roman SF
19591 XM
(\050)SH
/Times-Italic SF
20074 XM
(j)SH
/Times-Roman SF
(+)SH
/Times-Italic SF
(k)SH
/Times-Roman SF
21510 XM
(=)SH
/Times-Italic SF
22224 XM
(i)SH
/Times-Roman SF
(+)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(+1\051)
150 MX(})SH
7200 9634 MT
(and let)76 W
/Times-Italic SF
10295 XM
(q)SH
8 SS 
10795 9979 MT
(i)SH
10 /Times-Roman AF
11167 9634 MT
(=)SH
/Symbol SF
11881 XM
(|)SH
/Times-Italic SF
(F)SH
8 SS 
12692 9979 MT
(i)SH
10 /Symbol AF
13064 9634 MT
(|)SH
/Times-Roman SF
(. That)
400 W( is, for output)75 W
/Times-Italic SF
21936 XM
(i)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
22789 XM
(F)SH
8 SS 
23400 9979 MT
(i)SH
10 /Times-Roman AF
23947 9634 MT
(represents those indices of the data input occurring in the first half of the)75 W
7200 11011 MT
(input sequence such that the corresponding bits of the control input occur in the second half.)SH
8200 13490 MT
(Now consider the set of sequences)SH
/Times-Italic SF
9200 15395 MT
(S)SH
8 SS 
9700 15740 MT
(i)SH
10 /Times-Roman AF
10608 15395 MT
(= {)436 W
/Times-Italic SF
(x)SH
8 /Times-Roman AF
12782 15740 MT
(1)SH
10 SS 
13182 15395 MT
(, . . .)SH
/Times-Italic SF
15182 XM
(x)SH
8 SS 
15626 15740 MT
(n)SH
10 /Symbol AF
16176 15395 MT
(|)SH
/Times-Italic SF
16526 XM
(x)SH
8 SS 
16970 15740 MT
(j)SH
10 /Times-Roman AF
17192 15395 MT
(=0 if)150 W
/Symbol SF
19667 XM
(p)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(\051)SH
/Symbol SF
21460 XM
(\317)SH
/Times-Italic SF
22473 XM
(F)SH
8 SS 
23084 15740 MT
(i)SH
10 /Times-Roman AF
23456 15395 MT
(})SH
7200 17123 MT
(This set contains 2)89 W
8 /Times-Italic AF
14939 16778 MT
(q)SH
15339 17123 MT
(i)SH
10 /Times-Roman AF
15900 XM
(possible values for)
89 W( the first)90 W
/Times-Italic SF
27430 XM
(n)SH
/Times-Roman SF
28270 XM
(inputs. We)
430 W( claim that)90 W
/Times-Italic SF
37775 XM
(G)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(,)SH
/Symbol SF
(p)SH
/Times-Roman SF
(\051 must contain a unique vertex for)90 W
7200 18500 MT
(each element of)167 W
/Times-Italic SF
14282 XM
(S)SH
8 SS 
14782 18845 MT
(i)SH
10 /Times-Roman AF
15004 18500 MT
(. If)
584 W( this were not the case, then we could)
167 W( choose two sequences)166 W
/Times-Italic SF
43054 XM
(x)SH
8 /Times-Roman AF
43498 18845 MT
(1)SH
10 SS 
43898 18500 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 SS 
46592 18845 MT
(n)SH
10 /Times-Roman AF
47408 18500 MT
(and)SH
/Times-Italic SF
49268 XM
(x)SH
/Symbol SF
49862 XM
(\242)SH
8 /Times-Roman AF
50109 18845 MT
(1)SH
10 SS 
50509 18500 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
/Symbol SF
53353 XM
(\242)SH
8 /Times-Italic AF
53600 18845 MT
(n)SH
10 /Times-Roman AF
7200 19877 MT
(leading to the same vertex in)69 W
/Times-Italic SF
19390 XM
(G)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(,)SH
/Symbol SF
(p)SH
/Times-Roman SF
(\051 such that for some value)69 W
/Times-Italic SF
32545 XM
(j)SH
/Times-Roman SF
(,)SH
/Symbol SF
33392 XM
(p)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
34702 XM
(\051)SH
/Symbol SF
35185 XM
(\316)SH
/Times-Italic SF
36048 XM
(F)SH
8 SS 
36659 20222 MT
(i)SH
10 /Times-Roman AF
37200 19877 MT
(and)SH
/Times-Italic SF
38964 XM
(x)SH
8 SS 
39408 20222 MT
(j)SH
10 /Symbol AF
39780 19877 MT
(\271)SH
/Times-Italic SF
40479 XM
(x)SH
/Symbol SF
41073 XM
(\242)SH
8 /Times-Italic AF
41320 20222 MT
(j)SH
10 /Times-Roman AF
41542 19877 MT
(. Now)
390 W( consider the sequences)70 W
/Times-Italic SF
7200 21254 MT
(x)SH
8 SS 
7644 21599 MT
(n)SH
/Times-Roman SF
(+1)SH
10 SS 
8895 21254 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
11589 21599 MT
(2)SH
/Times-Italic SF
(n)SH
10 /Times-Roman AF
12639 21254 MT
(and)SH
/Times-Italic SF
14333 XM
(x)SH
/Symbol SF
14927 XM
(\242)SH
8 /Times-Italic AF
15174 21599 MT
(n)SH
/Times-Roman SF
(+1)SH
10 SS 
16425 21254 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
/Symbol SF
19269 XM
(\242)SH
8 /Times-Roman AF
19516 21599 MT
(2)SH
/Times-Italic SF
(n)SH
10 /Times-Roman AF
20566 21254 MT
(defined as)SH
/Times-Italic SF
9200 23863 MT
(x)SH
8 SS 
9644 24208 MT
(k)SH
10 /Times-Roman AF
10685 23863 MT
(=)SH
/Times-Italic SF
11935 XM
(x)SH
/Symbol SF
12529 XM
(\242)SH
8 /Times-Italic AF
12776 24208 MT
(k)SH
10 /Times-Roman AF
13817 23863 MT
(=)SH
24 /Symbol AF
15067 24279 MT
({)SH
10 /Times-Roman AF
16219 23572 MT
(1,)SH
/Symbol SF
17655 XM
(p)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(\051+)SH
/Symbol SF
(p)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(k)SH
/Times-Roman SF
(\051 =)SH
/Times-Italic SF
22435 XM
(i)SH
/Times-Roman SF
(+)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(+1)SH
16219 24477 MT
(0, else)436 W
7200 25997 MT
(Note that)15 W
/Times-Italic SF
11174 XM
(x)SH
8 SS 
11618 26342 MT
(k)SH
10 /Times-Roman AF
12238 25997 MT
(and)SH
/Times-Italic SF
13947 XM
(x)SH
/Symbol SF
14541 XM
(\242)SH
8 /Times-Italic AF
14788 26342 MT
(k)SH
10 /Times-Roman AF
15408 25997 MT
(equal 1 for exactly)
15 W( one value of)14 W
/Times-Italic SF
28422 XM
(k)SH
/Times-Roman SF
(. The)
278 W( sequences)14 W
/Times-Italic SF
35781 XM
(x)SH
8 /Times-Roman AF
36225 26342 MT
(1)SH
10 SS 
36625 25997 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 /Times-Roman AF
39319 26342 MT
(2)SH
/Times-Italic SF
(n)SH
10 /Times-Roman AF
40383 25997 MT
(and)SH
/Times-Italic SF
42091 XM
(x)SH
/Symbol SF
42685 XM
(\242)SH
8 /Times-Roman AF
42932 26342 MT
(1)SH
10 SS 
43332 25997 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
/Symbol SF
46176 XM
(\242)SH
8 /Times-Roman AF
46423 26342 MT
(2)SH
/Times-Italic SF
(n)SH
10 /Times-Roman AF
47487 25997 MT
(lead to the same)14 W
7200 27374 MT
(terminal vertex in)SH
/Times-Italic SF
14560 XM
(G)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(,)SH
/Symbol SF
(p)SH
/Times-Roman SF
(\051, but)SH
/Times-Italic SF
9200 29165 MT
(mul)SH
8 SS 
10700 29510 MT
(i)SH
10 /Times-Roman AF
11072 29165 MT
(\050)SH
/Times-Italic SF
(x)SH
8 /Symbol AF
11849 29510 MT
(p)SH
/Times-Roman SF
(\0501\051)SH
10 SS 
13220 29165 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
8 /Symbol AF
15914 29510 MT
(p)SH
/Times-Roman SF
(\0502)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(\051)SH
10 SS 
17685 29165 MT
(\051 =)436 W
/Times-Italic SF
19954 XM
(x)SH
8 SS 
20398 29510 MT
(j)SH
10 /Times-Roman AF
7200 30685 MT
(while)SH
/Times-Italic SF
9200 32590 MT
(mul)SH
8 SS 
10700 32935 MT
(i)SH
10 /Times-Roman AF
11072 32590 MT
(\050)SH
/Times-Italic SF
(x)SH
/Symbol SF
11999 XM
(\242)SH
8 SS 
12246 32935 MT
(p)SH
/Times-Roman SF
(\0501\051)SH
10 SS 
13617 32590 MT
(, . . . ,)SH
/Times-Italic SF
(x)SH
/Symbol SF
16461 XM
(\242)SH
8 SS 
16708 32935 MT
(p)SH
/Times-Roman SF
(\0502)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(\051)SH
10 SS 
18479 32590 MT
(\051 =)436 W
/Times-Italic SF
20748 XM
(x)SH
/Symbol SF
21342 XM
(\242)SH
8 /Times-Italic AF
21589 32935 MT
(j)SH
10 /Symbol AF
22647 32590 MT
(\271)SH
/Times-Italic SF
24032 XM
(x)SH
8 SS 
24476 32935 MT
(j)SH
10 /Times-Roman AF
24698 32590 MT
(.)SH
7200 34318 MT
(This contradiction forces us to conclude that graph)SH
/Times-Italic SF
27752 XM
(G)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(,)SH
/Symbol SF
(p)SH
/Times-Roman SF
(\051 must contain at least 2)SH
8 /Times-Italic AF
39411 33973 MT
(q)SH
39811 34318 MT
(i)SH
10 /Times-Roman AF
40283 XM
(vertices.)SH
8200 36797 MT
(To get the final result, we need only show that for)
45 W( some value of)46 W
/Times-Italic SF
34913 XM
(i)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
35737 XM
(q)SH
8 SS 
36237 37142 MT
(i)SH
10 /Symbol AF
36859 36797 MT
(\263)SH
/Times-Italic SF
37808 XM
(n)SH
/Times-Roman SF
(/8. This)
342 W( involves a counting argument)46 W
7200 38174 MT
(expressed by the following lemma.)SH
/Times-Bold SF
10200 40532 MT
(Lemma 4:)SH
/Times-Roman SF
14810 XM
(Suppose)SH
/Times-Italic SF
18449 XM
(A)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(B)SH
/Symbol SF
20321 XM
(\315)SH
/Times-Roman SF
21434 XM
({1, . . . ,)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
25314 XM
(} each contain at least)SH
/Times-Italic SF
34375 XM
(n)SH
/Times-Roman SF
(/2 elements.  For 1)SH
/Symbol SF
42497 XM
(\243)SH
/Times-Italic SF
43196 XM
(i)SH
/Symbol SF
43624 XM
(\243)SH
/Times-Roman SF
44323 XM
(2)SH
/Times-Italic SF
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1 let)SH
/Times-Italic SF
11200 42437 MT
(q)SH
8 SS 
11700 42782 MT
(i)SH
10 /Times-Roman AF
12608 42437 MT
(=)SH
/Symbol SF
13858 XM
(|)SH
/Times-Roman SF
14208 XM
({)
150 MX(<)SH
/Times-Italic SF
(a)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(b)SH
/Times-Roman SF
(>)SH
/Symbol SF
17366 XM
(|)SH
/Times-Italic SF
17716 XM
(a)SH
/Symbol SF
18366 XM
(\316)SH
/Times-Italic SF
19229 XM
(A)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
20340 XM
(b)SH
/Symbol SF
20990 XM
(\316)SH
/Times-Italic SF
21853 XM
(B)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
22964 XM
(a)SH
/Times-Roman SF
(+)SH
/Times-Italic SF
(b)SH
/Times-Roman SF
(=)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(+1})SH
/Symbol SF
27064 XM
(|)SH
/Times-Roman SF
9200 44071 MT
(Then there is some)SH
/Times-Italic SF
17032 XM
(i)SH
/Times-Roman SF
17560 XM
(such that)SH
/Times-Italic SF
21393 XM
(q)SH
8 SS 
21893 44416 MT
(i)SH
10 /Symbol AF
22415 44071 MT
(\263)SH
/Times-Italic SF
23264 XM
(n)SH
/Times-Roman SF
(/8.)SH
/Times-Italic SF
8200 46550 MT
(Proof)SH
/Times-Roman SF
10744 XM
(: Observe)
282 W( that since the sets)16 W
/Times-Italic SF
22493 XM
(A)SH
/Times-Roman SF
23370 XM
(and)SH
/Times-Italic SF
25079 XM
(B)SH
/Times-Roman SF
25955 XM
(each contain at least)15 W
/Times-Italic SF
34346 XM
(n)SH
/Times-Roman SF
(/2 elements, there are at least)15 W
/Times-Italic SF
46794 XM
(n)SH
8 /Times-Roman AF
47294 46205 MT
(2)SH
10 SS 
47694 46550 MT
(/4 ordered pairs)15 W
7200 47927 MT
(<)SH
/Times-Italic SF
(a)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(b)SH
/Times-Roman SF
(> with)SH
/Times-Italic SF
11856 XM
(a)SH
/Symbol SF
12756 XM
(\316)SH
/Times-Italic SF
13869 XM
(A)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
14980 XM
(b)SH
/Symbol SF
15880 XM
(\316)SH
/Times-Italic SF
16993 XM
(B)SH
/Times-Roman SF
(. Hence)250 W
/Times-Italic SF
11239 50745 MT
(q)SH
8 SS 
11739 51090 MT
(j)SH
10 /Symbol AF
12797 50745 MT
(\263)SH
8 /Times-Roman AF
9200 49581 MT
(2)SH
/Times-Italic SF
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
16 /Symbol AF
9449 51036 MT
(\345)SH
8 /Times-Italic AF
9483 51830 MT
(j)SH
/Times-Roman SF
(=1)SH
10 /Times-Italic AF
14182 50081 MT
(n)SH
8 /Times-Roman AF
14682 49736 MT
(2)SH
900 50 14182 50500 UL
10 SS 
14382 51405 MT
(4)SH
7200 52925 MT
(For some value of)SH
/Times-Italic SF
14699 XM
(i)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
15477 XM
(q)SH
8 SS 
15977 53270 MT
(i)SH
10 /Times-Roman AF
16449 52925 MT
(must be at least as large as the average value of the)SH
/Times-Italic SF
37110 XM
(q)SH
8 SS 
37610 53270 MT
(j)SH
10 /Times-Roman AF
37832 52925 MT
('s:)SH
/Times-Italic SF
9200 55588 MT
(q)SH
8 SS 
9700 55933 MT
(i)SH
10 /Symbol AF
10758 55588 MT
(\263 \327)
2885 W( \263)1736 W
/Times-Roman SF
18563 XM
(.)SH
12917 54924 MT
(1)SH
2049 50 12143 55343 UL
12143 56248 MT
(2)SH
/Times-Italic SF
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
/Times-Italic SF
14942 54924 MT
(n)SH
8 /Times-Roman AF
15442 54579 MT
(2)SH
900 50 14942 55343 UL
10 SS 
15142 56248 MT
(4)SH
/Times-Italic SF
18063 54924 MT
(n)SH
500 50 18063 55343 UL
/Times-Roman SF
18063 56248 MT
(8)SH
8200 58727 MT
(This theorem shows that for)
118 W( any ordering, some multiplier output will have a graph of exponential size.  This)119 W
7200 60104 MT
(leaves open the possibility)
14 W( that for each output, there could be some ordering giving a polynomial size graph for this)13 W
7200 61481 MT
(output. We)
372 W( conjecture, however, that this is not the case, namely that for certain outputs \050e.g.)
61 W( output)62 W
/Times-Italic SF
48794 XM
(n)SH
/Times-Roman SF
(\051, the graph)62 W
7200 62858 MT
(for this function is of exponential)
191 W( size regardless of the ordering.)190 W
8 SS 
35017 62513 MT
(12)SH
10 SS 
36697 62858 MT
(A proof of this conjecture would require)190 W
7200 64235 MT
(something stronger than our simple shifter argument.  Such a proof would also)
9 W( lead to an interesting area-time lower)10 W
7200 65612 MT
(bound on circuits computing single bits in the product of two binary numbers.)SH
10800 50 7200 68504 UL
6 SS 
8000 69843 MT
(12)SH
8 /Times-Bold AF
8600 70152 MT
(Update:)SH
/Times-Roman SF
11889 XM
(This conjecture was subsequently proved by the author \050R. E. Bryant, "On the Complexity of)
67 W( VLSI Implementations and Graph)66 W
7200 71076 MT
(Representations of Boolean Functions with Application)
91 W( to Integer Multiplication,")92 W
/Times-Italic SF
34603 XM
(IEEE Transactions on Computers)92 W
/Times-Roman SF
45992 XM
(40-2, pp. 205-213, Feb.,)92 W
7200 72000 MT
(1991.\051)SH
ES
%%Page: 25 25

61200 79200 BS
0 SI
10 /Times-Roman AF
30100 4286 MT
(25)SH
12 /Times-Bold AF
7200 8004 MT
(References)SH
10 /Times-Roman AF
7200 9795 MT
(1.)SH
10200 XM
(C.Y. Lee, ``Representation of Switching Circuits by Binary-Decision Programs'',)182 W
/Times-Italic SF
44806 XM
(Bell System Technical)181 W
10200 10900 MT
(Journal)SH
/Times-Roman SF
(, Vol. 38, July 1959, pp. 985-999.)SH
7200 12691 MT
(2.)SH
10200 XM
(S.B. Akers,)
85 W( ``Binary Decision Diagrams'',)86 W
/Times-Italic SF
27987 XM
(IEEE Transactions on Computers)86 W
/Times-Roman SF
(, Vol.)
SH( C-27,)
86 W( No.)
SH( 6,)
86 W( June 1978,)SH
10200 13796 MT
(pp. 509-516.)SH
7200 15587 MT
(3.)SH
10200 XM
(M.R. Garey and D.S. Johnson,)121 W
/Times-Italic SF
23304 XM
(Computers and Intractibility: A Guide to the)
121 W( Theory of NP-Completeness,)120 W
/Times-Roman SF
10200 16692 MT
(Freeman, New York, 1979.)SH
7200 18483 MT
(4.)SH
10200 XM
(F.J. Hill and G.R. Peterson,)SH
/Times-Italic SF
21478 XM
(Introduction to Switching Theory and Logical Design,)SH
/Times-Roman SF
43423 XM
(Wiley, New York, 1974.)SH
7200 20274 MT
(5.)SH
10200 XM
(J.P. Roth,)SH
/Times-Italic SF
14340 XM
(Computer Logic, Testing, and Verification,)SH
/Times-Roman SF
31841 XM
(Computer Science Press, Potomac, MD., 1980.)SH
7200 22065 MT
(6.)SH
10200 XM
(R. Brayton,)89 W
/Times-Italic SF
15268 XM
(et al)90 W
/Times-Roman SF
(, ``Fast Recursive Boolean Function Manipulation'',)90 W
/Times-Italic SF
38924 XM
(International Symposium on Circuits)90 W
10200 23170 MT
(and Systems)SH
/Times-Roman SF
(, IEEE, Rome, Italy, May 1982, pp. 58-62.)SH
7200 24961 MT
(7.)SH
10200 XM
(B.M.E. Moret, ``Decision)
51 W( Trees and Diagrams'',)50 W
/Times-Italic SF
30303 XM
(ACM Computing Surveys)50 W
/Times-Roman SF
(, Vol.)
SH( 14,)
50 W( No.)
SH( 4,)
50 W( December 1982,)SH
10200 26066 MT
(pp. 593-623.)SH
7200 27857 MT
(8.)SH
10200 XM
(S. Fortune, J. Hopcroft, and E.M. Schmidt,)
166 W( ``The Complexity of Equivalence and Containment for Free)167 W
10200 28962 MT
(Single Variable Program)
320 W( Schemes'', in)319 W
/Times-Italic SF
27739 XM
(Automata, Languages, and Programming,)319 W
/Times-Roman SF
46154 XM
(Goos, Hartmannis,)319 W
10200 30067 MT
(Ausiello, and Boehm, eds., Springer-Verlag, Lecture Notes in Computer Science,)
286 W( Vol. 62, 1978, pp.)287 W
10200 31172 MT
(227-240.)SH
7200 32963 MT
(9.)SH
10200 XM
(R.W. Payne, ``Reticulation and Other Methods of)
70 W( Reducing the Size of Printed Diagnostic Keys'',)69 W
/Times-Italic SF
50889 XM
(Journal)SH
10200 34068 MT
(of General Microbiology)SH
/Times-Roman SF
(, Vol. 98, 1977, pp. 595-597.)SH
7200 35859 MT
(10.)SH
10200 XM
(R. Brayton,)SH
/Times-Italic SF
15089 XM
(et al)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
17339 XM
(Logic Minimization Algorithms for VLSI Synthesis,)SH
/Times-Roman SF
38035 XM
(Kluwer Academic Publishers, 1984.)SH
7200 37650 MT
(11.)SH
10200 XM
(C.E. Shannon, ``A Symbolic Analysis of Relay and Switching Circuits'',)147 W
/Times-Italic SF
41169 XM
(Transactions of the)
147 W( AIEE)148 W
/Times-Roman SF
(, Vol.)SH
10200 38755 MT
(57, 1938, pp. 713-723.)SH
7200 40546 MT
(12.)SH
10200 XM
(C.S. Wallace, ``A Suggestion for a Fast Multiplier'',)185 W
/Times-Italic SF
33011 XM
(IEEE Transactions on Electronic)
185 W( Computing)184 W
/Times-Roman SF
(, Vol.)SH
10200 41651 MT
(EC-13, No. 1, January 1964, pp. 14-17.)SH
7200 43442 MT
(13.)SH
10200 XM
(A.V. Aho, J.E. Hopcroft, and J.D. Ullman,)164 W
/Times-Italic SF
28679 XM
(The Design)
164 W( and Analysis of Computer Algorithms,)165 W
/Times-Roman SF
50278 XM
(Addison-)SH
10200 44547 MT
(Wesley, Reading, MA., 1974.)SH
7200 46338 MT
(14.)SH
10200 XM
(J.S. Jephson, R.P. McQuarrie, and R.E. Vogelsberg, ``A Three-Level)
151 W( Design Verification System'',)150 W
/Times-Italic SF
52223 XM
(IBM)SH
10200 47443 MT
(Systems Journal)SH
/Times-Roman SF
(, Vol. 8, No. 3, 1969, pp. 178-188.)SH
7200 49234 MT
(15.)SH
10450 XM
(Texas Instruments,)SH
/Times-Italic SF
18310 XM
(TTL Data Book,)SH
/Times-Roman SF
25033 XM
(1976.)SH
7200 51025 MT
(16.)SH
10200 XM
(M. Rowan-Robinson,)SH
/Times-Italic SF
19089 XM
(Cosmology,)SH
/Times-Roman SF
24089 XM
(Oxford Univ. Press, 1977.)SH
7200 52816 MT
(17.)SH
10200 XM
(S.B. Akers, ``Functional Testing with Binary Decision Diagrams'',)164 W
/Times-Italic SF
38676 XM
(Eighth Annual Conference)
164 W( on Fault-)165 W
10200 53921 MT
(Tolerant Computing)SH
/Times-Roman SF
(, IEEE, 1978, pp. 75-82.)SH
7200 55712 MT
(18.)SH
10200 XM
(R.P. Brent, and H.T. Kung, ``The)
306 W( Area-Time Complexity of Binary Multiplication'',)305 W
/Times-Italic SF
47779 XM
(Journal of the)305 W
10200 56817 MT
(ACM)SH
/Times-Roman SF
(, Vol. 28, No. 3, July 1981, pp. 521-534.)SH
7200 58608 MT
(19.)SH
10200 XM
(H. Abelson, and P. Andreae, ``Information Transfer and Area-Time)
102 W( Trade-Offs for VLSI Multiplication'',)103 W
/Times-Italic SF
10200 59713 MT
(Communications of the ACM)SH
/Times-Roman SF
(, Vol. 23, No. 1, January 1980, pp. 20-23.)SH
ES
%%Page: i 26

61200 79200 BS
0 SI
10 /Times-Roman AF
30461 4286 MT
(i)SH
12 /Times-Bold AF
26033 8004 MT
(Table of Contents)SH
11 SS 
8850 9172 MT
(1. Introduction)SH
53450 XM
(1)SH
10 SS 
10700 10252 MT
(1.1. Notation)SH
53500 XM
(3)SH
11 SS 
8850 11420 MT
(2. Representation)SH
53450 XM
(4)SH
8850 12588 MT
(3. Properties)SH
53450 XM
(6)SH
10 SS 
10700 13668 MT
(3.1. Example Functions)SH
53500 XM
(7)SH
10700 14748 MT
(3.2. Ordering Dependency)SH
53500 XM
(7)SH
10700 15828 MT
(3.3. Inherently Complex Functions)SH
53500 XM
(8)SH
11 SS 
8850 16996 MT
(4. Operations)SH
53450 XM
(9)SH
10 SS 
10700 18076 MT
(4.1. Data Structures)SH
53500 XM
(9)SH
10700 19156 MT
(4.2. Reduction)SH
53000 XM
(10)SH
10700 20236 MT
(4.3. Apply)SH
53000 XM
(12)SH
10700 21316 MT
(4.4. Restriction)SH
53000 XM
(15)SH
10700 22396 MT
(4.5. Composition)SH
53000 XM
(16)SH
10700 23476 MT
(4.6. Satisfy)SH
53000 XM
(16)SH
11 SS 
8850 24644 MT
(5. Experimental Results)SH
52900 XM
(19)SH
8850 25812 MT
(6. Conclusion)SH
52900 XM
(21)SH
8850 26980 MT
(Appendix: The Complexity of Integer Multiplication)SH
52900 XM
(23)SH
8850 28148 MT
(References)SH
52900 XM
(25)SH
ES
%%Page: ii 27

61200 79200 BS
0 SI
10 /Times-Roman AF
30322 4286 MT
(ii)SH
12 /Times-Bold AF
26866 8004 MT
(List of Figures)SH
11 SS 
8850 9172 MT
(Figure 1. Example Function Graphs)SH
53450 XM
(6)SH
8850 10340 MT
(Figure 2. Example of Argument Ordering Dependency)SH
53450 XM
(7)SH
8850 11508 MT
(Figure 3. Implementation of Ordered Traversal)SH
52900 XM
(10)SH
8850 12676 MT
(Figure 4. Implementation of)SH
/Times-BoldItalic SF
22323 XM
(Reduce)SH
/Times-Bold SF
52900 XM
(11)SH
8850 13844 MT
(Figure 5. Reduction Algorithm Example)SH
52900 XM
(12)SH
8850 15012 MT
(Figure 6. Implementation of)SH
/Times-BoldItalic SF
22323 XM
(Apply)SH
/Times-Bold SF
52900 XM
(14)SH
8850 16180 MT
(Figure 7. Example of)SH
/Times-BoldItalic SF
18963 XM
(Apply)SH
/Times-Bold SF
52900 XM
(15)SH
8850 17348 MT
(Figure 8. Implementation of)SH
/Times-BoldItalic SF
22323 XM
(Compose)SH
/Times-Bold SF
52900 XM
(17)SH
8850 18516 MT
(Figure 9. Implementation of)SH
/Times-BoldItalic SF
22323 XM
(Satisfy-one)SH
/Times-Bold SF
52900 XM
(18)SH
8850 19684 MT
(Figure 10. Implementation of)SH
/Times-BoldItalic SF
22873 XM
(Satisfy-all)SH
/Times-Bold SF
52900 XM
(19)SH
8850 20852 MT
(Figure 11. ALU Output Graph Sizes for Different Input Orderings)SH
52900 XM
(21)SH
ES
%%Page: iii 28

61200 79200 BS
0 SI
10 /Times-Roman AF
30183 4286 MT
(iii)SH
12 /Times-Bold AF
27099 8004 MT
(List of Tables)SH
11 SS 
8850 9172 MT
(Table 1. Summary of Basic Operations)SH
53450 XM
(9)SH
8850 10340 MT
(Table 2. ALU Verification Examples)SH
52900 XM
(20)SH
ES
%%Trailer
%%Pages: 28
%%DocumentFonts: Times-Roman Times-Bold Times-BoldItalic Times-Italic Symbol
